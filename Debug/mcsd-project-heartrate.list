
mcsd-project-heartrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000492c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001028  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae0  08005ae0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae8  08005ae8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae8  08005ae8  00015ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000001c  08005b0c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08005b0c  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb58  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ed  00000000  00000000  0002ebe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00030dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093a  00000000  00000000  000319d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002055b  00000000  00000000  0003230a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eec5  00000000  00000000  00052865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1401  00000000  00000000  0006172a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030b4  00000000  00000000  00122b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00125be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004aa0 	.word	0x08004aa0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000020 	.word	0x20000020
 80001c8:	08004aa0 	.word	0x08004aa0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fea4 	bl	800121a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f857 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f915 	bl	8000704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f8e3 	bl	80006a4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004de:	f000 f8a3 	bl	8000628 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
oledc_default_cfg(&hspi1);
 80004e2:	4822      	ldr	r0, [pc, #136]	; (800056c <main+0xa4>)
 80004e4:	f000 f9e6 	bl	80008b4 <oledc_default_cfg>
oledc_set_font(&oledc, guiFont_Tahoma_14_Regular, 0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	4921      	ldr	r1, [pc, #132]	; (8000570 <main+0xa8>)
 80004ec:	4821      	ldr	r0, [pc, #132]	; (8000574 <main+0xac>)
 80004ee:	f000 fbc6 	bl	8000c7e <oledc_set_font>
oledc_fill_screen(0xF800, &hspi1);
 80004f2:	491e      	ldr	r1, [pc, #120]	; (800056c <main+0xa4>)
 80004f4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80004f8:	f000 fae0 	bl	8000abc <oledc_fill_screen>
uint8_t text1[] = "52";
 80004fc:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <main+0xb0>)
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	4611      	mov	r1, r2
 8000506:	8019      	strh	r1, [r3, #0]
 8000508:	3302      	adds	r3, #2
 800050a:	0c12      	lsrs	r2, r2, #16
 800050c:	701a      	strb	r2, [r3, #0]
uint8_t text2[] = "PULSE";
 800050e:	4a1b      	ldr	r2, [pc, #108]	; (800057c <main+0xb4>)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000516:	6018      	str	r0, [r3, #0]
 8000518:	3304      	adds	r3, #4
 800051a:	8019      	strh	r1, [r3, #0]
//uint8_t text3[] = "50";
oledc_text(&oledc, text2, 20, 20, &hspi1);
 800051c:	1d39      	adds	r1, r7, #4
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <main+0xa4>)
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2314      	movs	r3, #20
 8000524:	2214      	movs	r2, #20
 8000526:	4813      	ldr	r0, [pc, #76]	; (8000574 <main+0xac>)
 8000528:	f000 fb7c 	bl	8000c24 <oledc_text>
oledc_text(&oledc, text1, 40, 40, &hspi1);
 800052c:	f107 010c 	add.w	r1, r7, #12
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <main+0xa4>)
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2328      	movs	r3, #40	; 0x28
 8000536:	2228      	movs	r2, #40	; 0x28
 8000538:	480e      	ldr	r0, [pc, #56]	; (8000574 <main+0xac>)
 800053a:	f000 fb73 	bl	8000c24 <oledc_text>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  receive();
 800053e:	f000 f957 	bl	80007f0 <receive>
	  oledc_rectangle(40, 40, 96, 70, 0xF800, &hspi1);
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <main+0xa4>)
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2346      	movs	r3, #70	; 0x46
 800054e:	2260      	movs	r2, #96	; 0x60
 8000550:	2128      	movs	r1, #40	; 0x28
 8000552:	2028      	movs	r0, #40	; 0x28
 8000554:	f000 fce7 	bl	8000f26 <oledc_rectangle>
	  oledc_text(&oledc, receive_frame, 40, 40, &hspi1);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <main+0xa4>)
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2328      	movs	r3, #40	; 0x28
 800055e:	2228      	movs	r2, #40	; 0x28
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <main+0xb8>)
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <main+0xac>)
 8000564:	f000 fb5e 	bl	8000c24 <oledc_text>
	  receive();
 8000568:	e7e9      	b.n	800053e <main+0x76>
 800056a:	bf00      	nop
 800056c:	20000038 	.word	0x20000038
 8000570:	08004ac4 	.word	0x08004ac4
 8000574:	20000128 	.word	0x20000128
 8000578:	08004ab8 	.word	0x08004ab8
 800057c:	08004abc 	.word	0x08004abc
 8000580:	20000140 	.word	0x20000140

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	; 0x58
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2244      	movs	r2, #68	; 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fa58 	bl	8004a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005aa:	f001 f9ef 	bl	800198c <HAL_PWREx_ControlVoltageScaling>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b4:	f000 f978 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005b8:	2310      	movs	r3, #16
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c4:	2360      	movs	r3, #96	; 0x60
 80005c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005cc:	2301      	movs	r3, #1
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005d4:	2310      	movs	r3, #16
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d8:	2307      	movs	r3, #7
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fa25 	bl	8001a38 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005f4:	f000 f958 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2303      	movs	r3, #3
 80005fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	2101      	movs	r1, #1
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fe25 	bl	8002260 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800061c:	f000 f944 	bl	80008a8 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3758      	adds	r7, #88	; 0x58
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_SPI1_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <MX_SPI1_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_SPI1_Init+0x74>)
 8000634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_SPI1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_SPI1_Init+0x74>)
 8000642:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000646:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_SPI1_Init+0x74>)
 800064a:	2202      	movs	r2, #2
 800064c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_SPI1_Init+0x74>)
 8000650:	2201      	movs	r2, #1
 8000652:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_SPI1_Init+0x74>)
 8000656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_SPI1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_SPI1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_SPI1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_SPI1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_SPI1_Init+0x74>)
 8000676:	2207      	movs	r2, #7
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_SPI1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_SPI1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_SPI1_Init+0x74>)
 8000688:	f002 faf6 	bl	8002c78 <HAL_SPI_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 f909 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000038 	.word	0x20000038
 80006a0:	40013000 	.word	0x40013000

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006e8:	f002 fefb 	bl	80034e2 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f8d9 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000009c 	.word	0x2000009c
 8000700:	40004400 	.word	0x40004400

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b32      	ldr	r3, [pc, #200]	; (80007e4 <MX_GPIO_Init+0xe0>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a31      	ldr	r2, [pc, #196]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a2b      	ldr	r2, [pc, #172]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <MX_GPIO_Init+0xe0>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000768:	481f      	ldr	r0, [pc, #124]	; (80007e8 <MX_GPIO_Init+0xe4>)
 800076a:	f001 f8e9 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RW_Pin|OLED_EN_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2109      	movs	r1, #9
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f001 f8e3 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2103      	movs	r1, #3
 800077e:	481b      	ldr	r0, [pc, #108]	; (80007ec <MX_GPIO_Init+0xe8>)
 8000780:	f001 f8de 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000784:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4619      	mov	r1, r3
 800079c:	4812      	ldr	r0, [pc, #72]	; (80007e8 <MX_GPIO_Init+0xe4>)
 800079e:	f000 ff65 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RW_Pin OLED_EN_Pin */
  GPIO_InitStruct.Pin = OLED_RW_Pin|OLED_EN_Pin;
 80007a2:	2309      	movs	r3, #9
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f000 ff56 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 80007c0:	2303      	movs	r3, #3
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_GPIO_Init+0xe8>)
 80007d8:	f000 ff48 	bl	800166c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000800 	.word	0x48000800
 80007ec:	48000400 	.word	0x48000400

080007f0 <receive>:

/* USER CODE BEGIN 4 */
void receive() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	while (eof_bool == false) {
 80007f4:	e009      	b.n	800080a <receive+0x1a>
		if (HAL_UART_Receive_IT (&huart2, &rec_byte, RECBUF) == HAL_ERROR) {									// read
 80007f6:	2201      	movs	r2, #1
 80007f8:	490a      	ldr	r1, [pc, #40]	; (8000824 <receive+0x34>)
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <receive+0x38>)
 80007fc:	f002 fec0 	bl	8003580 <HAL_UART_Receive_IT>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d101      	bne.n	800080a <receive+0x1a>
			Error_Handler();
 8000806:	f000 f84f 	bl	80008a8 <Error_Handler>
	while (eof_bool == false) {
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <receive+0x3c>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1ee      	bne.n	80007f6 <receive+0x6>
		}
	}
	eof_bool = false;
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <receive+0x3c>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000013c 	.word	0x2000013c
 8000828:	2000009c 	.word	0x2000009c
 800082c:	20000124 	.word	0x20000124

08000830 <HAL_UART_RxCpltCallback>:
 * @brief 	UART receiving callback function. Copies each received byte into string "receive_frame".
 * 			Upon receiving end-of-frame "MYEOF" puts string terminator.
 * @param 	huart: 	UART handle.
 * @retval	None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <HAL_UART_RxCpltCallback+0x64>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d123      	bne.n	8000888 <HAL_UART_RxCpltCallback+0x58>
		receive_frame[frame_index] = rec_byte;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_UART_RxCpltCallback+0x68>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_UART_RxCpltCallback+0x6c>)
 8000848:	7819      	ldrb	r1, [r3, #0]
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_UART_RxCpltCallback+0x70>)
 800084c:	5499      	strb	r1, [r3, r2]

		if (frame_index == FRAMELEN) {
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_UART_RxCpltCallback+0x68>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b1c      	cmp	r3, #28
 8000854:	d102      	bne.n	800085c <HAL_UART_RxCpltCallback+0x2c>
			frame_index = 0;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_UART_RxCpltCallback+0x68>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
		}
		frame_index++;
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_UART_RxCpltCallback+0x68>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_UART_RxCpltCallback+0x68>)
 8000866:	701a      	strb	r2, [r3, #0]

		if (rec_byte == MYEOF) {
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_UART_RxCpltCallback+0x6c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b0a      	cmp	r3, #10
 800086e:	d10b      	bne.n	8000888 <HAL_UART_RxCpltCallback+0x58>
			receive_frame[frame_index] = '\0';
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_UART_RxCpltCallback+0x68>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_UART_RxCpltCallback+0x70>)
 8000878:	2100      	movs	r1, #0
 800087a:	5499      	strb	r1, [r3, r2]
			frame_index = 0;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_UART_RxCpltCallback+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
			eof_bool = true;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_UART_RxCpltCallback+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	2000009c 	.word	0x2000009c
 8000898:	2000015c 	.word	0x2000015c
 800089c:	2000013c 	.word	0x2000013c
 80008a0:	20000140 	.word	0x20000140
 80008a4:	20000124 	.word	0x20000124

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <oledc_default_cfg>:
#include "oledc.h"
#include "main.h"



void oledc_default_cfg (SPI_HandleTypeDef *hspi1) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	  // Enable CS
	  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	4834      	ldr	r0, [pc, #208]	; (8000994 <oledc_default_cfg+0xe0>)
 80008c2:	f001 f83d 	bl	8001940 <HAL_GPIO_WritePin>

	  // Enable OLED via EN
	  HAL_GPIO_WritePin(OLED_EN_GPIO_Port, OLED_EN_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2108      	movs	r1, #8
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f001 f837 	bl	8001940 <HAL_GPIO_WritePin>

	  oledc_reset();
 80008d2:	f000 f867 	bl	80009a4 <oledc_reset>

	  // Unlock display and turn off
	oledc_one_arg_commands(OLEDC_COMMAND_LOCK, OLEDC_DEFAULT_OLED_LOCK, hspi1);
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	2112      	movs	r1, #18
 80008da:	20fd      	movs	r0, #253	; 0xfd
 80008dc:	f000 f884 	bl	80009e8 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_COMMAND_LOCK, OLEDC_DEFAULT_CMD_LOCK, hspi1);
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	21b1      	movs	r1, #177	; 0xb1
 80008e4:	20fd      	movs	r0, #253	; 0xfd
 80008e6:	f000 f87f 	bl	80009e8 <oledc_one_arg_commands>
	oledc_more_arg_commands(OLEDC_SLEEP_ON,  0,  0 , hspi1);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	20ae      	movs	r0, #174	; 0xae
 80008f2:	f000 f8a7 	bl	8000a44 <oledc_more_arg_commands>

	// Setup SSD1351
	oledc_one_arg_commands(OLEDC_SET_REMAP,       OLEDC_DEFAULT_REMAP        , hspi1);
 80008f6:	4b28      	ldr	r3, [pc, #160]	; (8000998 <oledc_default_cfg+0xe4>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	4619      	mov	r1, r3
 80008fe:	20a0      	movs	r0, #160	; 0xa0
 8000900:	f000 f872 	bl	80009e8 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_MUX_RATIO,       OLEDC_DEFAULT_MUX_RATIO    , hspi1);
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	215f      	movs	r1, #95	; 0x5f
 8000908:	20ca      	movs	r0, #202	; 0xca
 800090a:	f000 f86d 	bl	80009e8 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_START_LINE,  OLEDC_DEFAULT_START_LINE   , hspi1);
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	2100      	movs	r1, #0
 8000912:	20a1      	movs	r0, #161	; 0xa1
 8000914:	f000 f868 	bl	80009e8 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_OFFSET,      OLEDC_DEFAULT_OFFSET       , hspi1);
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	2120      	movs	r1, #32
 800091c:	20a2      	movs	r0, #162	; 0xa2
 800091e:	f000 f863 	bl	80009e8 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_VCOMH,           OLEDC_DEFAULT_VCOMH        , hspi1);
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	2105      	movs	r1, #5
 8000926:	20be      	movs	r0, #190	; 0xbe
 8000928:	f000 f85e 	bl	80009e8 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_CLOCK_DIV,       OLEDC_DEFAULT_DIVSET       , hspi1);
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	21f1      	movs	r1, #241	; 0xf1
 8000930:	20b3      	movs	r0, #179	; 0xb3
 8000932:	f000 f859 	bl	80009e8 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_RESET_PRECH, OLEDC_DEFAULT_PRECHARGE    , hspi1);
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	2132      	movs	r1, #50	; 0x32
 800093a:	20b1      	movs	r0, #177	; 0xb1
 800093c:	f000 f854 	bl	80009e8 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SETSEC_PRECH,    OLEDC_DEFAULT_PRECHARGE_2  , hspi1);
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	2101      	movs	r1, #1
 8000944:	20b6      	movs	r0, #182	; 0xb6
 8000946:	f000 f84f 	bl	80009e8 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_MASTER_CONTRAST, OLEDC_DEFAULT_MASTER_CONT  , hspi1);
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	21cf      	movs	r1, #207	; 0xcf
 800094e:	20c7      	movs	r0, #199	; 0xc7
 8000950:	f000 f84a 	bl	80009e8 <oledc_one_arg_commands>

	oledc_more_arg_commands(OLEDC_CONTRAST,   OLEDC_DEFAULT_CONTRAST, 3 , hspi1);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2203      	movs	r2, #3
 8000958:	4910      	ldr	r1, [pc, #64]	; (800099c <oledc_default_cfg+0xe8>)
 800095a:	20c1      	movs	r0, #193	; 0xc1
 800095c:	f000 f872 	bl	8000a44 <oledc_more_arg_commands>
	oledc_more_arg_commands(OLEDC_VSL,        OLEDC_DEFAULT_VSL,      3 , hspi1);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2203      	movs	r2, #3
 8000964:	490e      	ldr	r1, [pc, #56]	; (80009a0 <oledc_default_cfg+0xec>)
 8000966:	20b4      	movs	r0, #180	; 0xb4
 8000968:	f000 f86c 	bl	8000a44 <oledc_more_arg_commands>

	// Set normal mode and turn on display
	oledc_more_arg_commands(OLEDC_MODE_NORMAL, 0, 0 , hspi1);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	20a6      	movs	r0, #166	; 0xa6
 8000974:	f000 f866 	bl	8000a44 <oledc_more_arg_commands>
	oledc_more_arg_commands(OLEDC_SLEEP_OFF,   0, 0 , hspi1);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	20af      	movs	r0, #175	; 0xaf
 8000980:	f000 f860 	bl	8000a44 <oledc_more_arg_commands>
	oledc_fill_screen(0 , hspi1);
 8000984:	6879      	ldr	r1, [r7, #4]
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f898 	bl	8000abc <oledc_fill_screen>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	48000400 	.word	0x48000400
 8000998:	20000006 	.word	0x20000006
 800099c:	2000000c 	.word	0x2000000c
 80009a0:	20000008 	.word	0x20000008

080009a4 <oledc_reset>:

void oledc_reset() {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <oledc_reset+0x40>)
 80009b0:	f000 ffc6 	bl	8001940 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f000 fca5 	bl	8001304 <HAL_Delay>
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c0:	4808      	ldr	r0, [pc, #32]	; (80009e4 <oledc_reset+0x40>)
 80009c2:	f000 ffbd 	bl	8001940 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f000 fc9c 	bl	8001304 <HAL_Delay>
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <oledc_reset+0x40>)
 80009d4:	f000 ffb4 	bl	8001940 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80009d8:	2064      	movs	r0, #100	; 0x64
 80009da:	f000 fc93 	bl	8001304 <HAL_Delay>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	48000800 	.word	0x48000800

080009e8 <oledc_one_arg_commands>:

void oledc_one_arg_commands (uint8_t command, uint8_t args, SPI_HandleTypeDef *hspi1) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	603a      	str	r2, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	460b      	mov	r3, r1
 80009f6:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2101      	movs	r1, #1
 80009fc:	4810      	ldr	r0, [pc, #64]	; (8000a40 <oledc_one_arg_commands+0x58>)
 80009fe:	f000 ff9f 	bl	8001940 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2102      	movs	r1, #2
 8000a06:	480e      	ldr	r0, [pc, #56]	; (8000a40 <oledc_one_arg_commands+0x58>)
 8000a08:	f000 ff9a 	bl	8001940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &command, 1);
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4619      	mov	r1, r3
 8000a12:	6838      	ldr	r0, [r7, #0]
 8000a14:	f002 f9d4 	bl	8002dc0 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <oledc_one_arg_commands+0x58>)
 8000a1e:	f000 ff8f 	bl	8001940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &args, 1);
 8000a22:	1dbb      	adds	r3, r7, #6
 8000a24:	2201      	movs	r2, #1
 8000a26:	4619      	mov	r1, r3
 8000a28:	6838      	ldr	r0, [r7, #0]
 8000a2a:	f002 f9c9 	bl	8002dc0 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2101      	movs	r1, #1
 8000a32:	4803      	ldr	r0, [pc, #12]	; (8000a40 <oledc_one_arg_commands+0x58>)
 8000a34:	f000 ff84 	bl	8001940 <HAL_GPIO_WritePin>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	48000400 	.word	0x48000400

08000a44 <oledc_more_arg_commands>:

void oledc_more_arg_commands ( uint8_t command, uint8_t *args, uint16_t args_len, SPI_HandleTypeDef *hspi1) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4603      	mov	r3, r0
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	4613      	mov	r3, r2
 8000a54:	81bb      	strh	r3, [r7, #12]
    uint16_t cnt;
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4817      	ldr	r0, [pc, #92]	; (8000ab8 <oledc_more_arg_commands+0x74>)
 8000a5c:	f000 ff70 	bl	8001940 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2102      	movs	r1, #2
 8000a64:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <oledc_more_arg_commands+0x74>)
 8000a66:	f000 ff6b 	bl	8001940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &command, 1);
 8000a6a:	f107 030f 	add.w	r3, r7, #15
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4619      	mov	r1, r3
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f002 f9a4 	bl	8002dc0 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <oledc_more_arg_commands+0x74>)
 8000a7e:	f000 ff5f 	bl	8001940 <HAL_GPIO_WritePin>

    for ( cnt = 0; cnt < args_len; cnt++ )
 8000a82:	2300      	movs	r3, #0
 8000a84:	82fb      	strh	r3, [r7, #22]
 8000a86:	e00a      	b.n	8000a9e <oledc_more_arg_commands+0x5a>
    {
        HAL_SPI_Transmit_IT(hspi1, &args[cnt], 1);
 8000a88:	8afb      	ldrh	r3, [r7, #22]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f002 f994 	bl	8002dc0 <HAL_SPI_Transmit_IT>
    for ( cnt = 0; cnt < args_len; cnt++ )
 8000a98:	8afb      	ldrh	r3, [r7, #22]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	82fb      	strh	r3, [r7, #22]
 8000a9e:	8afa      	ldrh	r2, [r7, #22]
 8000aa0:	89bb      	ldrh	r3, [r7, #12]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d3f0      	bcc.n	8000a88 <oledc_more_arg_commands+0x44>
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <oledc_more_arg_commands+0x74>)
 8000aac:	f000 ff48 	bl	8001940 <HAL_GPIO_WritePin>
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	48000400 	.word	0x48000400

08000abc <oledc_fill_screen>:

void oledc_fill_screen (uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	80fb      	strh	r3, [r7, #6]
    box_area(0, 0, 96, 96, color , hspi1);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2360      	movs	r3, #96	; 0x60
 8000ad2:	2260      	movs	r2, #96	; 0x60
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f804 	bl	8000ae4 <box_area>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <box_area>:

void box_area (uint8_t start_col, uint8_t start_row, uint8_t end_col, uint8_t end_row, uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4604      	mov	r4, r0
 8000aec:	4608      	mov	r0, r1
 8000aee:	4611      	mov	r1, r2
 8000af0:	461a      	mov	r2, r3
 8000af2:	4623      	mov	r3, r4
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	4603      	mov	r3, r0
 8000af8:	71bb      	strb	r3, [r7, #6]
 8000afa:	460b      	mov	r3, r1
 8000afc:	717b      	strb	r3, [r7, #5]
 8000afe:	4613      	mov	r3, r2
 8000b00:	713b      	strb	r3, [r7, #4]
    uint8_t   cmd       = OLEDC_WRITE_RAM;
 8000b02:	235c      	movs	r3, #92	; 0x5c
 8000b04:	737b      	strb	r3, [r7, #13]
    uint16_t  cnt       = ( end_col - start_col ) * ( end_row - start_row );
 8000b06:	797a      	ldrb	r2, [r7, #5]
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	7939      	ldrb	r1, [r7, #4]
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	1acb      	subs	r3, r1, r3
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	fb12 f303 	smulbb	r3, r2, r3
 8000b1a:	81fb      	strh	r3, [r7, #14]
    uint8_t   clr[ 2 ]  = { 0 };
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	813b      	strh	r3, [r7, #8]

    if( ( start_col > OLEDC_SCREEN_WIDTH ) ||
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	2b60      	cmp	r3, #96	; 0x60
 8000b24:	d86f      	bhi.n	8000c06 <box_area+0x122>
 8000b26:	797b      	ldrb	r3, [r7, #5]
 8000b28:	2b60      	cmp	r3, #96	; 0x60
 8000b2a:	d86c      	bhi.n	8000c06 <box_area+0x122>
        ( end_col > OLEDC_SCREEN_WIDTH ) )
        return;

    if( ( start_row > OLEDC_SCREEN_HEIGHT ) ||
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	2b60      	cmp	r3, #96	; 0x60
 8000b30:	d86b      	bhi.n	8000c0a <box_area+0x126>
 8000b32:	793b      	ldrb	r3, [r7, #4]
 8000b34:	2b60      	cmp	r3, #96	; 0x60
 8000b36:	d868      	bhi.n	8000c0a <box_area+0x126>
        ( end_row > OLEDC_SCREEN_HEIGHT ) )
        return;

    if( ( end_col < start_col ) ||
 8000b38:	797a      	ldrb	r2, [r7, #5]
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d366      	bcc.n	8000c0e <box_area+0x12a>
 8000b40:	793a      	ldrb	r2, [r7, #4]
 8000b42:	79bb      	ldrb	r3, [r7, #6]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d362      	bcc.n	8000c0e <box_area+0x12a>
        ( end_row < start_row ) )
        return;

    cols[ 0 ] = OLEDC_COL_OFF + start_col;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <box_area+0x134>)
 8000b50:	701a      	strb	r2, [r3, #0]
    cols[ 1 ] = OLEDC_COL_OFF + end_col - 1;
 8000b52:	797b      	ldrb	r3, [r7, #5]
 8000b54:	330f      	adds	r3, #15
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <box_area+0x134>)
 8000b5a:	705a      	strb	r2, [r3, #1]
    rows[ 0 ] = OLEDC_ROW_OFF + start_row;
 8000b5c:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <box_area+0x138>)
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	7013      	strb	r3, [r2, #0]
    rows[ 1 ] = OLEDC_ROW_OFF + end_row - 1;
 8000b62:	793b      	ldrb	r3, [r7, #4]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <box_area+0x138>)
 8000b6a:	705a      	strb	r2, [r3, #1]
    clr[ 0 ] |= color >> 8;
 8000b6c:	7a3a      	ldrb	r2, [r7, #8]
 8000b6e:	8c3b      	ldrh	r3, [r7, #32]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	723b      	strb	r3, [r7, #8]
    clr[ 1 ] |= color & 0x00FF;
 8000b7c:	7a7b      	ldrb	r3, [r7, #9]
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	8c3b      	ldrh	r3, [r7, #32]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	727b      	strb	r3, [r7, #9]

    oledc_more_arg_commands(OLEDC_SET_COL_ADDRESS, cols, 2 , hspi1);
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	2202      	movs	r2, #2
 8000b90:	4921      	ldr	r1, [pc, #132]	; (8000c18 <box_area+0x134>)
 8000b92:	2015      	movs	r0, #21
 8000b94:	f7ff ff56 	bl	8000a44 <oledc_more_arg_commands>
    oledc_more_arg_commands(OLEDC_SET_ROW_ADDRESS, rows, 2 , hspi1);
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	491f      	ldr	r1, [pc, #124]	; (8000c1c <box_area+0x138>)
 8000b9e:	2075      	movs	r0, #117	; 0x75
 8000ba0:	f7ff ff50 	bl	8000a44 <oledc_more_arg_commands>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	481d      	ldr	r0, [pc, #116]	; (8000c20 <box_area+0x13c>)
 8000baa:	f000 fec9 	bl	8001940 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	481b      	ldr	r0, [pc, #108]	; (8000c20 <box_area+0x13c>)
 8000bb4:	f000 fec4 	bl	8001940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &cmd, 1);
 8000bb8:	f107 030d 	add.w	r3, r7, #13
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bc2:	f002 f8fd 	bl	8002dc0 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4815      	ldr	r0, [pc, #84]	; (8000c20 <box_area+0x13c>)
 8000bcc:	f000 feb8 	bl	8001940 <HAL_GPIO_WritePin>

    while( cnt-- ) {
 8000bd0:	e00e      	b.n	8000bf0 <box_area+0x10c>
        HAL_SPI_Transmit_IT(hspi1, &clr[0], 1);
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bdc:	f002 f8f0 	bl	8002dc0 <HAL_SPI_Transmit_IT>
        HAL_SPI_Transmit_IT(hspi1, &clr[1], 1);
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	3301      	adds	r3, #1
 8000be6:	2201      	movs	r2, #1
 8000be8:	4619      	mov	r1, r3
 8000bea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bec:	f002 f8e8 	bl	8002dc0 <HAL_SPI_Transmit_IT>
    while( cnt-- ) {
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	81fa      	strh	r2, [r7, #14]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1eb      	bne.n	8000bd2 <box_area+0xee>
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4808      	ldr	r0, [pc, #32]	; (8000c20 <box_area+0x13c>)
 8000c00:	f000 fe9e 	bl	8001940 <HAL_GPIO_WritePin>
 8000c04:	e004      	b.n	8000c10 <box_area+0x12c>
        return;
 8000c06:	bf00      	nop
 8000c08:	e002      	b.n	8000c10 <box_area+0x12c>
        return;
 8000c0a:	bf00      	nop
 8000c0c:	e000      	b.n	8000c10 <box_area+0x12c>
        return;
 8000c0e:	bf00      	nop
}
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000004 	.word	0x20000004
 8000c20:	48000400 	.word	0x48000400

08000c24 <oledc_text>:

void oledc_text ( oledc_t *ctx, uint8_t *text, uint16_t x, uint16_t y , SPI_HandleTypeDef *hspi1) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	460b      	mov	r3, r1
 8000c34:	80fb      	strh	r3, [r7, #6]
 8000c36:	4613      	mov	r3, r2
 8000c38:	80bb      	strh	r3, [r7, #4]
    uint8_t *ptr = text;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	617b      	str	r3, [r7, #20]
    if ( ( x >= OLEDC_SCREEN_WIDTH ) || ( y >= OLEDC_SCREEN_HEIGHT ) ) {
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	2b5f      	cmp	r3, #95	; 0x5f
 8000c42:	d818      	bhi.n	8000c76 <oledc_text+0x52>
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	2b5f      	cmp	r3, #95	; 0x5f
 8000c48:	d815      	bhi.n	8000c76 <oledc_text+0x52>
        return;
    }

    ctx->x_cord = x;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	88fa      	ldrh	r2, [r7, #6]
 8000c4e:	81da      	strh	r2, [r3, #14]
    ctx->y_cord = y;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	88ba      	ldrh	r2, [r7, #4]
 8000c54:	821a      	strh	r2, [r3, #16]

    while( *ptr ) {
 8000c56:	e009      	b.n	8000c6c <oledc_text+0x48>
        character( ctx, *ptr++ , hspi1);
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	617a      	str	r2, [r7, #20]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	6a3a      	ldr	r2, [r7, #32]
 8000c64:	4619      	mov	r1, r3
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f000 f8b6 	bl	8000dd8 <character>
    while( *ptr ) {
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f1      	bne.n	8000c58 <oledc_text+0x34>
 8000c74:	e000      	b.n	8000c78 <oledc_text+0x54>
        return;
 8000c76:	bf00      	nop
    }
}
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <oledc_set_font>:

void oledc_set_font ( oledc_t *ctx, const uint8_t *font_s, uint16_t color ) {
 8000c7e:	b480      	push	{r7}
 8000c80:	b085      	sub	sp, #20
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	80fb      	strh	r3, [r7, #6]
    ctx->font_obj               = font_s;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	601a      	str	r2, [r3, #0]
    ctx->font_first_char    = font_s[2] + (font_s[3] << 8);
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	3302      	adds	r3, #2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3303      	adds	r3, #3
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	811a      	strh	r2, [r3, #8]
    ctx->font_last_char     = font_s[4] + (font_s[5] << 8);
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3305      	adds	r3, #5
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	815a      	strh	r2, [r3, #10]
    ctx->font_height        = font_s[6];
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	3306      	adds	r3, #6
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	819a      	strh	r2, [r3, #12]
    ctx->font_color         = color;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	88fa      	ldrh	r2, [r7, #6]
 8000cda:	809a      	strh	r2, [r3, #4]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <pixel>:

void pixel ( oledc_t *ctx, uint8_t col, uint8_t row, uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	70fb      	strb	r3, [r7, #3]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	70bb      	strb	r3, [r7, #2]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	803b      	strh	r3, [r7, #0]
    uint8_t cmd       = OLEDC_WRITE_RAM;
 8000d02:	235c      	movs	r3, #92	; 0x5c
 8000d04:	73fb      	strb	r3, [r7, #15]
    uint8_t clr[ 2 ]  = { 0 };
 8000d06:	2300      	movs	r3, #0
 8000d08:	81bb      	strh	r3, [r7, #12]

    if( ( col > OLEDC_SCREEN_WIDTH ) || ( row > OLEDC_SCREEN_HEIGHT ) ) {
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	2b60      	cmp	r3, #96	; 0x60
 8000d0e:	d859      	bhi.n	8000dc4 <pixel+0xdc>
 8000d10:	78bb      	ldrb	r3, [r7, #2]
 8000d12:	2b60      	cmp	r3, #96	; 0x60
 8000d14:	d856      	bhi.n	8000dc4 <pixel+0xdc>
        return;
    }
    cols[ 0 ] = OLEDC_COL_OFF + col;
 8000d16:	78fb      	ldrb	r3, [r7, #3]
 8000d18:	3310      	adds	r3, #16
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <pixel+0xe4>)
 8000d1e:	701a      	strb	r2, [r3, #0]
    cols[ 1 ] = OLEDC_COL_OFF + col;
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	3310      	adds	r3, #16
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <pixel+0xe4>)
 8000d28:	705a      	strb	r2, [r3, #1]
    rows[ 0 ] = OLEDC_ROW_OFF + row;
 8000d2a:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <pixel+0xe8>)
 8000d2c:	78bb      	ldrb	r3, [r7, #2]
 8000d2e:	7013      	strb	r3, [r2, #0]
    rows[ 1 ] = OLEDC_ROW_OFF + row;
 8000d30:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <pixel+0xe8>)
 8000d32:	78bb      	ldrb	r3, [r7, #2]
 8000d34:	7053      	strb	r3, [r2, #1]
    clr[ 0 ] |= color >> 8;
 8000d36:	7b3a      	ldrb	r2, [r7, #12]
 8000d38:	883b      	ldrh	r3, [r7, #0]
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	733b      	strb	r3, [r7, #12]
    clr[ 1 ] |= color & 0x00FF;
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	b25a      	sxtb	r2, r3
 8000d4a:	883b      	ldrh	r3, [r7, #0]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	737b      	strb	r3, [r7, #13]

    oledc_more_arg_commands(OLEDC_SET_COL_ADDRESS, cols, 2 , hspi1);
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	491c      	ldr	r1, [pc, #112]	; (8000dcc <pixel+0xe4>)
 8000d5c:	2015      	movs	r0, #21
 8000d5e:	f7ff fe71 	bl	8000a44 <oledc_more_arg_commands>
    oledc_more_arg_commands(OLEDC_SET_ROW_ADDRESS, rows, 2 , hspi1);
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	2202      	movs	r2, #2
 8000d66:	491a      	ldr	r1, [pc, #104]	; (8000dd0 <pixel+0xe8>)
 8000d68:	2075      	movs	r0, #117	; 0x75
 8000d6a:	f7ff fe6b 	bl	8000a44 <oledc_more_arg_commands>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2101      	movs	r1, #1
 8000d72:	4818      	ldr	r0, [pc, #96]	; (8000dd4 <pixel+0xec>)
 8000d74:	f000 fde4 	bl	8001940 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <pixel+0xec>)
 8000d7e:	f000 fddf 	bl	8001940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &cmd, 1);
 8000d82:	f107 030f 	add.w	r3, r7, #15
 8000d86:	2201      	movs	r2, #1
 8000d88:	4619      	mov	r1, r3
 8000d8a:	69b8      	ldr	r0, [r7, #24]
 8000d8c:	f002 f818 	bl	8002dc0 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2102      	movs	r1, #2
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <pixel+0xec>)
 8000d96:	f000 fdd3 	bl	8001940 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &clr[0], 1);
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	69b8      	ldr	r0, [r7, #24]
 8000da4:	f002 f80c 	bl	8002dc0 <HAL_SPI_Transmit_IT>
    HAL_SPI_Transmit_IT(hspi1, &clr[1], 1);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	3301      	adds	r3, #1
 8000dae:	2201      	movs	r2, #1
 8000db0:	4619      	mov	r1, r3
 8000db2:	69b8      	ldr	r0, [r7, #24]
 8000db4:	f002 f804 	bl	8002dc0 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <pixel+0xec>)
 8000dbe:	f000 fdbf 	bl	8001940 <HAL_GPIO_WritePin>
 8000dc2:	e000      	b.n	8000dc6 <pixel+0xde>
        return;
 8000dc4:	bf00      	nop
}
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	48000400 	.word	0x48000400

08000dd8 <character>:

void character ( oledc_t *ctx, uint16_t ch , SPI_HandleTypeDef *hspi1) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	460b      	mov	r3, r1
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	817b      	strh	r3, [r7, #10]
    uint8_t     ch_width = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t     x_cnt;
    uint8_t     y_cnt;
    uint16_t    x = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t    y = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t    tmp;
    uint8_t     temp = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t     mask = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    uint32_t    offset;
    const uint8_t *ch_table;
    const uint8_t *ch_bitmap;

    if( ch < ctx->font_first_char )
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	891b      	ldrh	r3, [r3, #8]
 8000e04:	897a      	ldrh	r2, [r7, #10]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	f0c0 8087 	bcc.w	8000f1a <character+0x142>
        return;

    if( ch > ctx->font_last_char )
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	895b      	ldrh	r3, [r3, #10]
 8000e10:	897a      	ldrh	r2, [r7, #10]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	f200 8083 	bhi.w	8000f1e <character+0x146>
        return;

    offset = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    tmp = (ch - ctx->font_first_char) << 2;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	891b      	ldrh	r3, [r3, #8]
 8000e20:	897a      	ldrh	r2, [r7, #10]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	837b      	strh	r3, [r7, #26]
    ch_table = ctx->font_obj + 8 + tmp;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	8b7b      	ldrh	r3, [r7, #26]
 8000e30:	3308      	adds	r3, #8
 8000e32:	4413      	add	r3, r2
 8000e34:	617b      	str	r3, [r7, #20]
    ch_width = *ch_table;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    offset = (uint32_t)ch_table[1] + ((uint32_t)ch_table[2] << 8) + ((uint32_t)ch_table[3] << 16);
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3302      	adds	r3, #2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	441a      	add	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3303      	adds	r3, #3
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	041b      	lsls	r3, r3, #16
 8000e58:	4413      	add	r3, r2
 8000e5a:	61fb      	str	r3, [r7, #28]

    ch_bitmap = ctx->font_obj + offset;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	4413      	add	r3, r2
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24

    y = ctx->y_cord;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	8a1b      	ldrh	r3, [r3, #16]
 8000e6a:	857b      	strh	r3, [r7, #42]	; 0x2a
    for (y_cnt = 0; y_cnt < ctx->font_height; y_cnt++) {
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000e72:	e045      	b.n	8000f00 <character+0x128>
        x = ctx->x_cord;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	89db      	ldrh	r3, [r3, #14]
 8000e78:	85bb      	strh	r3, [r7, #44]	; 0x2c
        mask = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        for( x_cnt = 0; x_cnt < ch_width; x_cnt++ ) {
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e86:	e02d      	b.n	8000ee4 <character+0x10c>
            if( !mask ) {
 8000e88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d108      	bne.n	8000ea2 <character+0xca>
                temp = *ch_bitmap++;
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	627a      	str	r2, [r7, #36]	; 0x24
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                mask = 0x01;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            }
            if( temp & mask )
 8000ea2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000ea6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eaa:	4013      	ands	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00b      	beq.n	8000eca <character+0xf2>
                 pixel( ctx, x, y, ctx->font_color, hspi1);
 8000eb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000eb4:	b2d9      	uxtb	r1, r3
 8000eb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8898      	ldrh	r0, [r3, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	68f8      	ldr	r0, [r7, #12]
 8000ec6:	f7ff ff0f 	bl	8000ce8 <pixel>

            x++;
 8000eca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ecc:	3301      	adds	r3, #1
 8000ece:	85bb      	strh	r3, [r7, #44]	; 0x2c
            mask <<= 1;
 8000ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        for( x_cnt = 0; x_cnt < ch_width; x_cnt++ ) {
 8000eda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ede:	3301      	adds	r3, #1
 8000ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ee4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d3cb      	bcc.n	8000e88 <character+0xb0>
        }
        y++;
 8000ef0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	857b      	strh	r3, [r7, #42]	; 0x2a
    for (y_cnt = 0; y_cnt < ctx->font_height; y_cnt++) {
 8000ef6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000efa:	3301      	adds	r3, #1
 8000efc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000f00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	899b      	ldrh	r3, [r3, #12]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d3b2      	bcc.n	8000e74 <character+0x9c>
    }
    ctx->x_cord = x + 1;
 8000f0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f10:	3301      	adds	r3, #1
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	81da      	strh	r2, [r3, #14]
 8000f18:	e002      	b.n	8000f20 <character+0x148>
        return;
 8000f1a:	bf00      	nop
 8000f1c:	e000      	b.n	8000f20 <character+0x148>
        return;
 8000f1e:	bf00      	nop
}
 8000f20:	3730      	adds	r7, #48	; 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <oledc_rectangle>:
        tmp += 2;
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
}

void oledc_rectangle (uint8_t col_off, uint8_t row_off, uint8_t col_end, uint8_t row_end, uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000f26:	b590      	push	{r4, r7, lr}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af02      	add	r7, sp, #8
 8000f2c:	4604      	mov	r4, r0
 8000f2e:	4608      	mov	r0, r1
 8000f30:	4611      	mov	r1, r2
 8000f32:	461a      	mov	r2, r3
 8000f34:	4623      	mov	r3, r4
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71bb      	strb	r3, [r7, #6]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	717b      	strb	r3, [r7, #5]
 8000f40:	4613      	mov	r3, r2
 8000f42:	713b      	strb	r3, [r7, #4]
    box_area(col_off, row_off, col_end, row_end, color, hspi1);
 8000f44:	793c      	ldrb	r4, [r7, #4]
 8000f46:	797a      	ldrb	r2, [r7, #5]
 8000f48:	79b9      	ldrb	r1, [r7, #6]
 8000f4a:	79f8      	ldrb	r0, [r7, #7]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	8b3b      	ldrh	r3, [r7, #24]
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	4623      	mov	r3, r4
 8000f56:	f7ff fdc5 	bl	8000ae4 <box_area>
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}
	...

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6613      	str	r3, [r2, #96]	; 0x60
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_MspInit+0x44>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <HAL_SPI_MspInit+0x8c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d12f      	bne.n	800102e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_SPI_MspInit+0x90>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	; (800103c <HAL_SPI_MspInit+0x90>)
 8000fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_SPI_MspInit+0x90>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_SPI_MspInit+0x90>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_SPI_MspInit+0x90>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_SPI_MspInit+0x90>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_SDO_Pin|OLED_SDI_Pin;
 8000ffe:	2338      	movs	r3, #56	; 0x38
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800100e:	2305      	movs	r3, #5
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <HAL_SPI_MspInit+0x94>)
 800101a:	f000 fb27 	bl	800166c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2023      	movs	r0, #35	; 0x23
 8001024:	f000 fa6d 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001028:	2023      	movs	r0, #35	; 0x23
 800102a:	f000 fa86 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40013000 	.word	0x40013000
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09e      	sub	sp, #120	; 0x78
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2254      	movs	r2, #84	; 0x54
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fcef 	bl	8004a48 <memset>
  if(huart->Instance==USART2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a2c      	ldr	r2, [pc, #176]	; (8001120 <HAL_UART_MspInit+0xdc>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d150      	bne.n	8001116 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001078:	2300      	movs	r3, #0
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fb11 	bl	80026a8 <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800108c:	f7ff fc0c 	bl	80008a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_UART_MspInit+0xe0>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	4a23      	ldr	r2, [pc, #140]	; (8001124 <HAL_UART_MspInit+0xe0>)
 8001096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109a:	6593      	str	r3, [r2, #88]	; 0x58
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <HAL_UART_MspInit+0xe0>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_UART_MspInit+0xe0>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <HAL_UART_MspInit+0xe0>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_UART_MspInit+0xe0>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010c0:	2304      	movs	r3, #4
 80010c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d0:	2307      	movs	r3, #7
 80010d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f000 fac5 	bl	800166c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010f4:	2303      	movs	r3, #3
 80010f6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f000 fab3 	bl	800166c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	2026      	movs	r0, #38	; 0x26
 800110c:	f000 f9f9 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001110:	2026      	movs	r0, #38	; 0x26
 8001112:	f000 fa12 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3778      	adds	r7, #120	; 0x78
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40004400 	.word	0x40004400
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001174:	f000 f8a6 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <SPI1_IRQHandler+0x10>)
 8001182:	f001 fea9 	bl	8002ed8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000038 	.word	0x20000038

08001190 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <USART2_IRQHandler+0x10>)
 8001196:	f002 fa3f 	bl	8003618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000009c 	.word	0x2000009c

080011a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011cc:	f7ff ffea 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <LoopForever+0x6>)
  ldr r1, =_edata
 80011d2:	490d      	ldr	r1, [pc, #52]	; (8001208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <LoopForever+0xe>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e8:	4c0a      	ldr	r4, [pc, #40]	; (8001214 <LoopForever+0x16>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f003 fc2f 	bl	8004a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011fa:	f7ff f965 	bl	80004c8 <main>

080011fe <LoopForever>:

LoopForever:
    b LoopForever
 80011fe:	e7fe      	b.n	80011fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001200:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800120c:	08005af0 	.word	0x08005af0
  ldr r2, =_sbss
 8001210:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001214:	20000164 	.word	0x20000164

08001218 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_IRQHandler>

0800121a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f961 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f80e 	bl	800124c <HAL_InitTick>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	e001      	b.n	8001240 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800123c:	f7ff fe92 	bl	8000f64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001240:	79fb      	ldrb	r3, [r7, #7]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_InitTick+0x6c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d023      	beq.n	80012a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_InitTick+0x70>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_InitTick+0x6c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f96d 	bl	8001556 <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10f      	bne.n	80012a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d809      	bhi.n	800129c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f000 f937 	bl	8001502 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_InitTick+0x74>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e007      	b.n	80012ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e004      	b.n	80012ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e001      	b.n	80012ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000018 	.word	0x20000018
 80012bc:	20000010 	.word	0x20000010
 80012c0:	20000014 	.word	0x20000014

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000018 	.word	0x20000018
 80012e8:	20000160 	.word	0x20000160

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000160 	.word	0x20000160

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000018 	.word	0x20000018

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4907      	ldr	r1, [pc, #28]	; (80013e8 <__NVIC_EnableIRQ+0x38>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b8:	d301      	bcc.n	80014be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00f      	b.n	80014de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <SysTick_Config+0x40>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c6:	210f      	movs	r1, #15
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f7ff ff8e 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <SysTick_Config+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <SysTick_Config+0x40>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff29 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff3e 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff8e 	bl	8001440 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5d 	bl	80013ec <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff31 	bl	80013b0 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffa2 	bl	80014a8 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800156e:	b480      	push	{r7}
 8001570:	b085      	sub	sp, #20
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d008      	beq.n	8001598 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2204      	movs	r2, #4
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e022      	b.n	80015de <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 020e 	bic.w	r2, r2, #14
 80015a6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	f003 021c 	and.w	r2, r3, #28
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	2101      	movs	r1, #1
 80015c6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d005      	beq.n	800160e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2204      	movs	r2, #4
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e029      	b.n	8001662 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 020e 	bic.w	r2, r2, #14
 800161c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0201 	bic.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 021c 	and.w	r2, r3, #28
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	4798      	blx	r3
    }
  }
  return status;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e148      	b.n	800190e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 813a 	beq.w	8001908 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d005      	beq.n	80016ac <HAL_GPIO_Init+0x40>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d130      	bne.n	800170e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016e2:	2201      	movs	r2, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	f003 0201 	and.w	r2, r3, #1
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b03      	cmp	r3, #3
 8001718:	d017      	beq.n	800174a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d123      	bne.n	800179e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	6939      	ldr	r1, [r7, #16]
 800179a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0203 	and.w	r2, r3, #3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8094 	beq.w	8001908 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e0:	4b52      	ldr	r3, [pc, #328]	; (800192c <HAL_GPIO_Init+0x2c0>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	4a51      	ldr	r2, [pc, #324]	; (800192c <HAL_GPIO_Init+0x2c0>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6613      	str	r3, [r2, #96]	; 0x60
 80017ec:	4b4f      	ldr	r3, [pc, #316]	; (800192c <HAL_GPIO_Init+0x2c0>)
 80017ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017f8:	4a4d      	ldr	r2, [pc, #308]	; (8001930 <HAL_GPIO_Init+0x2c4>)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001822:	d00d      	beq.n	8001840 <HAL_GPIO_Init+0x1d4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a43      	ldr	r2, [pc, #268]	; (8001934 <HAL_GPIO_Init+0x2c8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d007      	beq.n	800183c <HAL_GPIO_Init+0x1d0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a42      	ldr	r2, [pc, #264]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d101      	bne.n	8001838 <HAL_GPIO_Init+0x1cc>
 8001834:	2302      	movs	r3, #2
 8001836:	e004      	b.n	8001842 <HAL_GPIO_Init+0x1d6>
 8001838:	2307      	movs	r3, #7
 800183a:	e002      	b.n	8001842 <HAL_GPIO_Init+0x1d6>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_GPIO_Init+0x1d6>
 8001840:	2300      	movs	r3, #0
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	f002 0203 	and.w	r2, r2, #3
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	4093      	lsls	r3, r2
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001852:	4937      	ldr	r1, [pc, #220]	; (8001930 <HAL_GPIO_Init+0x2c4>)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001860:	4b36      	ldr	r3, [pc, #216]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001884:	4a2d      	ldr	r2, [pc, #180]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800188a:	4b2c      	ldr	r3, [pc, #176]	; (800193c <HAL_GPIO_Init+0x2d0>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d8:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	f47f aeaf 	bne.w	800167c <HAL_GPIO_Init+0x10>
  }
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	371c      	adds	r7, #28
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	48000400 	.word	0x48000400
 8001938:	48000800 	.word	0x48000800
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800195c:	e002      	b.n	8001964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_PWREx_GetVoltageRange+0x18>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40007000 	.word	0x40007000

0800198c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800199a:	d130      	bne.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a8:	d038      	beq.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b2:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2232      	movs	r2, #50	; 0x32
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0c9b      	lsrs	r3, r3, #18
 80019cc:	3301      	adds	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d0:	e002      	b.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e4:	d102      	bne.n	80019ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f2      	bne.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f8:	d110      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e00f      	b.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0a:	d007      	beq.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a14:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	20000010 	.word	0x20000010
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f000 bc02 	b.w	8002250 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4c:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a56:	4b94      	ldr	r3, [pc, #592]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80e4 	beq.w	8001c36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4c>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	f040 808b 	bne.w	8001b92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	f040 8087 	bne.w	8001b92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a84:	4b88      	ldr	r3, [pc, #544]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_OscConfig+0x64>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e3d9      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x7e>
 8001aac:	4b7e      	ldr	r3, [pc, #504]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab4:	e005      	b.n	8001ac2 <HAL_RCC_OscConfig+0x8a>
 8001ab6:	4b7c      	ldr	r3, [pc, #496]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d223      	bcs.n	8001b0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fd8c 	bl	80025e8 <RCC_SetFlashLatencyFromMSIRange>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e3ba      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ada:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a72      	ldr	r2, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	496d      	ldr	r1, [pc, #436]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af8:	4b6b      	ldr	r3, [pc, #428]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	4968      	ldr	r1, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
 8001b0c:	e025      	b.n	8001b5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0e:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a65      	ldr	r2, [pc, #404]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4960      	ldr	r1, [pc, #384]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	495b      	ldr	r1, [pc, #364]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fd4c 	bl	80025e8 <RCC_SetFlashLatencyFromMSIRange>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e37a      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b5a:	f000 fc81 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b51      	ldr	r3, [pc, #324]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	4950      	ldr	r1, [pc, #320]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001b6c:	5ccb      	ldrb	r3, [r1, r3]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	4a4e      	ldr	r2, [pc, #312]	; (8001cb0 <HAL_RCC_OscConfig+0x278>)
 8001b78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fb64 	bl	800124c <HAL_InitTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d052      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	e35e      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d032      	beq.n	8001c00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fba1 	bl	80012ec <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bae:	f7ff fb9d 	bl	80012ec <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e347      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bcc:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a35      	ldr	r2, [pc, #212]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4930      	ldr	r1, [pc, #192]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	492b      	ldr	r1, [pc, #172]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
 8001bfe:	e01a      	b.n	8001c36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c00:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fb6e 	bl	80012ec <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c14:	f7ff fb6a 	bl	80012ec <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e314      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1dc>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d073      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_OscConfig+0x21c>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d10e      	bne.n	8001c6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d10b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d063      	beq.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d15f      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e2f1      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c74:	d106      	bne.n	8001c84 <HAL_RCC_OscConfig+0x24c>
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e025      	b.n	8001cd0 <HAL_RCC_OscConfig+0x298>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8c:	d114      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x280>
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a02      	ldr	r2, [pc, #8]	; (8001ca8 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e013      	b.n	8001cd0 <HAL_RCC_OscConfig+0x298>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08005a98 	.word	0x08005a98
 8001cb0:	20000010 	.word	0x20000010
 8001cb4:	20000014 	.word	0x20000014
 8001cb8:	4ba0      	ldr	r3, [pc, #640]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a9f      	ldr	r2, [pc, #636]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b9d      	ldr	r3, [pc, #628]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a9c      	ldr	r2, [pc, #624]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fb08 	bl	80012ec <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fb04 	bl	80012ec <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e2ae      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf2:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2a8>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff faf4 	bl	80012ec <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff faf0 	bl	80012ec <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e29a      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1a:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2d0>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d060      	beq.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x310>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	d119      	bne.n	8001d76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d116      	bne.n	8001d76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d48:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_OscConfig+0x328>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e277      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	4973      	ldr	r1, [pc, #460]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d74:	e040      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d023      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7e:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6e      	ldr	r2, [pc, #440]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8a:	f7ff faaf 	bl	80012ec <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d92:	f7ff faab 	bl	80012ec <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e255      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da4:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	495f      	ldr	r1, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
 8001dc4:	e018      	b.n	8001df8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc6:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a5c      	ldr	r2, [pc, #368]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fa8b 	bl	80012ec <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff fa87 	bl	80012ec <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e231      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d03c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e12:	4a4a      	ldr	r2, [pc, #296]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fa66 	bl	80012ec <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fa62 	bl	80012ec <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e20c      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ef      	beq.n	8001e24 <HAL_RCC_OscConfig+0x3ec>
 8001e44:	e01b      	b.n	8001e7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4c:	4a3b      	ldr	r2, [pc, #236]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7ff fa49 	bl	80012ec <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fa45 	bl	80012ec <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e1ef      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ef      	bne.n	8001e5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80a6 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_RCC_OscConfig+0x508>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d118      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_RCC_OscConfig+0x508>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_RCC_OscConfig+0x508>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fa0c 	bl	80012ec <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed8:	f7ff fa08 	bl	80012ec <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1b2      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_RCC_OscConfig+0x508>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d108      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4d8>
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0e:	e029      	b.n	8001f64 <HAL_RCC_OscConfig+0x52c>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d115      	bne.n	8001f44 <HAL_RCC_OscConfig+0x50c>
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <HAL_RCC_OscConfig+0x504>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x52c>
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	4b9a      	ldr	r3, [pc, #616]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4a:	4a99      	ldr	r2, [pc, #612]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f54:	4b96      	ldr	r3, [pc, #600]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	4a95      	ldr	r2, [pc, #596]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d016      	beq.n	8001f9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7ff f9be 	bl	80012ec <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7ff f9ba 	bl	80012ec <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e162      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8a:	4b89      	ldr	r3, [pc, #548]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ed      	beq.n	8001f74 <HAL_RCC_OscConfig+0x53c>
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f9a7 	bl	80012ec <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7ff f9a3 	bl	80012ec <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e14b      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb8:	4b7d      	ldr	r3, [pc, #500]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1ed      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc6:	7ffb      	ldrb	r3, [r7, #31]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fcc:	4b78      	ldr	r3, [pc, #480]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4a77      	ldr	r2, [pc, #476]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8001fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d03c      	beq.n	800205e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01c      	beq.n	8002026 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fec:	4b70      	ldr	r3, [pc, #448]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8001fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff2:	4a6f      	ldr	r2, [pc, #444]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f976 	bl	80012ec <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002004:	f7ff f972 	bl	80012ec <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e11c      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002016:	4b66      	ldr	r3, [pc, #408]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8002018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ef      	beq.n	8002004 <HAL_RCC_OscConfig+0x5cc>
 8002024:	e01b      	b.n	800205e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002026:	4b62      	ldr	r3, [pc, #392]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8002028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202c:	4a60      	ldr	r2, [pc, #384]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7ff f959 	bl	80012ec <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800203e:	f7ff f955 	bl	80012ec <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0ff      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002050:	4b57      	ldr	r3, [pc, #348]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8002052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ef      	bne.n	800203e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80f3 	beq.w	800224e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	2b02      	cmp	r3, #2
 800206e:	f040 80c9 	bne.w	8002204 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002072:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0203 	and.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	429a      	cmp	r2, r3
 8002084:	d12c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	3b01      	subs	r3, #1
 8002092:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d123      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d11b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d113      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	3b01      	subs	r3, #1
 80020c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d109      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	3b01      	subs	r3, #1
 80020da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d06b      	beq.n	80021b8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d062      	beq.n	80021ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0ac      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020f6:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2d      	ldr	r2, [pc, #180]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 80020fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002100:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002102:	f7ff f8f3 	bl	80012ec <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7ff f8ef 	bl	80012ec <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e099      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCC_OscConfig+0x77c>)
 800212e:	4013      	ands	r3, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002138:	3a01      	subs	r2, #1
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	4311      	orrs	r1, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002142:	0212      	lsls	r2, r2, #8
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800214a:	0852      	lsrs	r2, r2, #1
 800214c:	3a01      	subs	r2, #1
 800214e:	0552      	lsls	r2, r2, #21
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002156:	0852      	lsrs	r2, r2, #1
 8002158:	3a01      	subs	r2, #1
 800215a:	0652      	lsls	r2, r2, #25
 800215c:	4311      	orrs	r1, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002162:	06d2      	lsls	r2, r2, #27
 8002164:	430a      	orrs	r2, r1
 8002166:	4912      	ldr	r1, [pc, #72]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8002168:	4313      	orrs	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800216c:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002176:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 800217e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002182:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002184:	f7ff f8b2 	bl	80012ec <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff f8ae 	bl	80012ec <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e058      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021aa:	e050      	b.n	800224e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e04f      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
 80021b0:	40021000 	.word	0x40021000
 80021b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d144      	bne.n	800224e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a23      	ldr	r2, [pc, #140]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a20      	ldr	r2, [pc, #128]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 80021d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021dc:	f7ff f886 	bl	80012ec <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff f882 	bl	80012ec <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e02c      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x7ac>
 8002202:	e024      	b.n	800224e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d01f      	beq.n	800224a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 8002210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002216:	f7ff f869 	bl	80012ec <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7ff f865 	bl	80012ec <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e00f      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	4905      	ldr	r1, [pc, #20]	; (8002258 <HAL_RCC_OscConfig+0x820>)
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_RCC_OscConfig+0x824>)
 8002244:	4013      	ands	r3, r2
 8002246:	60cb      	str	r3, [r1, #12]
 8002248:	e001      	b.n	800224e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	feeefffc 	.word	0xfeeefffc

08002260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0e7      	b.n	8002444 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002274:	4b75      	ldr	r3, [pc, #468]	; (800244c <HAL_RCC_ClockConfig+0x1ec>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d910      	bls.n	80022a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b72      	ldr	r3, [pc, #456]	; (800244c <HAL_RCC_ClockConfig+0x1ec>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 0207 	bic.w	r2, r3, #7
 800228a:	4970      	ldr	r1, [pc, #448]	; (800244c <HAL_RCC_ClockConfig+0x1ec>)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b6e      	ldr	r3, [pc, #440]	; (800244c <HAL_RCC_ClockConfig+0x1ec>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0cf      	b.n	8002444 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d010      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	4b66      	ldr	r3, [pc, #408]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022bc:	429a      	cmp	r2, r3
 80022be:	d908      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4960      	ldr	r1, [pc, #384]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d04c      	beq.n	8002378 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e6:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d121      	bne.n	8002336 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0a6      	b.n	8002444 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fe:	4b54      	ldr	r3, [pc, #336]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e09a      	b.n	8002444 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002316:	4b4e      	ldr	r3, [pc, #312]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e08e      	b.n	8002444 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002326:	4b4a      	ldr	r3, [pc, #296]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e086      	b.n	8002444 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b46      	ldr	r3, [pc, #280]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4943      	ldr	r1, [pc, #268]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002344:	4313      	orrs	r3, r2
 8002346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002348:	f7fe ffd0 	bl	80012ec <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7fe ffcc 	bl	80012ec <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e06e      	b.n	8002444 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d010      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002390:	429a      	cmp	r2, r3
 8002392:	d208      	bcs.n	80023a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002394:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	492b      	ldr	r1, [pc, #172]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_RCC_ClockConfig+0x1ec>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d210      	bcs.n	80023d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <HAL_RCC_ClockConfig+0x1ec>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 0207 	bic.w	r2, r3, #7
 80023bc:	4923      	ldr	r1, [pc, #140]	; (800244c <HAL_RCC_ClockConfig+0x1ec>)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_RCC_ClockConfig+0x1ec>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d001      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e036      	b.n	8002444 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	4918      	ldr	r1, [pc, #96]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d009      	beq.n	8002414 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4910      	ldr	r1, [pc, #64]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002414:	f000 f824 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	490b      	ldr	r1, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x1f4>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 8002432:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_ClockConfig+0x1fc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe ff07 	bl	800124c <HAL_InitTick>
 800243e:	4603      	mov	r3, r0
 8002440:	72fb      	strb	r3, [r7, #11]

  return status;
 8002442:	7afb      	ldrb	r3, [r7, #11]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
 8002454:	08005a98 	.word	0x08005a98
 8002458:	20000010 	.word	0x20000010
 800245c:	20000014 	.word	0x20000014

08002460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246e:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002478:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x34>
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d121      	bne.n	80024d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d11e      	bne.n	80024d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002494:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024a0:	4b31      	ldr	r3, [pc, #196]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e005      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024b0:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024bc:	4a2b      	ldr	r2, [pc, #172]	; (800256c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d102      	bne.n	80024de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <HAL_RCC_GetSysClockFreq+0x110>)
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	e004      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e4:	4b23      	ldr	r3, [pc, #140]	; (8002574 <HAL_RCC_GetSysClockFreq+0x114>)
 80024e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d134      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0xa6>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d003      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0xac>
 8002504:	e005      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_RCC_GetSysClockFreq+0x110>)
 8002508:	617b      	str	r3, [r7, #20]
      break;
 800250a:	e005      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_RCC_GetSysClockFreq+0x114>)
 800250e:	617b      	str	r3, [r7, #20]
      break;
 8002510:	e002      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	617b      	str	r3, [r7, #20]
      break;
 8002516:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	3301      	adds	r3, #1
 8002524:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	fb03 f202 	mul.w	r2, r3, r2
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_RCC_GetSysClockFreq+0x108>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	0e5b      	lsrs	r3, r3, #25
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	3301      	adds	r3, #1
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002558:	69bb      	ldr	r3, [r7, #24]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	08005ab0 	.word	0x08005ab0
 8002570:	00f42400 	.word	0x00f42400
 8002574:	007a1200 	.word	0x007a1200

08002578 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_RCC_GetHCLKFreq+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000010 	.word	0x20000010

08002590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002594:	f7ff fff0 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4904      	ldr	r1, [pc, #16]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08005aa8 	.word	0x08005aa8

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025c0:	f7ff ffda 	bl	8002578 <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0adb      	lsrs	r3, r3, #11
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4904      	ldr	r1, [pc, #16]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08005aa8 	.word	0x08005aa8

080025e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025f4:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002600:	f7ff f9b6 	bl	8001970 <HAL_PWREx_GetVoltageRange>
 8002604:	6178      	str	r0, [r7, #20]
 8002606:	e014      	b.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	4a24      	ldr	r2, [pc, #144]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	6593      	str	r3, [r2, #88]	; 0x58
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002620:	f7ff f9a6 	bl	8001970 <HAL_PWREx_GetVoltageRange>
 8002624:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002630:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002638:	d10b      	bne.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b80      	cmp	r3, #128	; 0x80
 800263e:	d919      	bls.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2ba0      	cmp	r3, #160	; 0xa0
 8002644:	d902      	bls.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002646:	2302      	movs	r3, #2
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	e013      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800264c:	2301      	movs	r3, #1
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	e010      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b80      	cmp	r3, #128	; 0x80
 8002656:	d902      	bls.n	800265e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002658:	2303      	movs	r3, #3
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	e00a      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d102      	bne.n	800266a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002664:	2302      	movs	r3, #2
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	e004      	b.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b70      	cmp	r3, #112	; 0x70
 800266e:	d101      	bne.n	8002674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002670:	2301      	movs	r3, #1
 8002672:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 0207 	bic.w	r2, r3, #7
 800267c:	4909      	ldr	r1, [pc, #36]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40022000 	.word	0x40022000

080026a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b0:	2300      	movs	r3, #0
 80026b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b4:	2300      	movs	r3, #0
 80026b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d031      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026cc:	d01a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80026ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026d2:	d814      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026dc:	d10f      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4a5c      	ldr	r2, [pc, #368]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ea:	e00c      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3304      	adds	r3, #4
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f9ce 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 80026f8:	4603      	mov	r3, r0
 80026fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026fc:	e003      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	74fb      	strb	r3, [r7, #19]
      break;
 8002702:	e000      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800270c:	4b51      	ldr	r3, [pc, #324]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	494e      	ldr	r1, [pc, #312]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002722:	e001      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 809e 	beq.w	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800273a:	4b46      	ldr	r3, [pc, #280]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b40      	ldr	r3, [pc, #256]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	4a3f      	ldr	r2, [pc, #252]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275a:	6593      	str	r3, [r2, #88]	; 0x58
 800275c:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002768:	2301      	movs	r3, #1
 800276a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a39      	ldr	r2, [pc, #228]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002776:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002778:	f7fe fdb8 	bl	80012ec <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800277e:	e009      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7fe fdb4 	bl	80012ec <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d902      	bls.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	74fb      	strb	r3, [r7, #19]
        break;
 8002792:	e005      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ef      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d15a      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01e      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d019      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ee:	4a19      	ldr	r2, [pc, #100]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d016      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fd74 	bl	80012ec <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002806:	e00b      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fd70 	bl	80012ec <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d902      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	74fb      	strb	r3, [r7, #19]
            break;
 800281e:	e006      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ec      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10b      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	4904      	ldr	r1, [pc, #16]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800284a:	e009      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	74bb      	strb	r3, [r7, #18]
 8002850:	e006      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002860:	7c7b      	ldrb	r3, [r7, #17]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d105      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002866:	4b8a      	ldr	r3, [pc, #552]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	4a89      	ldr	r2, [pc, #548]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800286c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002870:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287e:	4b84      	ldr	r3, [pc, #528]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f023 0203 	bic.w	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4980      	ldr	r1, [pc, #512]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028a0:	4b7b      	ldr	r3, [pc, #492]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f023 020c 	bic.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	4978      	ldr	r1, [pc, #480]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028c2:	4b73      	ldr	r3, [pc, #460]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	496f      	ldr	r1, [pc, #444]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	4967      	ldr	r1, [pc, #412]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002906:	4b62      	ldr	r3, [pc, #392]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	495e      	ldr	r1, [pc, #376]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	4956      	ldr	r1, [pc, #344]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800294a:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	494d      	ldr	r1, [pc, #308]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d028      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800296c:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4945      	ldr	r1, [pc, #276]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298a:	d106      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a3f      	ldr	r2, [pc, #252]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
 8002998:	e011      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029a2:	d10c      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	2101      	movs	r1, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f872 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d028      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	492d      	ldr	r1, [pc, #180]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029e8:	d106      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ea:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4a28      	ldr	r2, [pc, #160]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f4:	60d3      	str	r3, [r2, #12]
 80029f6:	e011      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2101      	movs	r1, #1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f843 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01c      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	4916      	ldr	r1, [pc, #88]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f820 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	4904      	ldr	r1, [pc, #16]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a84:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000

08002a94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aa2:	4b74      	ldr	r3, [pc, #464]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d018      	beq.n	8002ae0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aae:	4b71      	ldr	r3, [pc, #452]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0203 	and.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d10d      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ac6:	4b6b      	ldr	r3, [pc, #428]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d047      	beq.n	8002b6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e044      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d018      	beq.n	8002b1a <RCCEx_PLLSAI1_Config+0x86>
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d825      	bhi.n	8002b38 <RCCEx_PLLSAI1_Config+0xa4>
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d002      	beq.n	8002af6 <RCCEx_PLLSAI1_Config+0x62>
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d009      	beq.n	8002b08 <RCCEx_PLLSAI1_Config+0x74>
 8002af4:	e020      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11d      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b06:	e01a      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b08:	4b5a      	ldr	r3, [pc, #360]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d116      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b18:	e013      	b.n	8002b42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b26:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b36:	e006      	b.n	8002b46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e004      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e002      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10d      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b4e:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	430b      	orrs	r3, r1
 8002b64:	4943      	ldr	r1, [pc, #268]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d17c      	bne.n	8002c6a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b70:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a3f      	ldr	r2, [pc, #252]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b7c:	f7fe fbb6 	bl	80012ec <HAL_GetTick>
 8002b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b82:	e009      	b.n	8002b98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b84:	f7fe fbb2 	bl	80012ec <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d902      	bls.n	8002b98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	73fb      	strb	r3, [r7, #15]
        break;
 8002b96:	e005      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ef      	bne.n	8002b84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d15f      	bne.n	8002c6a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d110      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb0:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6892      	ldr	r2, [r2, #8]
 8002bc0:	0211      	lsls	r1, r2, #8
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	06d2      	lsls	r2, r2, #27
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	492a      	ldr	r1, [pc, #168]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	610b      	str	r3, [r1, #16]
 8002bd0:	e027      	b.n	8002c22 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d112      	bne.n	8002bfe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd8:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002be0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	0211      	lsls	r1, r2, #8
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6912      	ldr	r2, [r2, #16]
 8002bee:	0852      	lsrs	r2, r2, #1
 8002bf0:	3a01      	subs	r2, #1
 8002bf2:	0552      	lsls	r2, r2, #21
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	491f      	ldr	r1, [pc, #124]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	610b      	str	r3, [r1, #16]
 8002bfc:	e011      	b.n	8002c22 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6892      	ldr	r2, [r2, #8]
 8002c0e:	0211      	lsls	r1, r2, #8
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6952      	ldr	r2, [r2, #20]
 8002c14:	0852      	lsrs	r2, r2, #1
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0652      	lsls	r2, r2, #25
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	4915      	ldr	r1, [pc, #84]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fb5d 	bl	80012ec <HAL_GetTick>
 8002c32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c34:	e009      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c36:	f7fe fb59 	bl	80012ec <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d902      	bls.n	8002c4a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	73fb      	strb	r3, [r7, #15]
          break;
 8002c48:	e005      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ef      	beq.n	8002c36 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000

08002c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e095      	b.n	8002db6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c9a:	d009      	beq.n	8002cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
 8002ca2:	e005      	b.n	8002cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe f96e 	bl	8000fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cf0:	d902      	bls.n	8002cf8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	e002      	b.n	8002cfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d06:	d007      	beq.n	8002d18 <HAL_SPI_Init+0xa0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d10:	d002      	beq.n	8002d18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	ea42 0103 	orr.w	r1, r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	f003 0204 	and.w	r2, r3, #4
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d94:	ea42 0103 	orr.w	r1, r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_SPI_Transmit_IT+0x1e>
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002de2:	e06d      	b.n	8002ec0 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
 8002df2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002df4:	e064      	b.n	8002ec0 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_SPI_Transmit_IT+0x44>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e05e      	b.n	8002ec2 <HAL_SPI_Transmit_IT+0x102>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2203      	movs	r2, #3
 8002e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	88fa      	ldrh	r2, [r7, #6]
 8002e24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	88fa      	ldrh	r2, [r7, #6]
 8002e2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e50:	d903      	bls.n	8002e5a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a1e      	ldr	r2, [pc, #120]	; (8002ed0 <HAL_SPI_Transmit_IT+0x110>)
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50
 8002e58:	e002      	b.n	8002e60 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_SPI_Transmit_IT+0x114>)
 8002e5e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e68:	d10f      	bne.n	8002e8a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d007      	beq.n	8002ea8 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002ebe:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	08003159 	.word	0x08003159
 8002ed4:	08003113 	.word	0x08003113

08002ed8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10e      	bne.n	8002f18 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
    return;
 8002f16:	e0ce      	b.n	80030b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_SPI_IRQHandler+0x5e>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
    return;
 8002f34:	e0bf      	b.n	80030b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <HAL_SPI_IRQHandler+0x7e>
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80b0 	beq.w	80030b6 <HAL_SPI_IRQHandler+0x1de>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80aa 	beq.w	80030b6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d023      	beq.n	8002fb4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d011      	beq.n	8002f9c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7c:	f043 0204 	orr.w	r2, r3, #4
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]
        return;
 8002fb2:	e080      	b.n	80030b6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d014      	beq.n	8002fe8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc2:	f043 0201 	orr.w	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff6:	f043 0208 	orr.w	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003010:	2b00      	cmp	r3, #0
 8003012:	d04f      	beq.n	80030b4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003022:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_SPI_IRQHandler+0x168>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d034      	beq.n	80030aa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0203 	bic.w	r2, r2, #3
 800304e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	2b00      	cmp	r3, #0
 8003056:	d011      	beq.n	800307c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	4a17      	ldr	r2, [pc, #92]	; (80030bc <HAL_SPI_IRQHandler+0x1e4>)
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fac0 	bl	80015ea <HAL_DMA_Abort_IT>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	2b00      	cmp	r3, #0
 8003082:	d016      	beq.n	80030b2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	4a0c      	ldr	r2, [pc, #48]	; (80030bc <HAL_SPI_IRQHandler+0x1e4>)
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe faaa 	bl	80015ea <HAL_DMA_Abort_IT>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80030a8:	e003      	b.n	80030b2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f812 	bl	80030d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80030b0:	e000      	b.n	80030b4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80030b2:	bf00      	nop
    return;
 80030b4:	bf00      	nop
  }
}
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	080030e9 	.word	0x080030e9

080030c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff ffe5 	bl	80030d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	7812      	ldrb	r2, [r2, #0]
 8003126:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f98a 	bl	8003464 <SPI_CloseTx_ISR>
  }
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	881a      	ldrh	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	1c9a      	adds	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f968 	bl	8003464 <SPI_CloseTx_ISR>
  }
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031ac:	f7fe f89e 	bl	80012ec <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031bc:	f7fe f896 	bl	80012ec <HAL_GetTick>
 80031c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031c2:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	015b      	lsls	r3, r3, #5
 80031c8:	0d1b      	lsrs	r3, r3, #20
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031d2:	e054      	b.n	800327e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d050      	beq.n	800327e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031dc:	f7fe f886 	bl	80012ec <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d902      	bls.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d13d      	bne.n	800326e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003200:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800320a:	d111      	bne.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x94>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003214:	d004      	beq.n	8003220 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321e:	d107      	bne.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003238:	d10f      	bne.n	800325a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003258:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e017      	b.n	800329e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3b01      	subs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	429a      	cmp	r2, r3
 800329a:	d19b      	bne.n	80031d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000010 	.word	0x20000010

080032ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032be:	f7fe f815 	bl	80012ec <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032ce:	f7fe f80d 	bl	80012ec <HAL_GetTick>
 80032d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032dc:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	00da      	lsls	r2, r3, #3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	0d1b      	lsrs	r3, r3, #20
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032f4:	e060      	b.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032fc:	d107      	bne.n	800330e <SPI_WaitFifoStateUntilTimeout+0x62>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800330c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d050      	beq.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003316:	f7fd ffe9 	bl	80012ec <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	429a      	cmp	r2, r3
 8003324:	d902      	bls.n	800332c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d13d      	bne.n	80033a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800333a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003344:	d111      	bne.n	800336a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334e:	d004      	beq.n	800335a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003358:	d107      	bne.n	800336a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003368:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003372:	d10f      	bne.n	8003394 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003392:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e010      	b.n	80033ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d196      	bne.n	80032f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3728      	adds	r7, #40	; 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000010 	.word	0x20000010

080033d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7ff ff5b 	bl	80032ac <SPI_WaitFifoStateUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e027      	b.n	800345c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2200      	movs	r2, #0
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff fec0 	bl	800319c <SPI_WaitFlagStateUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	f043 0220 	orr.w	r2, r3, #32
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e014      	b.n	800345c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2200      	movs	r2, #0
 800343a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7ff ff34 	bl	80032ac <SPI_WaitFifoStateUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344e:	f043 0220 	orr.w	r2, r3, #32
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e000      	b.n	800345c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800346c:	f7fd ff3e 	bl	80012ec <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003480:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	2164      	movs	r1, #100	; 0x64
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ffa6 	bl	80033d8 <SPI_EndRxTxTransaction>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff fe01 	bl	80030d4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80034d2:	e002      	b.n	80034da <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff fdf3 	bl	80030c0 <HAL_SPI_TxCpltCallback>
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e040      	b.n	8003576 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fd fd9d 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2224      	movs	r2, #36	; 0x24
 800350e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fdab 	bl	8004084 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fb7c 	bl	8003c2c <UART_SetConfig>
 8003534:	4603      	mov	r3, r0
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e01b      	b.n	8003576 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800354c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800355c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fe2a 	bl	80041c8 <UART_CheckIdleState>
 8003574:	4603      	mov	r3, r0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003594:	2b20      	cmp	r3, #32
 8003596:	d137      	bne.n	8003608 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_UART_Receive_IT+0x24>
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e030      	b.n	800360a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a18      	ldr	r2, [pc, #96]	; (8003614 <HAL_UART_Receive_IT+0x94>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d01f      	beq.n	80035f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	613b      	str	r3, [r7, #16]
   return(result);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	623b      	str	r3, [r7, #32]
 80035e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	69f9      	ldr	r1, [r7, #28]
 80035ea:	6a3a      	ldr	r2, [r7, #32]
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e6      	bne.n	80035c6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	461a      	mov	r2, r3
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fef2 	bl	80043e8 <UART_Start_Receive_IT>
 8003604:	4603      	mov	r3, r0
 8003606:	e000      	b.n	800360a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40008000 	.word	0x40008000

08003618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b0ba      	sub	sp, #232	; 0xe8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800363e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003642:	f640 030f 	movw	r3, #2063	; 0x80f
 8003646:	4013      	ands	r3, r2
 8003648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800364c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d115      	bne.n	8003680 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00f      	beq.n	8003680 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 82ae 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
      }
      return;
 800367e:	e2a8      	b.n	8003bd2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8117 	beq.w	80038b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800368a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003696:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800369a:	4b85      	ldr	r3, [pc, #532]	; (80038b0 <HAL_UART_IRQHandler+0x298>)
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 810a 	beq.w	80038b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d011      	beq.n	80036d4 <HAL_UART_IRQHandler+0xbc>
 80036b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d011      	beq.n	8003704 <HAL_UART_IRQHandler+0xec>
 80036e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2202      	movs	r2, #2
 80036f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fa:	f043 0204 	orr.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d011      	beq.n	8003734 <HAL_UART_IRQHandler+0x11c>
 8003710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2204      	movs	r2, #4
 8003722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d017      	beq.n	8003770 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d105      	bne.n	8003758 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800374c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003750:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00b      	beq.n	8003770 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2208      	movs	r2, #8
 800375e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003766:	f043 0208 	orr.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <HAL_UART_IRQHandler+0x18a>
 800377c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00c      	beq.n	80037a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8214 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b40      	cmp	r3, #64	; 0x40
 80037ec:	d005      	beq.n	80037fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d04f      	beq.n	800389a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 feba 	bl	8004574 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d141      	bne.n	8003892 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3308      	adds	r3, #8
 8003814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3308      	adds	r3, #8
 8003836:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800383a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800383e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003846:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1d9      	bne.n	800380e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385e:	2b00      	cmp	r3, #0
 8003860:	d013      	beq.n	800388a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003866:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <HAL_UART_IRQHandler+0x29c>)
 8003868:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd febb 	bl	80015ea <HAL_DMA_Abort_IT>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d017      	beq.n	80038aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003884:	4610      	mov	r0, r2
 8003886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	e00f      	b.n	80038aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f9b8 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	e00b      	b.n	80038aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f9b4 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	e007      	b.n	80038aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f9b0 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80038a8:	e195      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038aa:	bf00      	nop
    return;
 80038ac:	e193      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5be>
 80038ae:	bf00      	nop
 80038b0:	04000120 	.word	0x04000120
 80038b4:	0800463d 	.word	0x0800463d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038bc:	2b01      	cmp	r3, #1
 80038be:	f040 814e 	bne.w	8003b5e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8147 	beq.w	8003b5e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8140 	beq.w	8003b5e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2210      	movs	r2, #16
 80038e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	f040 80b8 	bne.w	8003a66 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003902:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8167 	beq.w	8003bda <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003916:	429a      	cmp	r2, r3
 8003918:	f080 815f 	bcs.w	8003bda <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003922:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	f040 8086 	bne.w	8003a44 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800394c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003966:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800396e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800397a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1da      	bne.n	8003938 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3308      	adds	r3, #8
 8003988:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3308      	adds	r3, #8
 80039a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e1      	bne.n	8003982 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3308      	adds	r3, #8
 80039c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3308      	adds	r3, #8
 80039de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e3      	bne.n	80039be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a14:	f023 0310 	bic.w	r3, r3, #16
 8003a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a26:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e4      	bne.n	8003a04 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fd95 	bl	800156e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8d8 	bl	8003c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a64:	e0b9      	b.n	8003bda <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80ab 	beq.w	8003bde <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80a6 	beq.w	8003bde <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e4      	bne.n	8003a92 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3308      	adds	r3, #8
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aec:	633a      	str	r2, [r7, #48]	; 0x30
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e3      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f023 0310 	bic.w	r3, r3, #16
 8003b28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	69b9      	ldr	r1, [r7, #24]
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	617b      	str	r3, [r7, #20]
   return(result);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e4      	bne.n	8003b14 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f85c 	bl	8003c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b5c:	e03f      	b.n	8003bde <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00e      	beq.n	8003b88 <HAL_UART_IRQHandler+0x570>
 8003b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 ff57 	bl	8004a34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b86:	e02d      	b.n	8003be4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00e      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01c      	beq.n	8003be2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
    }
    return;
 8003bb0:	e017      	b.n	8003be2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d012      	beq.n	8003be4 <HAL_UART_IRQHandler+0x5cc>
 8003bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00c      	beq.n	8003be4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fd4c 	bl	8004668 <UART_EndTransmit_IT>
    return;
 8003bd0:	e008      	b.n	8003be4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003bd2:	bf00      	nop
 8003bd4:	e006      	b.n	8003be4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003bd6:	bf00      	nop
 8003bd8:	e004      	b.n	8003be4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003be2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003be4:	37e8      	adds	r7, #232	; 0xe8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop

08003bec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c30:	b08a      	sub	sp, #40	; 0x28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4bb4      	ldr	r3, [pc, #720]	; (8003f2c <UART_SetConfig+0x300>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4aa9      	ldr	r2, [pc, #676]	; (8003f30 <UART_SetConfig+0x304>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	4313      	orrs	r3, r2
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4aa0      	ldr	r2, [pc, #640]	; (8003f34 <UART_SetConfig+0x308>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d126      	bne.n	8003d04 <UART_SetConfig+0xd8>
 8003cb6:	4ba0      	ldr	r3, [pc, #640]	; (8003f38 <UART_SetConfig+0x30c>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d81b      	bhi.n	8003cfc <UART_SetConfig+0xd0>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <UART_SetConfig+0xa0>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003cf5 	.word	0x08003cf5
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce2:	e080      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cea:	e07c      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003cec:	2304      	movs	r3, #4
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf2:	e078      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfa:	e074      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d02:	e070      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a8c      	ldr	r2, [pc, #560]	; (8003f3c <UART_SetConfig+0x310>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d138      	bne.n	8003d80 <UART_SetConfig+0x154>
 8003d0e:	4b8a      	ldr	r3, [pc, #552]	; (8003f38 <UART_SetConfig+0x30c>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b0c      	cmp	r3, #12
 8003d1a:	d82d      	bhi.n	8003d78 <UART_SetConfig+0x14c>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <UART_SetConfig+0xf8>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d59 	.word	0x08003d59
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003d79 	.word	0x08003d79
 8003d30:	08003d79 	.word	0x08003d79
 8003d34:	08003d69 	.word	0x08003d69
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d79 	.word	0x08003d79
 8003d40:	08003d79 	.word	0x08003d79
 8003d44:	08003d61 	.word	0x08003d61
 8003d48:	08003d79 	.word	0x08003d79
 8003d4c:	08003d79 	.word	0x08003d79
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d71 	.word	0x08003d71
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5e:	e042      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003d60:	2302      	movs	r3, #2
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d66:	e03e      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6e:	e03a      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003d70:	2308      	movs	r3, #8
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d76:	e036      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7e:	e032      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6a      	ldr	r2, [pc, #424]	; (8003f30 <UART_SetConfig+0x304>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d12a      	bne.n	8003de0 <UART_SetConfig+0x1b4>
 8003d8a:	4b6b      	ldr	r3, [pc, #428]	; (8003f38 <UART_SetConfig+0x30c>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d98:	d01a      	beq.n	8003dd0 <UART_SetConfig+0x1a4>
 8003d9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d9e:	d81b      	bhi.n	8003dd8 <UART_SetConfig+0x1ac>
 8003da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da4:	d00c      	beq.n	8003dc0 <UART_SetConfig+0x194>
 8003da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003daa:	d815      	bhi.n	8003dd8 <UART_SetConfig+0x1ac>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <UART_SetConfig+0x18c>
 8003db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db4:	d008      	beq.n	8003dc8 <UART_SetConfig+0x19c>
 8003db6:	e00f      	b.n	8003dd8 <UART_SetConfig+0x1ac>
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dbe:	e012      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc6:	e00e      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dce:	e00a      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd6:	e006      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003dd8:	2310      	movs	r3, #16
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dde:	e002      	b.n	8003de6 <UART_SetConfig+0x1ba>
 8003de0:	2310      	movs	r3, #16
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a51      	ldr	r2, [pc, #324]	; (8003f30 <UART_SetConfig+0x304>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d17a      	bne.n	8003ee6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d824      	bhi.n	8003e42 <UART_SetConfig+0x216>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x1d4>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e43 	.word	0x08003e43
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e43 	.word	0x08003e43
 8003e10:	08003e33 	.word	0x08003e33
 8003e14:	08003e43 	.word	0x08003e43
 8003e18:	08003e43 	.word	0x08003e43
 8003e1c:	08003e43 	.word	0x08003e43
 8003e20:	08003e3b 	.word	0x08003e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7fe fbb4 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8003e28:	61f8      	str	r0, [r7, #28]
        break;
 8003e2a:	e010      	b.n	8003e4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e2c:	4b44      	ldr	r3, [pc, #272]	; (8003f40 <UART_SetConfig+0x314>)
 8003e2e:	61fb      	str	r3, [r7, #28]
        break;
 8003e30:	e00d      	b.n	8003e4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e32:	f7fe fb15 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 8003e36:	61f8      	str	r0, [r7, #28]
        break;
 8003e38:	e009      	b.n	8003e4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3e:	61fb      	str	r3, [r7, #28]
        break;
 8003e40:	e005      	b.n	8003e4e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8107 	beq.w	8004064 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	4413      	add	r3, r2
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d305      	bcc.n	8003e72 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d903      	bls.n	8003e7a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e78:	e0f4      	b.n	8004064 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	461c      	mov	r4, r3
 8003e80:	4615      	mov	r5, r2
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	022b      	lsls	r3, r5, #8
 8003e8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e90:	0222      	lsls	r2, r4, #8
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	6849      	ldr	r1, [r1, #4]
 8003e96:	0849      	lsrs	r1, r1, #1
 8003e98:	2000      	movs	r0, #0
 8003e9a:	4688      	mov	r8, r1
 8003e9c:	4681      	mov	r9, r0
 8003e9e:	eb12 0a08 	adds.w	sl, r2, r8
 8003ea2:	eb43 0b09 	adc.w	fp, r3, r9
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	4659      	mov	r1, fp
 8003eb8:	f7fc f988 	bl	80001cc <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eca:	d308      	bcc.n	8003ede <UART_SetConfig+0x2b2>
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed2:	d204      	bcs.n	8003ede <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	e0c2      	b.n	8004064 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ee4:	e0be      	b.n	8004064 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eee:	d16a      	bne.n	8003fc6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d834      	bhi.n	8003f62 <UART_SetConfig+0x336>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <UART_SetConfig+0x2d4>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f45 	.word	0x08003f45
 8003f08:	08003f4d 	.word	0x08003f4d
 8003f0c:	08003f63 	.word	0x08003f63
 8003f10:	08003f53 	.word	0x08003f53
 8003f14:	08003f63 	.word	0x08003f63
 8003f18:	08003f63 	.word	0x08003f63
 8003f1c:	08003f63 	.word	0x08003f63
 8003f20:	08003f5b 	.word	0x08003f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7fe fb34 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8003f28:	61f8      	str	r0, [r7, #28]
        break;
 8003f2a:	e020      	b.n	8003f6e <UART_SetConfig+0x342>
 8003f2c:	efff69f3 	.word	0xefff69f3
 8003f30:	40008000 	.word	0x40008000
 8003f34:	40013800 	.word	0x40013800
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40004400 	.word	0x40004400
 8003f40:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f44:	f7fe fb3a 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8003f48:	61f8      	str	r0, [r7, #28]
        break;
 8003f4a:	e010      	b.n	8003f6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f4c:	4b4c      	ldr	r3, [pc, #304]	; (8004080 <UART_SetConfig+0x454>)
 8003f4e:	61fb      	str	r3, [r7, #28]
        break;
 8003f50:	e00d      	b.n	8003f6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f52:	f7fe fa85 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 8003f56:	61f8      	str	r0, [r7, #28]
        break;
 8003f58:	e009      	b.n	8003f6e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5e:	61fb      	str	r3, [r7, #28]
        break;
 8003f60:	e005      	b.n	8003f6e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d077      	beq.n	8004064 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005a      	lsls	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	441a      	add	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b0f      	cmp	r3, #15
 8003f8e:	d916      	bls.n	8003fbe <UART_SetConfig+0x392>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f96:	d212      	bcs.n	8003fbe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f023 030f 	bic.w	r3, r3, #15
 8003fa0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	085b      	lsrs	r3, r3, #1
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	8afb      	ldrh	r3, [r7, #22]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	8afa      	ldrh	r2, [r7, #22]
 8003fba:	60da      	str	r2, [r3, #12]
 8003fbc:	e052      	b.n	8004064 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fc4:	e04e      	b.n	8004064 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d827      	bhi.n	800401e <UART_SetConfig+0x3f2>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x3a8>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08004001 	.word	0x08004001
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	0800401f 	.word	0x0800401f
 8003fe4:	0800400f 	.word	0x0800400f
 8003fe8:	0800401f 	.word	0x0800401f
 8003fec:	0800401f 	.word	0x0800401f
 8003ff0:	0800401f 	.word	0x0800401f
 8003ff4:	08004017 	.word	0x08004017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7fe faca 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	61f8      	str	r0, [r7, #28]
        break;
 8003ffe:	e014      	b.n	800402a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004000:	f7fe fadc 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8004004:	61f8      	str	r0, [r7, #28]
        break;
 8004006:	e010      	b.n	800402a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004008:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <UART_SetConfig+0x454>)
 800400a:	61fb      	str	r3, [r7, #28]
        break;
 800400c:	e00d      	b.n	800402a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400e:	f7fe fa27 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 8004012:	61f8      	str	r0, [r7, #28]
        break;
 8004014:	e009      	b.n	800402a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401a:	61fb      	str	r3, [r7, #28]
        break;
 800401c:	e005      	b.n	800402a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004028:	bf00      	nop
    }

    if (pclk != 0U)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d019      	beq.n	8004064 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	085a      	lsrs	r2, r3, #1
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	441a      	add	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b0f      	cmp	r3, #15
 8004048:	d909      	bls.n	800405e <UART_SetConfig+0x432>
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d205      	bcs.n	800405e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
 800405c:	e002      	b.n	8004064 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004070:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004074:	4618      	mov	r0, r3
 8004076:	3728      	adds	r7, #40	; 0x28
 8004078:	46bd      	mov	sp, r7
 800407a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407e:	bf00      	nop
 8004080:	00f42400 	.word	0x00f42400

08004084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01a      	beq.n	800419a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004182:	d10a      	bne.n	800419a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b098      	sub	sp, #96	; 0x60
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041d8:	f7fd f888 	bl	80012ec <HAL_GetTick>
 80041dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d12e      	bne.n	800424a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f88c 	bl	8004318 <UART_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d021      	beq.n	800424a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421a:	653b      	str	r3, [r7, #80]	; 0x50
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
 8004226:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800422a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e6      	bne.n	8004206 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e062      	b.n	8004310 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b04      	cmp	r3, #4
 8004256:	d149      	bne.n	80042ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004260:	2200      	movs	r2, #0
 8004262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f856 	bl	8004318 <UART_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d03c      	beq.n	80042ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	623b      	str	r3, [r7, #32]
   return(result);
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
 8004292:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e6      	bne.n	8004272 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3308      	adds	r3, #8
 80042c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c4:	61fa      	str	r2, [r7, #28]
 80042c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	617b      	str	r3, [r7, #20]
   return(result);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e011      	b.n	8004310 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3758      	adds	r7, #88	; 0x58
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004328:	e049      	b.n	80043be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d045      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fc ffdb 	bl	80012ec <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <UART_WaitOnFlagUntilTimeout+0x30>
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e048      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d031      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d110      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2208      	movs	r2, #8
 800436e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f8ff 	bl	8004574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2208      	movs	r2, #8
 800437a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e029      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004398:	d111      	bne.n	80043be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f8e5 	bl	8004574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e00f      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4013      	ands	r3, r2
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	bf0c      	ite	eq
 80043ce:	2301      	moveq	r3, #1
 80043d0:	2300      	movne	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d0a6      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b097      	sub	sp, #92	; 0x5c
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441a:	d10e      	bne.n	800443a <UART_Start_Receive_IT+0x52>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <UART_Start_Receive_IT+0x48>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f240 12ff 	movw	r2, #511	; 0x1ff
 800442a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800442e:	e02d      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	22ff      	movs	r2, #255	; 0xff
 8004434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004438:	e028      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10d      	bne.n	800445e <UART_Start_Receive_IT+0x76>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <UART_Start_Receive_IT+0x6c>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	22ff      	movs	r2, #255	; 0xff
 800444e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004452:	e01b      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	227f      	movs	r2, #127	; 0x7f
 8004458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800445c:	e016      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004466:	d10d      	bne.n	8004484 <UART_Start_Receive_IT+0x9c>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d104      	bne.n	800447a <UART_Start_Receive_IT+0x92>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	227f      	movs	r2, #127	; 0x7f
 8004474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004478:	e008      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	223f      	movs	r2, #63	; 0x3f
 800447e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004482:	e003      	b.n	800448c <UART_Start_Receive_IT+0xa4>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2222      	movs	r2, #34	; 0x22
 8004498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	657b      	str	r3, [r7, #84]	; 0x54
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80044be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e5      	bne.n	800449c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d8:	d107      	bne.n	80044ea <UART_Start_Receive_IT+0x102>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a21      	ldr	r2, [pc, #132]	; (800456c <UART_Start_Receive_IT+0x184>)
 80044e6:	669a      	str	r2, [r3, #104]	; 0x68
 80044e8:	e002      	b.n	80044f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a20      	ldr	r2, [pc, #128]	; (8004570 <UART_Start_Receive_IT+0x188>)
 80044ee:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d019      	beq.n	800452c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800450c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
 8004518:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800451c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e6      	bne.n	80044f8 <UART_Start_Receive_IT+0x110>
 800452a:	e018      	b.n	800455e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	613b      	str	r3, [r7, #16]
   return(result);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f043 0320 	orr.w	r3, r3, #32
 8004540:	653b      	str	r3, [r7, #80]	; 0x50
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	69f9      	ldr	r1, [r7, #28]
 8004550:	6a3a      	ldr	r2, [r7, #32]
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	61bb      	str	r3, [r7, #24]
   return(result);
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e6      	bne.n	800452c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	375c      	adds	r7, #92	; 0x5c
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	08004879 	.word	0x08004879
 8004570:	080046bd 	.word	0x080046bd

08004574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b095      	sub	sp, #84	; 0x54
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459a:	643b      	str	r3, [r7, #64]	; 0x40
 800459c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e6      	bne.n	800457c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3308      	adds	r3, #8
 80045cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e5      	bne.n	80045ae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d118      	bne.n	800461c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 0310 	bic.w	r3, r3, #16
 80045fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	613b      	str	r3, [r7, #16]
   return(result);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e6      	bne.n	80045ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004630:	bf00      	nop
 8004632:	3754      	adds	r7, #84	; 0x54
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff fad0 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	60bb      	str	r3, [r7, #8]
   return(result);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	6979      	ldr	r1, [r7, #20]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	613b      	str	r3, [r7, #16]
   return(result);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e6      	bne.n	8004670 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fa9c 	bl	8003bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b4:	bf00      	nop
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b09c      	sub	sp, #112	; 0x70
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d4:	2b22      	cmp	r3, #34	; 0x22
 80046d6:	f040 80be 	bne.w	8004856 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046e8:	b2d9      	uxtb	r1, r3
 80046ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	400a      	ands	r2, r1
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	f040 80a3 	bne.w	800486a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004738:	66bb      	str	r3, [r7, #104]	; 0x68
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004742:	65bb      	str	r3, [r7, #88]	; 0x58
 8004744:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e6      	bne.n	8004724 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3308      	adds	r3, #8
 800475c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	667b      	str	r3, [r7, #100]	; 0x64
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3308      	adds	r3, #8
 8004774:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004776:	647a      	str	r2, [r7, #68]	; 0x44
 8004778:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800477c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e5      	bne.n	8004756 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a34      	ldr	r2, [pc, #208]	; (8004874 <UART_RxISR_8BIT+0x1b8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d01f      	beq.n	80047e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d018      	beq.n	80047e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	623b      	str	r3, [r7, #32]
   return(result);
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ca:	663b      	str	r3, [r7, #96]	; 0x60
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30
 80047d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e6      	bne.n	80047b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d12e      	bne.n	800484e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	60fb      	str	r3, [r7, #12]
   return(result);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0310 	bic.w	r3, r3, #16
 800480a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	69b9      	ldr	r1, [r7, #24]
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	617b      	str	r3, [r7, #20]
   return(result);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e6      	bne.n	80047f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f003 0310 	and.w	r3, r3, #16
 8004832:	2b10      	cmp	r3, #16
 8004834:	d103      	bne.n	800483e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2210      	movs	r2, #16
 800483c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff f9e4 	bl	8003c14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800484c:	e00d      	b.n	800486a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fb ffee 	bl	8000830 <HAL_UART_RxCpltCallback>
}
 8004854:	e009      	b.n	800486a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	8b1b      	ldrh	r3, [r3, #24]
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0208 	orr.w	r2, r2, #8
 8004866:	b292      	uxth	r2, r2
 8004868:	831a      	strh	r2, [r3, #24]
}
 800486a:	bf00      	nop
 800486c:	3770      	adds	r7, #112	; 0x70
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40008000 	.word	0x40008000

08004878 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b09c      	sub	sp, #112	; 0x70
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004886:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004890:	2b22      	cmp	r3, #34	; 0x22
 8004892:	f040 80be 	bne.w	8004a12 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800489c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80048a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80048aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80048ae:	4013      	ands	r3, r2
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	1c9a      	adds	r2, r3, #2
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 80a3 	bne.w	8004a26 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80048ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004900:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800490c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e6      	bne.n	80048e0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004932:	643a      	str	r2, [r7, #64]	; 0x40
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a34      	ldr	r2, [pc, #208]	; (8004a30 <UART_RxISR_16BIT+0x1b8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d01f      	beq.n	80049a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004992:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e6      	bne.n	8004972 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d12e      	bne.n	8004a0a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	60bb      	str	r3, [r7, #8]
   return(result);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f023 0310 	bic.w	r3, r3, #16
 80049c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	461a      	mov	r2, r3
 80049ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6979      	ldr	r1, [r7, #20]
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	613b      	str	r3, [r7, #16]
   return(result);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e6      	bne.n	80049b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d103      	bne.n	80049fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2210      	movs	r2, #16
 80049f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff f906 	bl	8003c14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a08:	e00d      	b.n	8004a26 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fb ff10 	bl	8000830 <HAL_UART_RxCpltCallback>
}
 8004a10:	e009      	b.n	8004a26 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	8b1b      	ldrh	r3, [r3, #24]
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0208 	orr.w	r2, r2, #8
 8004a22:	b292      	uxth	r2, r2
 8004a24:	831a      	strh	r2, [r3, #24]
}
 8004a26:	bf00      	nop
 8004a28:	3770      	adds	r7, #112	; 0x70
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40008000 	.word	0x40008000

08004a34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <memset>:
 8004a48:	4402      	add	r2, r0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d100      	bne.n	8004a52 <memset+0xa>
 8004a50:	4770      	bx	lr
 8004a52:	f803 1b01 	strb.w	r1, [r3], #1
 8004a56:	e7f9      	b.n	8004a4c <memset+0x4>

08004a58 <__libc_init_array>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	4d0d      	ldr	r5, [pc, #52]	; (8004a90 <__libc_init_array+0x38>)
 8004a5c:	4c0d      	ldr	r4, [pc, #52]	; (8004a94 <__libc_init_array+0x3c>)
 8004a5e:	1b64      	subs	r4, r4, r5
 8004a60:	10a4      	asrs	r4, r4, #2
 8004a62:	2600      	movs	r6, #0
 8004a64:	42a6      	cmp	r6, r4
 8004a66:	d109      	bne.n	8004a7c <__libc_init_array+0x24>
 8004a68:	4d0b      	ldr	r5, [pc, #44]	; (8004a98 <__libc_init_array+0x40>)
 8004a6a:	4c0c      	ldr	r4, [pc, #48]	; (8004a9c <__libc_init_array+0x44>)
 8004a6c:	f000 f818 	bl	8004aa0 <_init>
 8004a70:	1b64      	subs	r4, r4, r5
 8004a72:	10a4      	asrs	r4, r4, #2
 8004a74:	2600      	movs	r6, #0
 8004a76:	42a6      	cmp	r6, r4
 8004a78:	d105      	bne.n	8004a86 <__libc_init_array+0x2e>
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a80:	4798      	blx	r3
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7ee      	b.n	8004a64 <__libc_init_array+0xc>
 8004a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8a:	4798      	blx	r3
 8004a8c:	3601      	adds	r6, #1
 8004a8e:	e7f2      	b.n	8004a76 <__libc_init_array+0x1e>
 8004a90:	08005ae8 	.word	0x08005ae8
 8004a94:	08005ae8 	.word	0x08005ae8
 8004a98:	08005ae8 	.word	0x08005ae8
 8004a9c:	08005aec 	.word	0x08005aec

08004aa0 <_init>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	bf00      	nop
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr

08004aac <_fini>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr
