
mcsd-project-heartrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b64  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d30  08005d30  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d38  08005d38  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d38  08005d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000001c  08005d5c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08005d5c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed75  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224a  00000000  00000000  0002ee04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  00031050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000961  00000000  00000000  00031c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020567  00000000  00000000  000325c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efb5  00000000  00000000  00052b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1493  00000000  00000000  00061ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003188  00000000  00000000  00122f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00126100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004cd8 	.word	0x08004cd8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000020 	.word	0x20000020
 80001c8:	08004cd8 	.word	0x08004cd8

080001cc <strcmp>:
 80001cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d4:	2a01      	cmp	r2, #1
 80001d6:	bf28      	it	cs
 80001d8:	429a      	cmpcs	r2, r3
 80001da:	d0f7      	beq.n	80001cc <strcmp>
 80001dc:	1ad0      	subs	r0, r2, r3
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 ffae 	bl	8001442 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f873 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f931 	bl	8000750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f8ff 	bl	80006f0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004f2:	f000 f8bf 	bl	8000674 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
oledc_default_cfg(&hspi1);
 80004f6:	482e      	ldr	r0, [pc, #184]	; (80005b0 <main+0xd4>)
 80004f8:	f000 fa02 	bl	8000900 <oledc_default_cfg>
oledc_set_font(&oledc, guiFont_Tahoma_14_Regular, 0);
 80004fc:	2200      	movs	r2, #0
 80004fe:	492d      	ldr	r1, [pc, #180]	; (80005b4 <main+0xd8>)
 8000500:	482d      	ldr	r0, [pc, #180]	; (80005b8 <main+0xdc>)
 8000502:	f000 fbe2 	bl	8000cca <oledc_set_font>
oledc_fill_screen(0xF800, &hspi1);
 8000506:	492a      	ldr	r1, [pc, #168]	; (80005b0 <main+0xd4>)
 8000508:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800050c:	f000 fafc 	bl	8000b08 <oledc_fill_screen>
uint8_t text1[] = "52";
 8000510:	4a2a      	ldr	r2, [pc, #168]	; (80005bc <main+0xe0>)
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	6812      	ldr	r2, [r2, #0]
 8000518:	4611      	mov	r1, r2
 800051a:	8019      	strh	r1, [r3, #0]
 800051c:	3302      	adds	r3, #2
 800051e:	0c12      	lsrs	r2, r2, #16
 8000520:	701a      	strb	r2, [r3, #0]
uint8_t text2[] = "PULSE";
 8000522:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <main+0xe4>)
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052c:	6018      	str	r0, [r3, #0]
 800052e:	3304      	adds	r3, #4
 8000530:	8019      	strh	r1, [r3, #0]
uint8_t text3[] = "OXYGEN";
 8000532:	4a24      	ldr	r2, [pc, #144]	; (80005c4 <main+0xe8>)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053a:	6018      	str	r0, [r3, #0]
 800053c:	3304      	adds	r3, #4
 800053e:	8019      	strh	r1, [r3, #0]
 8000540:	3302      	adds	r3, #2
 8000542:	0c0a      	lsrs	r2, r1, #16
 8000544:	701a      	strb	r2, [r3, #0]
//uint8_t text3[] = "50";
oledc_text(&oledc, text2, 20, 20, &hspi1);
 8000546:	f107 010c 	add.w	r1, r7, #12
 800054a:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <main+0xd4>)
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2314      	movs	r3, #20
 8000550:	2214      	movs	r2, #20
 8000552:	4819      	ldr	r0, [pc, #100]	; (80005b8 <main+0xdc>)
 8000554:	f000 fb8c 	bl	8000c70 <oledc_text>
oledc_text(&oledc, text1, 40, 40, &hspi1);
 8000558:	f107 0114 	add.w	r1, r7, #20
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <main+0xd4>)
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2328      	movs	r3, #40	; 0x28
 8000562:	2228      	movs	r2, #40	; 0x28
 8000564:	4814      	ldr	r0, [pc, #80]	; (80005b8 <main+0xdc>)
 8000566:	f000 fb83 	bl	8000c70 <oledc_text>
strcpy(receive_frame_copy, text1);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	4815      	ldr	r0, [pc, #84]	; (80005c8 <main+0xec>)
 8000572:	f004 fba9 	bl	8004cc8 <strcpy>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  receive();
 8000576:	f000 f961 	bl	800083c <receive>
	  oledc_update_number(&oledc, receive_frame, &hspi1);
 800057a:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <main+0xd4>)
 800057c:	4913      	ldr	r1, [pc, #76]	; (80005cc <main+0xf0>)
 800057e:	480e      	ldr	r0, [pc, #56]	; (80005b8 <main+0xdc>)
 8000580:	f000 fd84 	bl	800108c <oledc_update_number>

	  HAL_Delay(2000);
 8000584:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000588:	f000 ffd0 	bl	800152c <HAL_Delay>
	  oledc_change_mode(&oledc, receive_frame, text2, &hspi1);
 800058c:	f107 020c 	add.w	r2, r7, #12
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <main+0xd4>)
 8000592:	490e      	ldr	r1, [pc, #56]	; (80005cc <main+0xf0>)
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <main+0xdc>)
 8000596:	f000 fd97 	bl	80010c8 <oledc_change_mode>

	  HAL_Delay(2000);
 800059a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800059e:	f000 ffc5 	bl	800152c <HAL_Delay>
	  oledc_change_mode(&oledc, receive_frame, text3, &hspi1);
 80005a2:	1d3a      	adds	r2, r7, #4
 80005a4:	4b02      	ldr	r3, [pc, #8]	; (80005b0 <main+0xd4>)
 80005a6:	4909      	ldr	r1, [pc, #36]	; (80005cc <main+0xf0>)
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <main+0xdc>)
 80005aa:	f000 fd8d 	bl	80010c8 <oledc_change_mode>
	  receive();
 80005ae:	e7e2      	b.n	8000576 <main+0x9a>
 80005b0:	20000038 	.word	0x20000038
 80005b4:	08004d14 	.word	0x08004d14
 80005b8:	20000128 	.word	0x20000128
 80005bc:	08004cf0 	.word	0x08004cf0
 80005c0:	08004cf4 	.word	0x08004cf4
 80005c4:	08004cfc 	.word	0x08004cfc
 80005c8:	2000015c 	.word	0x2000015c
 80005cc:	20000140 	.word	0x20000140

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	; 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 fb46 	bl	8004c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f6:	f001 fadd 	bl	8001bb4 <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 f978 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000604:	2310      	movs	r3, #16
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000610:	2360      	movs	r3, #96	; 0x60
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000618:	2301      	movs	r3, #1
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fb13 	bl	8001c60 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000640:	f000 f958 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2303      	movs	r3, #3
 800064a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f001 ff13 	bl	8002488 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000668:	f000 f944 	bl	80008f4 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3758      	adds	r7, #88	; 0x58
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_SPI1_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_SPI1_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_SPI1_Init+0x74>)
 8000680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000684:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_SPI1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_SPI1_Init+0x74>)
 800068e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000692:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_SPI1_Init+0x74>)
 8000696:	2202      	movs	r2, #2
 8000698:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_SPI1_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006c2:	2207      	movs	r2, #7
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_SPI1_Init+0x74>)
 80006d4:	f002 fbe4 	bl	8002ea0 <HAL_SPI_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 f909 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000038 	.word	0x20000038
 80006ec:	40013000 	.word	0x40013000

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_USART2_UART_Init+0x58>)
 80006f6:	4a15      	ldr	r2, [pc, #84]	; (800074c <MX_USART2_UART_Init+0x5c>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_USART2_UART_Init+0x58>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART2_UART_Init+0x58>)
 8000734:	f002 ffe9 	bl	800370a <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 f8d9 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000009c 	.word	0x2000009c
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <MX_GPIO_Init+0xe0>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a31      	ldr	r2, [pc, #196]	; (8000830 <MX_GPIO_Init+0xe0>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_GPIO_Init+0xe0>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_GPIO_Init+0xe0>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <MX_GPIO_Init+0xe0>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_GPIO_Init+0xe0>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_GPIO_Init+0xe0>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a25      	ldr	r2, [pc, #148]	; (8000830 <MX_GPIO_Init+0xe0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_GPIO_Init+0xe0>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b4:	481f      	ldr	r0, [pc, #124]	; (8000834 <MX_GPIO_Init+0xe4>)
 80007b6:	f001 f9d7 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RW_Pin|OLED_EN_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2109      	movs	r1, #9
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f001 f9d1 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2103      	movs	r1, #3
 80007ca:	481b      	ldr	r0, [pc, #108]	; (8000838 <MX_GPIO_Init+0xe8>)
 80007cc:	f001 f9cc 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80007d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	4812      	ldr	r0, [pc, #72]	; (8000834 <MX_GPIO_Init+0xe4>)
 80007ea:	f001 f853 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RW_Pin OLED_EN_Pin */
  GPIO_InitStruct.Pin = OLED_RW_Pin|OLED_EN_Pin;
 80007ee:	2309      	movs	r3, #9
 80007f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f001 f844 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 800080c:	2303      	movs	r3, #3
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_GPIO_Init+0xe8>)
 8000824:	f001 f836 	bl	8001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	48000800 	.word	0x48000800
 8000838:	48000400 	.word	0x48000400

0800083c <receive>:

/* USER CODE BEGIN 4 */
void receive() {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	while (eof_bool == false) {
 8000840:	e009      	b.n	8000856 <receive+0x1a>
		if (HAL_UART_Receive_IT (&huart2, &rec_byte, RECBUF) == HAL_ERROR) {									// read
 8000842:	2201      	movs	r2, #1
 8000844:	490a      	ldr	r1, [pc, #40]	; (8000870 <receive+0x34>)
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <receive+0x38>)
 8000848:	f002 ffae 	bl	80037a8 <HAL_UART_Receive_IT>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d101      	bne.n	8000856 <receive+0x1a>
			Error_Handler();
 8000852:	f000 f84f 	bl	80008f4 <Error_Handler>
	while (eof_bool == false) {
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <receive+0x3c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	f083 0301 	eor.w	r3, r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1ee      	bne.n	8000842 <receive+0x6>
		}
	}
	eof_bool = false;
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <receive+0x3c>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000013c 	.word	0x2000013c
 8000874:	2000009c 	.word	0x2000009c
 8000878:	20000124 	.word	0x20000124

0800087c <HAL_UART_RxCpltCallback>:
 * @brief 	UART receiving callback function. Copies each received byte into string "receive_frame".
 * 			Upon receiving end-of-frame "MYEOF" puts string terminator.
 * @param 	huart: 	UART handle.
 * @retval	None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <HAL_UART_RxCpltCallback+0x64>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d123      	bne.n	80008d4 <HAL_UART_RxCpltCallback+0x58>
		receive_frame[frame_index] = rec_byte;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_UART_RxCpltCallback+0x68>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_RxCpltCallback+0x6c>)
 8000894:	7819      	ldrb	r1, [r3, #0]
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_UART_RxCpltCallback+0x70>)
 8000898:	5499      	strb	r1, [r3, r2]

		if (frame_index == FRAMELEN) {
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_UART_RxCpltCallback+0x68>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b1c      	cmp	r3, #28
 80008a0:	d102      	bne.n	80008a8 <HAL_UART_RxCpltCallback+0x2c>
			frame_index = 0;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_UART_RxCpltCallback+0x68>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
		}
		frame_index++;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_UART_RxCpltCallback+0x68>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_UART_RxCpltCallback+0x68>)
 80008b2:	701a      	strb	r2, [r3, #0]

		if (rec_byte == MYEOF) {
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_UART_RxCpltCallback+0x6c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b0a      	cmp	r3, #10
 80008ba:	d10b      	bne.n	80008d4 <HAL_UART_RxCpltCallback+0x58>
			receive_frame[frame_index] = '\0';
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_UART_RxCpltCallback+0x68>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_UART_RxCpltCallback+0x70>)
 80008c4:	2100      	movs	r1, #0
 80008c6:	5499      	strb	r1, [r3, r2]
			frame_index = 0;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_UART_RxCpltCallback+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
			eof_bool = true;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_UART_RxCpltCallback+0x74>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	2000009c 	.word	0x2000009c
 80008e4:	20000178 	.word	0x20000178
 80008e8:	2000013c 	.word	0x2000013c
 80008ec:	20000140 	.word	0x20000140
 80008f0:	20000124 	.word	0x20000124

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <oledc_default_cfg>:
#include "oledc.h"
#include "main.h"



void oledc_default_cfg (SPI_HandleTypeDef *hspi1) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	  // Enable CS
	  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2101      	movs	r1, #1
 800090c:	4834      	ldr	r0, [pc, #208]	; (80009e0 <oledc_default_cfg+0xe0>)
 800090e:	f001 f92b 	bl	8001b68 <HAL_GPIO_WritePin>

	  // Enable OLED via EN
	  HAL_GPIO_WritePin(OLED_EN_GPIO_Port, OLED_EN_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2108      	movs	r1, #8
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f001 f925 	bl	8001b68 <HAL_GPIO_WritePin>

	  oledc_reset();
 800091e:	f000 f867 	bl	80009f0 <oledc_reset>

	  // Unlock display and turn off
	oledc_one_arg_commands(OLEDC_COMMAND_LOCK, OLEDC_DEFAULT_OLED_LOCK, hspi1);
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	2112      	movs	r1, #18
 8000926:	20fd      	movs	r0, #253	; 0xfd
 8000928:	f000 f884 	bl	8000a34 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_COMMAND_LOCK, OLEDC_DEFAULT_CMD_LOCK, hspi1);
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	21b1      	movs	r1, #177	; 0xb1
 8000930:	20fd      	movs	r0, #253	; 0xfd
 8000932:	f000 f87f 	bl	8000a34 <oledc_one_arg_commands>
	oledc_more_arg_commands(OLEDC_SLEEP_ON,  0,  0 , hspi1);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	20ae      	movs	r0, #174	; 0xae
 800093e:	f000 f8a7 	bl	8000a90 <oledc_more_arg_commands>

	// Setup SSD1351
	oledc_one_arg_commands(OLEDC_SET_REMAP,       OLEDC_DEFAULT_REMAP        , hspi1);
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <oledc_default_cfg+0xe4>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4619      	mov	r1, r3
 800094a:	20a0      	movs	r0, #160	; 0xa0
 800094c:	f000 f872 	bl	8000a34 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_MUX_RATIO,       OLEDC_DEFAULT_MUX_RATIO    , hspi1);
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	215f      	movs	r1, #95	; 0x5f
 8000954:	20ca      	movs	r0, #202	; 0xca
 8000956:	f000 f86d 	bl	8000a34 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_START_LINE,  OLEDC_DEFAULT_START_LINE   , hspi1);
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	2100      	movs	r1, #0
 800095e:	20a1      	movs	r0, #161	; 0xa1
 8000960:	f000 f868 	bl	8000a34 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_OFFSET,      OLEDC_DEFAULT_OFFSET       , hspi1);
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	2120      	movs	r1, #32
 8000968:	20a2      	movs	r0, #162	; 0xa2
 800096a:	f000 f863 	bl	8000a34 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_VCOMH,           OLEDC_DEFAULT_VCOMH        , hspi1);
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	2105      	movs	r1, #5
 8000972:	20be      	movs	r0, #190	; 0xbe
 8000974:	f000 f85e 	bl	8000a34 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_CLOCK_DIV,       OLEDC_DEFAULT_DIVSET       , hspi1);
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	21f1      	movs	r1, #241	; 0xf1
 800097c:	20b3      	movs	r0, #179	; 0xb3
 800097e:	f000 f859 	bl	8000a34 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_RESET_PRECH, OLEDC_DEFAULT_PRECHARGE    , hspi1);
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	2132      	movs	r1, #50	; 0x32
 8000986:	20b1      	movs	r0, #177	; 0xb1
 8000988:	f000 f854 	bl	8000a34 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SETSEC_PRECH,    OLEDC_DEFAULT_PRECHARGE_2  , hspi1);
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	2101      	movs	r1, #1
 8000990:	20b6      	movs	r0, #182	; 0xb6
 8000992:	f000 f84f 	bl	8000a34 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_MASTER_CONTRAST, OLEDC_DEFAULT_MASTER_CONT  , hspi1);
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	21cf      	movs	r1, #207	; 0xcf
 800099a:	20c7      	movs	r0, #199	; 0xc7
 800099c:	f000 f84a 	bl	8000a34 <oledc_one_arg_commands>

	oledc_more_arg_commands(OLEDC_CONTRAST,   OLEDC_DEFAULT_CONTRAST, 3 , hspi1);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2203      	movs	r2, #3
 80009a4:	4910      	ldr	r1, [pc, #64]	; (80009e8 <oledc_default_cfg+0xe8>)
 80009a6:	20c1      	movs	r0, #193	; 0xc1
 80009a8:	f000 f872 	bl	8000a90 <oledc_more_arg_commands>
	oledc_more_arg_commands(OLEDC_VSL,        OLEDC_DEFAULT_VSL,      3 , hspi1);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2203      	movs	r2, #3
 80009b0:	490e      	ldr	r1, [pc, #56]	; (80009ec <oledc_default_cfg+0xec>)
 80009b2:	20b4      	movs	r0, #180	; 0xb4
 80009b4:	f000 f86c 	bl	8000a90 <oledc_more_arg_commands>

	// Set normal mode and turn on display
	oledc_more_arg_commands(OLEDC_MODE_NORMAL, 0, 0 , hspi1);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	20a6      	movs	r0, #166	; 0xa6
 80009c0:	f000 f866 	bl	8000a90 <oledc_more_arg_commands>
	oledc_more_arg_commands(OLEDC_SLEEP_OFF,   0, 0 , hspi1);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	20af      	movs	r0, #175	; 0xaf
 80009cc:	f000 f860 	bl	8000a90 <oledc_more_arg_commands>
	oledc_fill_screen(0 , hspi1);
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f898 	bl	8000b08 <oledc_fill_screen>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	48000400 	.word	0x48000400
 80009e4:	20000006 	.word	0x20000006
 80009e8:	2000000c 	.word	0x2000000c
 80009ec:	20000008 	.word	0x20000008

080009f0 <oledc_reset>:

void oledc_reset() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <oledc_reset+0x40>)
 80009fc:	f001 f8b4 	bl	8001b68 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f000 fd93 	bl	800152c <HAL_Delay>
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <oledc_reset+0x40>)
 8000a0e:	f001 f8ab 	bl	8001b68 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000a12:	2001      	movs	r0, #1
 8000a14:	f000 fd8a 	bl	800152c <HAL_Delay>
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1e:	4804      	ldr	r0, [pc, #16]	; (8000a30 <oledc_reset+0x40>)
 8000a20:	f001 f8a2 	bl	8001b68 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000a24:	2064      	movs	r0, #100	; 0x64
 8000a26:	f000 fd81 	bl	800152c <HAL_Delay>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	48000800 	.word	0x48000800

08000a34 <oledc_one_arg_commands>:

void oledc_one_arg_commands (uint8_t command, uint8_t args, SPI_HandleTypeDef *hspi1) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	603a      	str	r2, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	460b      	mov	r3, r1
 8000a42:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2101      	movs	r1, #1
 8000a48:	4810      	ldr	r0, [pc, #64]	; (8000a8c <oledc_one_arg_commands+0x58>)
 8000a4a:	f001 f88d 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2102      	movs	r1, #2
 8000a52:	480e      	ldr	r0, [pc, #56]	; (8000a8c <oledc_one_arg_commands+0x58>)
 8000a54:	f001 f888 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &command, 1);
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	6838      	ldr	r0, [r7, #0]
 8000a60:	f002 fac2 	bl	8002fe8 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2102      	movs	r1, #2
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <oledc_one_arg_commands+0x58>)
 8000a6a:	f001 f87d 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &args, 1);
 8000a6e:	1dbb      	adds	r3, r7, #6
 8000a70:	2201      	movs	r2, #1
 8000a72:	4619      	mov	r1, r3
 8000a74:	6838      	ldr	r0, [r7, #0]
 8000a76:	f002 fab7 	bl	8002fe8 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <oledc_one_arg_commands+0x58>)
 8000a80:	f001 f872 	bl	8001b68 <HAL_GPIO_WritePin>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	48000400 	.word	0x48000400

08000a90 <oledc_more_arg_commands>:

void oledc_more_arg_commands ( uint8_t command, uint8_t *args, uint16_t args_len, SPI_HandleTypeDef *hspi1) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	81bb      	strh	r3, [r7, #12]
    uint16_t cnt;
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	4817      	ldr	r0, [pc, #92]	; (8000b04 <oledc_more_arg_commands+0x74>)
 8000aa8:	f001 f85e 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4814      	ldr	r0, [pc, #80]	; (8000b04 <oledc_more_arg_commands+0x74>)
 8000ab2:	f001 f859 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &command, 1);
 8000ab6:	f107 030f 	add.w	r3, r7, #15
 8000aba:	2201      	movs	r2, #1
 8000abc:	4619      	mov	r1, r3
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f002 fa92 	bl	8002fe8 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	480e      	ldr	r0, [pc, #56]	; (8000b04 <oledc_more_arg_commands+0x74>)
 8000aca:	f001 f84d 	bl	8001b68 <HAL_GPIO_WritePin>

    for ( cnt = 0; cnt < args_len; cnt++ )
 8000ace:	2300      	movs	r3, #0
 8000ad0:	82fb      	strh	r3, [r7, #22]
 8000ad2:	e00a      	b.n	8000aea <oledc_more_arg_commands+0x5a>
    {
        HAL_SPI_Transmit_IT(hspi1, &args[cnt], 1);
 8000ad4:	8afb      	ldrh	r3, [r7, #22]
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f002 fa82 	bl	8002fe8 <HAL_SPI_Transmit_IT>
    for ( cnt = 0; cnt < args_len; cnt++ )
 8000ae4:	8afb      	ldrh	r3, [r7, #22]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	82fb      	strh	r3, [r7, #22]
 8000aea:	8afa      	ldrh	r2, [r7, #22]
 8000aec:	89bb      	ldrh	r3, [r7, #12]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d3f0      	bcc.n	8000ad4 <oledc_more_arg_commands+0x44>
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2101      	movs	r1, #1
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <oledc_more_arg_commands+0x74>)
 8000af8:	f001 f836 	bl	8001b68 <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	48000400 	.word	0x48000400

08000b08 <oledc_fill_screen>:

void oledc_fill_screen (uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	80fb      	strh	r3, [r7, #6]
    box_area(0, 0, 96, 96, color , hspi1);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2360      	movs	r3, #96	; 0x60
 8000b1e:	2260      	movs	r2, #96	; 0x60
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 f804 	bl	8000b30 <box_area>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <box_area>:

void box_area (uint8_t start_col, uint8_t start_row, uint8_t end_col, uint8_t end_row, uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4604      	mov	r4, r0
 8000b38:	4608      	mov	r0, r1
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4623      	mov	r3, r4
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	4603      	mov	r3, r0
 8000b44:	71bb      	strb	r3, [r7, #6]
 8000b46:	460b      	mov	r3, r1
 8000b48:	717b      	strb	r3, [r7, #5]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	713b      	strb	r3, [r7, #4]
    uint8_t   cmd       = OLEDC_WRITE_RAM;
 8000b4e:	235c      	movs	r3, #92	; 0x5c
 8000b50:	737b      	strb	r3, [r7, #13]
    uint16_t  cnt       = ( end_col - start_col ) * ( end_row - start_row );
 8000b52:	797a      	ldrb	r2, [r7, #5]
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	7939      	ldrb	r1, [r7, #4]
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	1acb      	subs	r3, r1, r3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	fb12 f303 	smulbb	r3, r2, r3
 8000b66:	81fb      	strh	r3, [r7, #14]
    uint8_t   clr[ 2 ]  = { 0 };
 8000b68:	2300      	movs	r3, #0
 8000b6a:	813b      	strh	r3, [r7, #8]

    if( ( start_col > OLEDC_SCREEN_WIDTH ) ||
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b60      	cmp	r3, #96	; 0x60
 8000b70:	d86f      	bhi.n	8000c52 <box_area+0x122>
 8000b72:	797b      	ldrb	r3, [r7, #5]
 8000b74:	2b60      	cmp	r3, #96	; 0x60
 8000b76:	d86c      	bhi.n	8000c52 <box_area+0x122>
        ( end_col > OLEDC_SCREEN_WIDTH ) )
        return;

    if( ( start_row > OLEDC_SCREEN_HEIGHT ) ||
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	2b60      	cmp	r3, #96	; 0x60
 8000b7c:	d86b      	bhi.n	8000c56 <box_area+0x126>
 8000b7e:	793b      	ldrb	r3, [r7, #4]
 8000b80:	2b60      	cmp	r3, #96	; 0x60
 8000b82:	d868      	bhi.n	8000c56 <box_area+0x126>
        ( end_row > OLEDC_SCREEN_HEIGHT ) )
        return;

    if( ( end_col < start_col ) ||
 8000b84:	797a      	ldrb	r2, [r7, #5]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d366      	bcc.n	8000c5a <box_area+0x12a>
 8000b8c:	793a      	ldrb	r2, [r7, #4]
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d362      	bcc.n	8000c5a <box_area+0x12a>
        ( end_row < start_row ) )
        return;

    cols[ 0 ] = OLEDC_COL_OFF + start_col;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	3310      	adds	r3, #16
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <box_area+0x134>)
 8000b9c:	701a      	strb	r2, [r3, #0]
    cols[ 1 ] = OLEDC_COL_OFF + end_col - 1;
 8000b9e:	797b      	ldrb	r3, [r7, #5]
 8000ba0:	330f      	adds	r3, #15
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <box_area+0x134>)
 8000ba6:	705a      	strb	r2, [r3, #1]
    rows[ 0 ] = OLEDC_ROW_OFF + start_row;
 8000ba8:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <box_area+0x138>)
 8000baa:	79bb      	ldrb	r3, [r7, #6]
 8000bac:	7013      	strb	r3, [r2, #0]
    rows[ 1 ] = OLEDC_ROW_OFF + end_row - 1;
 8000bae:	793b      	ldrb	r3, [r7, #4]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <box_area+0x138>)
 8000bb6:	705a      	strb	r2, [r3, #1]
    clr[ 0 ] |= color >> 8;
 8000bb8:	7a3a      	ldrb	r2, [r7, #8]
 8000bba:	8c3b      	ldrh	r3, [r7, #32]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	723b      	strb	r3, [r7, #8]
    clr[ 1 ] |= color & 0x00FF;
 8000bc8:	7a7b      	ldrb	r3, [r7, #9]
 8000bca:	b25a      	sxtb	r2, r3
 8000bcc:	8c3b      	ldrh	r3, [r7, #32]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	727b      	strb	r3, [r7, #9]

    oledc_more_arg_commands(OLEDC_SET_COL_ADDRESS, cols, 2 , hspi1);
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	2202      	movs	r2, #2
 8000bdc:	4921      	ldr	r1, [pc, #132]	; (8000c64 <box_area+0x134>)
 8000bde:	2015      	movs	r0, #21
 8000be0:	f7ff ff56 	bl	8000a90 <oledc_more_arg_commands>
    oledc_more_arg_commands(OLEDC_SET_ROW_ADDRESS, rows, 2 , hspi1);
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	2202      	movs	r2, #2
 8000be8:	491f      	ldr	r1, [pc, #124]	; (8000c68 <box_area+0x138>)
 8000bea:	2075      	movs	r0, #117	; 0x75
 8000bec:	f7ff ff50 	bl	8000a90 <oledc_more_arg_commands>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	481d      	ldr	r0, [pc, #116]	; (8000c6c <box_area+0x13c>)
 8000bf6:	f000 ffb7 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	481b      	ldr	r0, [pc, #108]	; (8000c6c <box_area+0x13c>)
 8000c00:	f000 ffb2 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &cmd, 1);
 8000c04:	f107 030d 	add.w	r3, r7, #13
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c0e:	f002 f9eb 	bl	8002fe8 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2102      	movs	r1, #2
 8000c16:	4815      	ldr	r0, [pc, #84]	; (8000c6c <box_area+0x13c>)
 8000c18:	f000 ffa6 	bl	8001b68 <HAL_GPIO_WritePin>

    while( cnt-- ) {
 8000c1c:	e00e      	b.n	8000c3c <box_area+0x10c>
        HAL_SPI_Transmit_IT(hspi1, &clr[0], 1);
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2201      	movs	r2, #1
 8000c24:	4619      	mov	r1, r3
 8000c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c28:	f002 f9de 	bl	8002fe8 <HAL_SPI_Transmit_IT>
        HAL_SPI_Transmit_IT(hspi1, &clr[1], 1);
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	3301      	adds	r3, #1
 8000c32:	2201      	movs	r2, #1
 8000c34:	4619      	mov	r1, r3
 8000c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c38:	f002 f9d6 	bl	8002fe8 <HAL_SPI_Transmit_IT>
    while( cnt-- ) {
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	1e5a      	subs	r2, r3, #1
 8000c40:	81fa      	strh	r2, [r7, #14]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1eb      	bne.n	8000c1e <box_area+0xee>
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4808      	ldr	r0, [pc, #32]	; (8000c6c <box_area+0x13c>)
 8000c4c:	f000 ff8c 	bl	8001b68 <HAL_GPIO_WritePin>
 8000c50:	e004      	b.n	8000c5c <box_area+0x12c>
        return;
 8000c52:	bf00      	nop
 8000c54:	e002      	b.n	8000c5c <box_area+0x12c>
        return;
 8000c56:	bf00      	nop
 8000c58:	e000      	b.n	8000c5c <box_area+0x12c>
        return;
 8000c5a:	bf00      	nop
}
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd90      	pop	{r4, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	48000400 	.word	0x48000400

08000c70 <oledc_text>:

void oledc_text ( oledc_t *ctx, uint8_t *text, uint16_t x, uint16_t y , SPI_HandleTypeDef *hspi1) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	460b      	mov	r3, r1
 8000c80:	80fb      	strh	r3, [r7, #6]
 8000c82:	4613      	mov	r3, r2
 8000c84:	80bb      	strh	r3, [r7, #4]
    uint8_t *ptr = text;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	617b      	str	r3, [r7, #20]
    if ( ( x >= OLEDC_SCREEN_WIDTH ) || ( y >= OLEDC_SCREEN_HEIGHT ) ) {
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c8e:	d818      	bhi.n	8000cc2 <oledc_text+0x52>
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	2b5f      	cmp	r3, #95	; 0x5f
 8000c94:	d815      	bhi.n	8000cc2 <oledc_text+0x52>
        return;
    }

    ctx->x_cord = x;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	88fa      	ldrh	r2, [r7, #6]
 8000c9a:	81da      	strh	r2, [r3, #14]
    ctx->y_cord = y;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	88ba      	ldrh	r2, [r7, #4]
 8000ca0:	821a      	strh	r2, [r3, #16]

    while( *ptr ) {
 8000ca2:	e009      	b.n	8000cb8 <oledc_text+0x48>
        character( ctx, *ptr++ , hspi1);
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	617a      	str	r2, [r7, #20]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	6a3a      	ldr	r2, [r7, #32]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f000 f8b6 	bl	8000e24 <character>
    while( *ptr ) {
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f1      	bne.n	8000ca4 <oledc_text+0x34>
 8000cc0:	e000      	b.n	8000cc4 <oledc_text+0x54>
        return;
 8000cc2:	bf00      	nop
    }
}
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <oledc_set_font>:

void oledc_set_font ( oledc_t *ctx, const uint8_t *font_s, uint16_t color ) {
 8000cca:	b480      	push	{r7}
 8000ccc:	b085      	sub	sp, #20
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	80fb      	strh	r3, [r7, #6]
    ctx->font_obj               = font_s;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	601a      	str	r2, [r3, #0]
    ctx->font_first_char    = font_s[2] + (font_s[3] << 8);
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	3303      	adds	r3, #3
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	811a      	strh	r2, [r3, #8]
    ctx->font_last_char     = font_s[4] + (font_s[5] << 8);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	3305      	adds	r3, #5
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	815a      	strh	r2, [r3, #10]
    ctx->font_height        = font_s[6];
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3306      	adds	r3, #6
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	819a      	strh	r2, [r3, #12]
    ctx->font_color         = color;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	88fa      	ldrh	r2, [r7, #6]
 8000d26:	809a      	strh	r2, [r3, #4]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <pixel>:

void pixel ( oledc_t *ctx, uint8_t col, uint8_t row, uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	4611      	mov	r1, r2
 8000d40:	461a      	mov	r2, r3
 8000d42:	4603      	mov	r3, r0
 8000d44:	70fb      	strb	r3, [r7, #3]
 8000d46:	460b      	mov	r3, r1
 8000d48:	70bb      	strb	r3, [r7, #2]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	803b      	strh	r3, [r7, #0]
    uint8_t cmd       = OLEDC_WRITE_RAM;
 8000d4e:	235c      	movs	r3, #92	; 0x5c
 8000d50:	73fb      	strb	r3, [r7, #15]
    uint8_t clr[ 2 ]  = { 0 };
 8000d52:	2300      	movs	r3, #0
 8000d54:	81bb      	strh	r3, [r7, #12]

    if( ( col > OLEDC_SCREEN_WIDTH ) || ( row > OLEDC_SCREEN_HEIGHT ) ) {
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	2b60      	cmp	r3, #96	; 0x60
 8000d5a:	d859      	bhi.n	8000e10 <pixel+0xdc>
 8000d5c:	78bb      	ldrb	r3, [r7, #2]
 8000d5e:	2b60      	cmp	r3, #96	; 0x60
 8000d60:	d856      	bhi.n	8000e10 <pixel+0xdc>
        return;
    }
    cols[ 0 ] = OLEDC_COL_OFF + col;
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	3310      	adds	r3, #16
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <pixel+0xe4>)
 8000d6a:	701a      	strb	r2, [r3, #0]
    cols[ 1 ] = OLEDC_COL_OFF + col;
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	3310      	adds	r3, #16
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <pixel+0xe4>)
 8000d74:	705a      	strb	r2, [r3, #1]
    rows[ 0 ] = OLEDC_ROW_OFF + row;
 8000d76:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <pixel+0xe8>)
 8000d78:	78bb      	ldrb	r3, [r7, #2]
 8000d7a:	7013      	strb	r3, [r2, #0]
    rows[ 1 ] = OLEDC_ROW_OFF + row;
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <pixel+0xe8>)
 8000d7e:	78bb      	ldrb	r3, [r7, #2]
 8000d80:	7053      	strb	r3, [r2, #1]
    clr[ 0 ] |= color >> 8;
 8000d82:	7b3a      	ldrb	r2, [r7, #12]
 8000d84:	883b      	ldrh	r3, [r7, #0]
 8000d86:	0a1b      	lsrs	r3, r3, #8
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	733b      	strb	r3, [r7, #12]
    clr[ 1 ] |= color & 0x00FF;
 8000d92:	7b7b      	ldrb	r3, [r7, #13]
 8000d94:	b25a      	sxtb	r2, r3
 8000d96:	883b      	ldrh	r3, [r7, #0]
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	737b      	strb	r3, [r7, #13]

    oledc_more_arg_commands(OLEDC_SET_COL_ADDRESS, cols, 2 , hspi1);
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	2202      	movs	r2, #2
 8000da6:	491c      	ldr	r1, [pc, #112]	; (8000e18 <pixel+0xe4>)
 8000da8:	2015      	movs	r0, #21
 8000daa:	f7ff fe71 	bl	8000a90 <oledc_more_arg_commands>
    oledc_more_arg_commands(OLEDC_SET_ROW_ADDRESS, rows, 2 , hspi1);
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	2202      	movs	r2, #2
 8000db2:	491a      	ldr	r1, [pc, #104]	; (8000e1c <pixel+0xe8>)
 8000db4:	2075      	movs	r0, #117	; 0x75
 8000db6:	f7ff fe6b 	bl	8000a90 <oledc_more_arg_commands>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4818      	ldr	r0, [pc, #96]	; (8000e20 <pixel+0xec>)
 8000dc0:	f000 fed2 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4815      	ldr	r0, [pc, #84]	; (8000e20 <pixel+0xec>)
 8000dca:	f000 fecd 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &cmd, 1);
 8000dce:	f107 030f 	add.w	r3, r7, #15
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	69b8      	ldr	r0, [r7, #24]
 8000dd8:	f002 f906 	bl	8002fe8 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2102      	movs	r1, #2
 8000de0:	480f      	ldr	r0, [pc, #60]	; (8000e20 <pixel+0xec>)
 8000de2:	f000 fec1 	bl	8001b68 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &clr[0], 1);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2201      	movs	r2, #1
 8000dec:	4619      	mov	r1, r3
 8000dee:	69b8      	ldr	r0, [r7, #24]
 8000df0:	f002 f8fa 	bl	8002fe8 <HAL_SPI_Transmit_IT>
    HAL_SPI_Transmit_IT(hspi1, &clr[1], 1);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	3301      	adds	r3, #1
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	69b8      	ldr	r0, [r7, #24]
 8000e00:	f002 f8f2 	bl	8002fe8 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2101      	movs	r1, #1
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <pixel+0xec>)
 8000e0a:	f000 fead 	bl	8001b68 <HAL_GPIO_WritePin>
 8000e0e:	e000      	b.n	8000e12 <pixel+0xde>
        return;
 8000e10:	bf00      	nop
}
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000004 	.word	0x20000004
 8000e20:	48000400 	.word	0x48000400

08000e24 <character>:

void character ( oledc_t *ctx, uint16_t ch , SPI_HandleTypeDef *hspi1) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	; 0x38
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	817b      	strh	r3, [r7, #10]
    uint8_t     ch_width = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t     x_cnt;
    uint8_t     y_cnt;
    uint16_t    x = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t    y = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t    tmp;
    uint8_t     temp = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t     mask = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    uint32_t    offset;
    const uint8_t *ch_table;
    const uint8_t *ch_bitmap;

    if( ch < ctx->font_first_char )
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	891b      	ldrh	r3, [r3, #8]
 8000e50:	897a      	ldrh	r2, [r7, #10]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	f0c0 8087 	bcc.w	8000f66 <character+0x142>
        return;

    if( ch > ctx->font_last_char )
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	895b      	ldrh	r3, [r3, #10]
 8000e5c:	897a      	ldrh	r2, [r7, #10]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	f200 8083 	bhi.w	8000f6a <character+0x146>
        return;

    offset = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
    tmp = (ch - ctx->font_first_char) << 2;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	891b      	ldrh	r3, [r3, #8]
 8000e6c:	897a      	ldrh	r2, [r7, #10]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	837b      	strh	r3, [r7, #26]
    ch_table = ctx->font_obj + 8 + tmp;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	8b7b      	ldrh	r3, [r7, #26]
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	4413      	add	r3, r2
 8000e80:	617b      	str	r3, [r7, #20]
    ch_width = *ch_table;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    offset = (uint32_t)ch_table[1] + ((uint32_t)ch_table[2] << 8) + ((uint32_t)ch_table[3] << 16);
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3302      	adds	r3, #2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	441a      	add	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3303      	adds	r3, #3
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	041b      	lsls	r3, r3, #16
 8000ea4:	4413      	add	r3, r2
 8000ea6:	61fb      	str	r3, [r7, #28]

    ch_bitmap = ctx->font_obj + offset;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	4413      	add	r3, r2
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24

    y = ctx->y_cord;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	8a1b      	ldrh	r3, [r3, #16]
 8000eb6:	857b      	strh	r3, [r7, #42]	; 0x2a
    for (y_cnt = 0; y_cnt < ctx->font_height; y_cnt++) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000ebe:	e045      	b.n	8000f4c <character+0x128>
        x = ctx->x_cord;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	89db      	ldrh	r3, [r3, #14]
 8000ec4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        mask = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        for( x_cnt = 0; x_cnt < ch_width; x_cnt++ ) {
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ed2:	e02d      	b.n	8000f30 <character+0x10c>
            if( !mask ) {
 8000ed4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d108      	bne.n	8000eee <character+0xca>
                temp = *ch_bitmap++;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	627a      	str	r2, [r7, #36]	; 0x24
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                mask = 0x01;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            }
            if( temp & mask )
 8000eee:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000ef2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00b      	beq.n	8000f16 <character+0xf2>
                 pixel( ctx, x, y, ctx->font_color, hspi1);
 8000efe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f00:	b2d9      	uxtb	r1, r3
 8000f02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	8898      	ldrh	r0, [r3, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff ff0f 	bl	8000d34 <pixel>

            x++;
 8000f16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f18:	3301      	adds	r3, #1
 8000f1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
            mask <<= 1;
 8000f1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        for( x_cnt = 0; x_cnt < ch_width; x_cnt++ ) {
 8000f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3cb      	bcc.n	8000ed4 <character+0xb0>
        }
        y++;
 8000f3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f3e:	3301      	adds	r3, #1
 8000f40:	857b      	strh	r3, [r7, #42]	; 0x2a
    for (y_cnt = 0; y_cnt < ctx->font_height; y_cnt++) {
 8000f42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f46:	3301      	adds	r3, #1
 8000f48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000f4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	899b      	ldrh	r3, [r3, #12]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3b2      	bcc.n	8000ec0 <character+0x9c>
    }
    ctx->x_cord = x + 1;
 8000f5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	81da      	strh	r2, [r3, #14]
 8000f64:	e002      	b.n	8000f6c <character+0x148>
        return;
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <character+0x148>
        return;
 8000f6a:	bf00      	nop
}
 8000f6c:	3730      	adds	r7, #48	; 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <oledc_rectangle>:
        tmp += 2;
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
}

void oledc_rectangle (uint8_t col_off, uint8_t row_off, uint8_t col_end, uint8_t row_end, uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000f72:	b590      	push	{r4, r7, lr}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af02      	add	r7, sp, #8
 8000f78:	4604      	mov	r4, r0
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4623      	mov	r3, r4
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4603      	mov	r3, r0
 8000f86:	71bb      	strb	r3, [r7, #6]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	717b      	strb	r3, [r7, #5]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	713b      	strb	r3, [r7, #4]
    box_area(col_off, row_off, col_end, row_end, color, hspi1);
 8000f90:	793c      	ldrb	r4, [r7, #4]
 8000f92:	797a      	ldrb	r2, [r7, #5]
 8000f94:	79b9      	ldrb	r1, [r7, #6]
 8000f96:	79f8      	ldrb	r0, [r7, #7]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	8b3b      	ldrh	r3, [r7, #24]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	f7ff fdc5 	bl	8000b30 <box_area>
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}

08000fae <oledc_numbers_fade>:

void oledc_numbers_fade(oledc_t *oledc, uint8_t* numbers, SPI_HandleTypeDef *hspi1) {
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b088      	sub	sp, #32
 8000fb2:	af02      	add	r7, sp, #8
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	  for (int i = 40; i <= OLEDC_MAX; i += 5) {
 8000fba:	2328      	movs	r3, #40	; 0x28
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e02f      	b.n	8001020 <oledc_numbers_fade+0x72>
		  if (i+14 < OLEDC_MAX) {
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	2b51      	cmp	r3, #81	; 0x51
 8000fc4:	dc10      	bgt.n	8000fe8 <oledc_numbers_fade+0x3a>
			  oledc_rectangle(40, i, 70, i+14, 0xF800, hspi1);
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	b2d9      	uxtb	r1, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	330e      	adds	r3, #14
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	2246      	movs	r2, #70	; 0x46
 8000fe0:	2028      	movs	r0, #40	; 0x28
 8000fe2:	f7ff ffc6 	bl	8000f72 <oledc_rectangle>
 8000fe6:	e00b      	b.n	8001000 <oledc_numbers_fade+0x52>
		  } else {
			  oledc_rectangle(40, i, 70, 96, 0xF800, hspi1);
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	b2d9      	uxtb	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2360      	movs	r3, #96	; 0x60
 8000ff8:	2246      	movs	r2, #70	; 0x46
 8000ffa:	2028      	movs	r0, #40	; 0x28
 8000ffc:	f7ff ffb9 	bl	8000f72 <oledc_rectangle>
		  }
		  oledc_text(oledc, numbers, 40, i, hspi1);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	2228      	movs	r2, #40	; 0x28
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f7ff fe2e 	bl	8000c70 <oledc_text>
		  HAL_Delay(200);
 8001014:	20c8      	movs	r0, #200	; 0xc8
 8001016:	f000 fa89 	bl	800152c <HAL_Delay>
	  for (int i = 40; i <= OLEDC_MAX; i += 5) {
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3305      	adds	r3, #5
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b60      	cmp	r3, #96	; 0x60
 8001024:	ddcc      	ble.n	8000fc0 <oledc_numbers_fade+0x12>
	  }
}
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <oledc_text_fade>:

void oledc_text_fade(oledc_t *oledc, uint8_t* text, SPI_HandleTypeDef *hspi1) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af02      	add	r7, sp, #8
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	  for (int i = 20; i <= OLEDC_MAX; i += 4) {
 800103c:	2314      	movs	r3, #20
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e01c      	b.n	800107c <oledc_text_fade+0x4c>
		  oledc_rectangle(i-4, 20, 96, 39, 0xF800, hspi1);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	3b04      	subs	r3, #4
 8001048:	b2d8      	uxtb	r0, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2327      	movs	r3, #39	; 0x27
 8001056:	2260      	movs	r2, #96	; 0x60
 8001058:	2114      	movs	r1, #20
 800105a:	f7ff ff8a 	bl	8000f72 <oledc_rectangle>
		  oledc_text(oledc, text, i, 20, hspi1);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	b29a      	uxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2314      	movs	r3, #20
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff fe00 	bl	8000c70 <oledc_text>
		  HAL_Delay(100);
 8001070:	2064      	movs	r0, #100	; 0x64
 8001072:	f000 fa5b 	bl	800152c <HAL_Delay>
	  for (int i = 20; i <= OLEDC_MAX; i += 4) {
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3304      	adds	r3, #4
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b60      	cmp	r3, #96	; 0x60
 8001080:	dddf      	ble.n	8001042 <oledc_text_fade+0x12>
	  }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <oledc_update_number>:

void oledc_update_number(oledc_t *oledc, uint8_t* numbers, SPI_HandleTypeDef *hspi1) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af02      	add	r7, sp, #8
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	oledc_rectangle (40, 40, 70, 70, 0xF800, hspi1);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2346      	movs	r3, #70	; 0x46
 80010a4:	2246      	movs	r2, #70	; 0x46
 80010a6:	2128      	movs	r1, #40	; 0x28
 80010a8:	2028      	movs	r0, #40	; 0x28
 80010aa:	f7ff ff62 	bl	8000f72 <oledc_rectangle>
	oledc_text(oledc, numbers, 40, 40, hspi1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2328      	movs	r3, #40	; 0x28
 80010b4:	2228      	movs	r2, #40	; 0x28
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f7ff fdd9 	bl	8000c70 <oledc_text>
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <oledc_change_mode>:


void oledc_change_mode(oledc_t *oledc, uint8_t *numbers, uint8_t *text, SPI_HandleTypeDef *hspi1) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
	uint8_t pulse[] = "PULSE";
 80010d6:	4a2b      	ldr	r2, [pc, #172]	; (8001184 <oledc_change_mode+0xbc>)
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e0:	6018      	str	r0, [r3, #0]
 80010e2:	3304      	adds	r3, #4
 80010e4:	8019      	strh	r1, [r3, #0]
	uint8_t oxygen[] = "OXYGEN";
 80010e6:	4a28      	ldr	r2, [pc, #160]	; (8001188 <oledc_change_mode+0xc0>)
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f0:	6018      	str	r0, [r3, #0]
 80010f2:	3304      	adds	r3, #4
 80010f4:	8019      	strh	r1, [r3, #0]
 80010f6:	3302      	adds	r3, #2
 80010f8:	0c0a      	lsrs	r2, r1, #16
 80010fa:	701a      	strb	r2, [r3, #0]

	if (strcmp(text, pulse) == 0) {
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	4619      	mov	r1, r3
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff f862 	bl	80001cc <strcmp>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d11b      	bne.n	8001146 <oledc_change_mode+0x7e>
		oledc_numbers_fade(oledc, numbers, hspi1);
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff ff4b 	bl	8000fae <oledc_numbers_fade>
		oledc_text_fade(oledc, text, hspi1);
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff ff87 	bl	8001030 <oledc_text_fade>
		oledc_text(oledc, numbers, 40, 40, hspi1);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2328      	movs	r3, #40	; 0x28
 8001128:	2228      	movs	r2, #40	; 0x28
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f7ff fd9f 	bl	8000c70 <oledc_text>
		oledc_text(oledc, oxygen, 20, 20, hspi1);
 8001132:	f107 0110 	add.w	r1, r7, #16
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2314      	movs	r3, #20
 800113c:	2214      	movs	r2, #20
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff fd96 	bl	8000c70 <oledc_text>
		oledc_numbers_fade(oledc, numbers, hspi1);
		oledc_text_fade(oledc, text, hspi1);
		oledc_text(oledc, numbers, 40, 40, hspi1);
		oledc_text(oledc, pulse, 20, 20, hspi1);
	}
}
 8001144:	e01a      	b.n	800117c <oledc_change_mode+0xb4>
		oledc_numbers_fade(oledc, numbers, hspi1);
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff ff2f 	bl	8000fae <oledc_numbers_fade>
		oledc_text_fade(oledc, text, hspi1);
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f7ff ff6b 	bl	8001030 <oledc_text_fade>
		oledc_text(oledc, numbers, 40, 40, hspi1);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2328      	movs	r3, #40	; 0x28
 8001160:	2228      	movs	r2, #40	; 0x28
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff fd83 	bl	8000c70 <oledc_text>
		oledc_text(oledc, pulse, 20, 20, hspi1);
 800116a:	f107 0118 	add.w	r1, r7, #24
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2314      	movs	r3, #20
 8001174:	2214      	movs	r2, #20
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff fd7a 	bl	8000c70 <oledc_text>
}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08004d04 	.word	0x08004d04
 8001188:	08004d0c 	.word	0x08004d0c

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_MspInit+0x44>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_MspInit+0x44>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6613      	str	r3, [r2, #96]	; 0x60
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_MspInit+0x44>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x44>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x44>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6593      	str	r3, [r2, #88]	; 0x58
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x44>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <HAL_SPI_MspInit+0x8c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12f      	bne.n	8001256 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_SPI_MspInit+0x90>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <HAL_SPI_MspInit+0x90>)
 80011fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_SPI_MspInit+0x90>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_SPI_MspInit+0x90>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <HAL_SPI_MspInit+0x90>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_SPI_MspInit+0x90>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_SDO_Pin|OLED_SDI_Pin;
 8001226:	2338      	movs	r3, #56	; 0x38
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001236:	2305      	movs	r3, #5
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <HAL_SPI_MspInit+0x94>)
 8001242:	f000 fb27 	bl	8001894 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2023      	movs	r0, #35	; 0x23
 800124c:	f000 fa6d 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001250:	2023      	movs	r0, #35	; 0x23
 8001252:	f000 fa86 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40013000 	.word	0x40013000
 8001264:	40021000 	.word	0x40021000
 8001268:	48000400 	.word	0x48000400

0800126c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b09e      	sub	sp, #120	; 0x78
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	2254      	movs	r2, #84	; 0x54
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f003 fcef 	bl	8004c70 <memset>
  if(huart->Instance==USART2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a2c      	ldr	r2, [pc, #176]	; (8001348 <HAL_UART_MspInit+0xdc>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d150      	bne.n	800133e <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800129c:	2302      	movs	r3, #2
 800129e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fb11 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012b4:	f7ff fb1e 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_UART_MspInit+0xe0>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	4a23      	ldr	r2, [pc, #140]	; (800134c <HAL_UART_MspInit+0xe0>)
 80012be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c2:	6593      	str	r3, [r2, #88]	; 0x58
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_UART_MspInit+0xe0>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_UART_MspInit+0xe0>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HAL_UART_MspInit+0xe0>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_UART_MspInit+0xe0>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80012e8:	2304      	movs	r3, #4
 80012ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f8:	2307      	movs	r3, #7
 80012fa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f000 fac5 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800130a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800130e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800131c:	2303      	movs	r3, #3
 800131e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f000 fab3 	bl	8001894 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2026      	movs	r0, #38	; 0x26
 8001334:	f000 f9f9 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001338:	2026      	movs	r0, #38	; 0x26
 800133a:	f000 fa12 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3778      	adds	r7, #120	; 0x78
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40004400 	.word	0x40004400
 800134c:	40021000 	.word	0x40021000

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 f8a6 	bl	80014ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <SPI1_IRQHandler+0x10>)
 80013aa:	f001 fea9 	bl	8003100 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000038 	.word	0x20000038

080013b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <USART2_IRQHandler+0x10>)
 80013be:	f002 fa3f 	bl	8003840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000009c 	.word	0x2000009c

080013cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001428 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f4:	f7ff ffea 	bl	80013cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <LoopForever+0x6>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	; (8001430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <LoopForever+0xe>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	; (800143c <LoopForever+0x16>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f003 fc2f 	bl	8004c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001422:	f7ff f85b 	bl	80004dc <main>

08001426 <LoopForever>:

LoopForever:
    b LoopForever
 8001426:	e7fe      	b.n	8001426 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001428:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001434:	08005d40 	.word	0x08005d40
  ldr r2, =_sbss
 8001438:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800143c:	20000180 	.word	0x20000180

08001440 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC1_IRQHandler>

08001442 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 f961 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f80e 	bl	8001474 <HAL_InitTick>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	e001      	b.n	8001468 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001464:	f7ff fe92 	bl	800118c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001468:	79fb      	ldrb	r3, [r7, #7]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_InitTick+0x6c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_InitTick+0x70>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_InitTick+0x6c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	fbb3 f3f1 	udiv	r3, r3, r1
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f96d 	bl	800177e <HAL_SYSTICK_Config>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d809      	bhi.n	80014c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f000 f937 	bl	800172a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_InitTick+0x74>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e007      	b.n	80014d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e004      	b.n	80014d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e001      	b.n	80014d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000018 	.word	0x20000018
 80014e4:	20000010 	.word	0x20000010
 80014e8:	20000014 	.word	0x20000014

080014ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x20>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x24>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a04      	ldr	r2, [pc, #16]	; (8001510 <HAL_IncTick+0x24>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000018 	.word	0x20000018
 8001510:	2000017c 	.word	0x2000017c

08001514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_GetTick+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000017c 	.word	0x2000017c

0800152c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001534:	f7ff ffee 	bl	8001514 <HAL_GetTick>
 8001538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001544:	d005      	beq.n	8001552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_Delay+0x44>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001552:	bf00      	nop
 8001554:	f7ff ffde 	bl	8001514 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d8f7      	bhi.n	8001554 <HAL_Delay+0x28>
  {
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000018 	.word	0x20000018

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db0b      	blt.n	8001602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <__NVIC_EnableIRQ+0x38>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2001      	movs	r0, #1
 80015fa:	fa00 f202 	lsl.w	r2, r0, r2
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e100 	.word	0xe000e100

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	; (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	; (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f1c3 0307 	rsb	r3, r3, #7
 8001682:	2b04      	cmp	r3, #4
 8001684:	bf28      	it	cs
 8001686:	2304      	movcs	r3, #4
 8001688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3304      	adds	r3, #4
 800168e:	2b06      	cmp	r3, #6
 8001690:	d902      	bls.n	8001698 <NVIC_EncodePriority+0x30>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3b03      	subs	r3, #3
 8001696:	e000      	b.n	800169a <NVIC_EncodePriority+0x32>
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	f04f 32ff 	mov.w	r2, #4294967295
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	4313      	orrs	r3, r2
         );
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ff8e 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff29 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff3e 	bl	80015bc <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff8e 	bl	8001668 <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5d 	bl	8001614 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff31 	bl	80015d8 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa2 	bl	80016d0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001796:	b480      	push	{r7}
 8001798:	b085      	sub	sp, #20
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d008      	beq.n	80017c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2204      	movs	r2, #4
 80017b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e022      	b.n	8001806 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 020e 	bic.w	r2, r2, #14
 80017ce:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	f003 021c 	and.w	r2, r3, #28
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d005      	beq.n	8001836 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e029      	b.n	800188a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 020e 	bic.w	r2, r2, #14
 8001844:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0201 	bic.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f003 021c 	and.w	r2, r3, #28
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	2101      	movs	r1, #1
 8001864:	fa01 f202 	lsl.w	r2, r1, r2
 8001868:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
    }
  }
  return status;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a2:	e148      	b.n	8001b36 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 813a 	beq.w	8001b30 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <HAL_GPIO_Init+0x40>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190a:	2201      	movs	r2, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 0201 	and.w	r2, r3, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d017      	beq.n	8001972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d123      	bne.n	80019c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0203 	and.w	r2, r3, #3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8094 	beq.w	8001b30 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a08:	4b52      	ldr	r3, [pc, #328]	; (8001b54 <HAL_GPIO_Init+0x2c0>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0c:	4a51      	ldr	r2, [pc, #324]	; (8001b54 <HAL_GPIO_Init+0x2c0>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6613      	str	r3, [r2, #96]	; 0x60
 8001a14:	4b4f      	ldr	r3, [pc, #316]	; (8001b54 <HAL_GPIO_Init+0x2c0>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a20:	4a4d      	ldr	r2, [pc, #308]	; (8001b58 <HAL_GPIO_Init+0x2c4>)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1d4>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a43      	ldr	r2, [pc, #268]	; (8001b5c <HAL_GPIO_Init+0x2c8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1d0>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a42      	ldr	r2, [pc, #264]	; (8001b60 <HAL_GPIO_Init+0x2cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1cc>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e004      	b.n	8001a6a <HAL_GPIO_Init+0x1d6>
 8001a60:	2307      	movs	r3, #7
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_Init+0x1d6>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_GPIO_Init+0x1d6>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	f002 0203 	and.w	r2, r2, #3
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4093      	lsls	r3, r2
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a7a:	4937      	ldr	r1, [pc, #220]	; (8001b58 <HAL_GPIO_Init+0x2c4>)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aac:	4a2d      	ldr	r2, [pc, #180]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad6:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b00:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f aeaf 	bne.w	80018a4 <HAL_GPIO_Init+0x10>
  }
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	48000800 	.word	0x48000800
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40007000 	.word	0x40007000

08001bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc2:	d130      	bne.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd0:	d038      	beq.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bda:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2232      	movs	r2, #50	; 0x32
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0c9b      	lsrs	r3, r3, #18
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf8:	e002      	b.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0c:	d102      	bne.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f2      	bne.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c20:	d110      	bne.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e00f      	b.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c32:	d007      	beq.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c3c:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40007000 	.word	0x40007000
 8001c58:	20000010 	.word	0x20000010
 8001c5c:	431bde83 	.word	0x431bde83

08001c60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f000 bc02 	b.w	8002478 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c74:	4b96      	ldr	r3, [pc, #600]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c7e:	4b94      	ldr	r3, [pc, #592]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80e4 	beq.w	8001e5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_RCC_OscConfig+0x4c>
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	f040 808b 	bne.w	8001dba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	f040 8087 	bne.w	8001dba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cac:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x64>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e3d9      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	4b81      	ldr	r3, [pc, #516]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_RCC_OscConfig+0x7e>
 8001cd4:	4b7e      	ldr	r3, [pc, #504]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cdc:	e005      	b.n	8001cea <HAL_RCC_OscConfig+0x8a>
 8001cde:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d223      	bcs.n	8001d36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fd8c 	bl	8002810 <RCC_SetFlashLatencyFromMSIRange>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e3ba      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d02:	4b73      	ldr	r3, [pc, #460]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a72      	ldr	r2, [pc, #456]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	496d      	ldr	r1, [pc, #436]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d20:	4b6b      	ldr	r3, [pc, #428]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	4968      	ldr	r1, [pc, #416]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e025      	b.n	8001d82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d36:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a65      	ldr	r2, [pc, #404]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4960      	ldr	r1, [pc, #384]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d54:	4b5e      	ldr	r3, [pc, #376]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	495b      	ldr	r1, [pc, #364]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fd4c 	bl	8002810 <RCC_SetFlashLatencyFromMSIRange>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e37a      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d82:	f000 fc81 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b51      	ldr	r3, [pc, #324]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	4950      	ldr	r1, [pc, #320]	; (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <HAL_RCC_OscConfig+0x278>)
 8001da0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001da2:	4b4e      	ldr	r3, [pc, #312]	; (8001edc <HAL_RCC_OscConfig+0x27c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fb64 	bl	8001474 <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d052      	beq.n	8001e5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	e35e      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d032      	beq.n	8001e28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dc2:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a42      	ldr	r2, [pc, #264]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fba1 	bl	8001514 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fb9d 	bl	8001514 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e347      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	f043 0308 	orr.w	r3, r3, #8
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4930      	ldr	r1, [pc, #192]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	492b      	ldr	r1, [pc, #172]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
 8001e26:	e01a      	b.n	8001e5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a28      	ldr	r2, [pc, #160]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fb6e 	bl	8001514 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fb6a 	bl	8001514 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e314      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1dc>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d073      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_OscConfig+0x21c>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d10e      	bne.n	8001e94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d063      	beq.n	8001f50 <HAL_RCC_OscConfig+0x2f0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d15f      	bne.n	8001f50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e2f1      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_OscConfig+0x24c>
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e025      	b.n	8001ef8 <HAL_RCC_OscConfig+0x298>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb4:	d114      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x280>
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a02      	ldr	r2, [pc, #8]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e013      	b.n	8001ef8 <HAL_RCC_OscConfig+0x298>
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08005ce8 	.word	0x08005ce8
 8001ed8:	20000010 	.word	0x20000010
 8001edc:	20000014 	.word	0x20000014
 8001ee0:	4ba0      	ldr	r3, [pc, #640]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a9f      	ldr	r2, [pc, #636]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b9d      	ldr	r3, [pc, #628]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a9c      	ldr	r2, [pc, #624]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fb08 	bl	8001514 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fb04 	bl	8001514 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e2ae      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1a:	4b92      	ldr	r3, [pc, #584]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x2a8>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff faf4 	bl	8001514 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff faf0 	bl	8001514 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e29a      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f42:	4b88      	ldr	r3, [pc, #544]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2d0>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d060      	beq.n	8002020 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x310>
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d119      	bne.n	8001f9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d116      	bne.n	8001f9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f70:	4b7c      	ldr	r3, [pc, #496]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_OscConfig+0x328>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e277      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b76      	ldr	r3, [pc, #472]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	4973      	ldr	r1, [pc, #460]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f9c:	e040      	b.n	8002020 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d023      	beq.n	8001fee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff faaf 	bl	8001514 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff faab 	bl	8001514 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e255      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fcc:	4b65      	ldr	r3, [pc, #404]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b62      	ldr	r3, [pc, #392]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	495f      	ldr	r1, [pc, #380]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
 8001fec:	e018      	b.n	8002020 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5c      	ldr	r2, [pc, #368]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fa8b 	bl	8001514 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff fa87 	bl	8001514 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e231      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002014:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d03c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01c      	beq.n	800206e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002034:	4b4b      	ldr	r3, [pc, #300]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8002036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203a:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff fa66 	bl	8001514 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff fa62 	bl	8001514 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e20c      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800205e:	4b41      	ldr	r3, [pc, #260]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8002060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ef      	beq.n	800204c <HAL_RCC_OscConfig+0x3ec>
 800206c:	e01b      	b.n	80020a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002074:	4a3b      	ldr	r2, [pc, #236]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7ff fa49 	bl	8001514 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002086:	f7ff fa45 	bl	8001514 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1ef      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 800209a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ef      	bne.n	8002086 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80a6 	beq.w	8002200 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b4:	2300      	movs	r3, #0
 80020b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a26      	ldr	r2, [pc, #152]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <HAL_RCC_OscConfig+0x508>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d118      	bne.n	800211e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ec:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_RCC_OscConfig+0x508>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_RCC_OscConfig+0x508>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f8:	f7ff fa0c 	bl	8001514 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7ff fa08 	bl	8001514 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1b2      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_RCC_OscConfig+0x508>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d108      	bne.n	8002138 <HAL_RCC_OscConfig+0x4d8>
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002136:	e029      	b.n	800218c <HAL_RCC_OscConfig+0x52c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d115      	bne.n	800216c <HAL_RCC_OscConfig+0x50c>
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	4a03      	ldr	r2, [pc, #12]	; (8002164 <HAL_RCC_OscConfig+0x504>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002160:	e014      	b.n	800218c <HAL_RCC_OscConfig+0x52c>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
 800216c:	4b9a      	ldr	r3, [pc, #616]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002172:	4a99      	ldr	r2, [pc, #612]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800217c:	4b96      	ldr	r3, [pc, #600]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	4a95      	ldr	r2, [pc, #596]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d016      	beq.n	80021c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff f9be 	bl	8001514 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff f9ba 	bl	8001514 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e162      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b2:	4b89      	ldr	r3, [pc, #548]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ed      	beq.n	800219c <HAL_RCC_OscConfig+0x53c>
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7ff f9a7 	bl	8001514 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff f9a3 	bl	8001514 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e14b      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e0:	4b7d      	ldr	r3, [pc, #500]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ed      	bne.n	80021ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ee:	7ffb      	ldrb	r3, [r7, #31]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f4:	4b78      	ldr	r3, [pc, #480]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	4a77      	ldr	r2, [pc, #476]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 80021fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d03c      	beq.n	8002286 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01c      	beq.n	800224e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002214:	4b70      	ldr	r3, [pc, #448]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002216:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800221a:	4a6f      	ldr	r2, [pc, #444]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7ff f976 	bl	8001514 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800222c:	f7ff f972 	bl	8001514 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e11c      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800223e:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002240:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ef      	beq.n	800222c <HAL_RCC_OscConfig+0x5cc>
 800224c:	e01b      	b.n	8002286 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800224e:	4b62      	ldr	r3, [pc, #392]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002254:	4a60      	ldr	r2, [pc, #384]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7ff f959 	bl	8001514 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002266:	f7ff f955 	bl	8001514 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0ff      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002278:	4b57      	ldr	r3, [pc, #348]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 800227a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1ef      	bne.n	8002266 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80f3 	beq.w	8002476 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	2b02      	cmp	r3, #2
 8002296:	f040 80c9 	bne.w	800242c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800229a:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f003 0203 	and.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d12c      	bne.n	8002308 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	3b01      	subs	r3, #1
 80022ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d123      	bne.n	8002308 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d11b      	bne.n	8002308 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d113      	bne.n	8002308 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	3b01      	subs	r3, #1
 80022ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d109      	bne.n	8002308 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	3b01      	subs	r3, #1
 8002302:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d06b      	beq.n	80023e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d062      	beq.n	80023d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800230e:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0ac      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002324:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002328:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800232a:	f7ff f8f3 	bl	8001514 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7ff f8ef 	bl	8001514 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e099      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_RCC_OscConfig+0x77c>)
 8002356:	4013      	ands	r3, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002360:	3a01      	subs	r2, #1
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	4311      	orrs	r1, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800236a:	0212      	lsls	r2, r2, #8
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002372:	0852      	lsrs	r2, r2, #1
 8002374:	3a01      	subs	r2, #1
 8002376:	0552      	lsls	r2, r2, #21
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800237e:	0852      	lsrs	r2, r2, #1
 8002380:	3a01      	subs	r2, #1
 8002382:	0652      	lsls	r2, r2, #25
 8002384:	4311      	orrs	r1, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800238a:	06d2      	lsls	r2, r2, #27
 800238c:	430a      	orrs	r2, r1
 800238e:	4912      	ldr	r1, [pc, #72]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002390:	4313      	orrs	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 800239a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 80023a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ac:	f7ff f8b2 	bl	8001514 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7ff f8ae 	bl	8001514 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e058      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_RCC_OscConfig+0x778>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023d2:	e050      	b.n	8002476 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e04f      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
 80023d8:	40021000 	.word	0x40021000
 80023dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d144      	bne.n	8002476 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a23      	ldr	r2, [pc, #140]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 80023f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a20      	ldr	r2, [pc, #128]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002402:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002404:	f7ff f886 	bl	8001514 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7ff f882 	bl	8001514 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e02c      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x7ac>
 800242a:	e024      	b.n	8002476 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d01f      	beq.n	8002472 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 8002438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800243c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7ff f869 	bl	8001514 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff f865 	bl	8001514 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e00f      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	4905      	ldr	r1, [pc, #20]	; (8002480 <HAL_RCC_OscConfig+0x820>)
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_OscConfig+0x824>)
 800246c:	4013      	ands	r3, r2
 800246e:	60cb      	str	r3, [r1, #12]
 8002470:	e001      	b.n	8002476 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	feeefffc 	.word	0xfeeefffc

08002488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0e7      	b.n	800266c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800249c:	4b75      	ldr	r3, [pc, #468]	; (8002674 <HAL_RCC_ClockConfig+0x1ec>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d910      	bls.n	80024cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b72      	ldr	r3, [pc, #456]	; (8002674 <HAL_RCC_ClockConfig+0x1ec>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	4970      	ldr	r1, [pc, #448]	; (8002674 <HAL_RCC_ClockConfig+0x1ec>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b6e      	ldr	r3, [pc, #440]	; (8002674 <HAL_RCC_ClockConfig+0x1ec>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0cf      	b.n	800266c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d908      	bls.n	80024fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b63      	ldr	r3, [pc, #396]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4960      	ldr	r1, [pc, #384]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d04c      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250e:	4b5a      	ldr	r3, [pc, #360]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d121      	bne.n	800255e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e0a6      	b.n	800266c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002526:	4b54      	ldr	r3, [pc, #336]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d115      	bne.n	800255e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e09a      	b.n	800266c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800253e:	4b4e      	ldr	r3, [pc, #312]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e08e      	b.n	800266c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254e:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e086      	b.n	800266c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800255e:	4b46      	ldr	r3, [pc, #280]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f023 0203 	bic.w	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4943      	ldr	r1, [pc, #268]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002570:	f7fe ffd0 	bl	8001514 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	e00a      	b.n	800258e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002578:	f7fe ffcc 	bl	8001514 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e06e      	b.n	800266c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 020c 	and.w	r2, r3, #12
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	429a      	cmp	r2, r3
 800259e:	d1eb      	bne.n	8002578 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d010      	beq.n	80025ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d208      	bcs.n	80025ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	492b      	ldr	r1, [pc, #172]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ce:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_RCC_ClockConfig+0x1ec>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d210      	bcs.n	80025fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_ClockConfig+0x1ec>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 0207 	bic.w	r2, r3, #7
 80025e4:	4923      	ldr	r1, [pc, #140]	; (8002674 <HAL_RCC_ClockConfig+0x1ec>)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ec:	4b21      	ldr	r3, [pc, #132]	; (8002674 <HAL_RCC_ClockConfig+0x1ec>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e036      	b.n	800266c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	4918      	ldr	r1, [pc, #96]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4910      	ldr	r1, [pc, #64]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800263c:	f000 f824 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_RCC_ClockConfig+0x1f0>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	490b      	ldr	r1, [pc, #44]	; (800267c <HAL_RCC_ClockConfig+0x1f4>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
 8002658:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1f8>)
 800265a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1fc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe ff07 	bl	8001474 <HAL_InitTick>
 8002666:	4603      	mov	r3, r0
 8002668:	72fb      	strb	r3, [r7, #11]

  return status;
 800266a:	7afb      	ldrb	r3, [r7, #11]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40022000 	.word	0x40022000
 8002678:	40021000 	.word	0x40021000
 800267c:	08005ce8 	.word	0x08005ce8
 8002680:	20000010 	.word	0x20000010
 8002684:	20000014 	.word	0x20000014

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002696:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a0:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x34>
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d121      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d11e      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026bc:	4b34      	ldr	r3, [pc, #208]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e005      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026d8:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026e4:	4a2b      	ldr	r2, [pc, #172]	; (8002794 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_RCC_GetSysClockFreq+0x110>)
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	e004      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d101      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_RCC_GetSysClockFreq+0x114>)
 800270e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d134      	bne.n	8002780 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0xa6>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d003      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0xac>
 800272c:	e005      	b.n	800273a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_RCC_GetSysClockFreq+0x110>)
 8002730:	617b      	str	r3, [r7, #20]
      break;
 8002732:	e005      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_GetSysClockFreq+0x114>)
 8002736:	617b      	str	r3, [r7, #20]
      break;
 8002738:	e002      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	617b      	str	r3, [r7, #20]
      break;
 800273e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	3301      	adds	r3, #1
 800274c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	fb03 f202 	mul.w	r2, r3, r2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	0e5b      	lsrs	r3, r3, #25
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	3301      	adds	r3, #1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002780:	69bb      	ldr	r3, [r7, #24]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	; 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	08005d00 	.word	0x08005d00
 8002798:	00f42400 	.word	0x00f42400
 800279c:	007a1200 	.word	0x007a1200

080027a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000010 	.word	0x20000010

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4904      	ldr	r1, [pc, #16]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08005cf8 	.word	0x08005cf8

080027e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027e8:	f7ff ffda 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0adb      	lsrs	r3, r3, #11
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4904      	ldr	r1, [pc, #16]	; (800280c <HAL_RCC_GetPCLK2Freq+0x28>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	08005cf8 	.word	0x08005cf8

08002810 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002828:	f7ff f9b6 	bl	8001b98 <HAL_PWREx_GetVoltageRange>
 800282c:	6178      	str	r0, [r7, #20]
 800282e:	e014      	b.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283a:	6593      	str	r3, [r2, #88]	; 0x58
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002848:	f7ff f9a6 	bl	8001b98 <HAL_PWREx_GetVoltageRange>
 800284c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002860:	d10b      	bne.n	800287a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d919      	bls.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2ba0      	cmp	r3, #160	; 0xa0
 800286c:	d902      	bls.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800286e:	2302      	movs	r3, #2
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e013      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002874:	2301      	movs	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	e010      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d902      	bls.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002880:	2303      	movs	r3, #3
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	e00a      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d102      	bne.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800288c:	2302      	movs	r3, #2
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	e004      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d101      	bne.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 0207 	bic.w	r2, r3, #7
 80028a4:	4909      	ldr	r1, [pc, #36]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40022000 	.word	0x40022000

080028d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028d8:	2300      	movs	r3, #0
 80028da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028dc:	2300      	movs	r3, #0
 80028de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d031      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028f4:	d01a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80028f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028fa:	d814      	bhi.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002904:	d10f      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002906:	4b5d      	ldr	r3, [pc, #372]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4a5c      	ldr	r2, [pc, #368]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002912:	e00c      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3304      	adds	r3, #4
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f9ce 	bl	8002cbc <RCCEx_PLLSAI1_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002924:	e003      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	74fb      	strb	r3, [r7, #19]
      break;
 800292a:	e000      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800292c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10b      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002934:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	494e      	ldr	r1, [pc, #312]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800294a:	e001      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 809e 	beq.w	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002962:	4b46      	ldr	r3, [pc, #280]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002972:	2300      	movs	r3, #0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00d      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	4a3f      	ldr	r2, [pc, #252]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002982:	6593      	str	r3, [r2, #88]	; 0x58
 8002984:	4b3d      	ldr	r3, [pc, #244]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002990:	2301      	movs	r3, #1
 8002992:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002994:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a39      	ldr	r2, [pc, #228]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800299a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fdb8 	bl	8001514 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029a6:	e009      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a8:	f7fe fdb4 	bl	8001514 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d902      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	74fb      	strb	r3, [r7, #19]
        break;
 80029ba:	e005      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029bc:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ef      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d15a      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01e      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d019      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a16:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d016      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fd74 	bl	8001514 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7fe fd70 	bl	8001514 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d902      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	74fb      	strb	r3, [r7, #19]
            break;
 8002a46:	e006      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ec      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a5c:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	4904      	ldr	r1, [pc, #16]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a72:	e009      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	74bb      	strb	r3, [r7, #18]
 8002a78:	e006      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a88:	7c7b      	ldrb	r3, [r7, #17]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d105      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8e:	4b8a      	ldr	r3, [pc, #552]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	4a89      	ldr	r2, [pc, #548]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa6:	4b84      	ldr	r3, [pc, #528]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aac:	f023 0203 	bic.w	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4980      	ldr	r1, [pc, #512]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac8:	4b7b      	ldr	r3, [pc, #492]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f023 020c 	bic.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	4978      	ldr	r1, [pc, #480]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aea:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	496f      	ldr	r1, [pc, #444]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1a:	4967      	ldr	r1, [pc, #412]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b2e:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	495e      	ldr	r1, [pc, #376]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	4956      	ldr	r1, [pc, #344]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b72:	4b51      	ldr	r3, [pc, #324]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	494d      	ldr	r1, [pc, #308]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d028      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b94:	4b48      	ldr	r3, [pc, #288]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4945      	ldr	r1, [pc, #276]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb4:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a3f      	ldr	r2, [pc, #252]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bbe:	60d3      	str	r3, [r2, #12]
 8002bc0:	e011      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bca:	d10c      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f872 	bl	8002cbc <RCCEx_PLLSAI1_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d028      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bf2:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	492d      	ldr	r1, [pc, #180]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c10:	d106      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c12:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4a28      	ldr	r2, [pc, #160]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1c:	60d3      	str	r3, [r2, #12]
 8002c1e:	e011      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 f843 	bl	8002cbc <RCCEx_PLLSAI1_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01c      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c6e:	d10c      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	2102      	movs	r1, #2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f820 	bl	8002cbc <RCCEx_PLLSAI1_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	4904      	ldr	r1, [pc, #16]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cac:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000

08002cbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cca:	4b74      	ldr	r3, [pc, #464]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d018      	beq.n	8002d08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cd6:	4b71      	ldr	r3, [pc, #452]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0203 	and.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d10d      	bne.n	8002d02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cee:	4b6b      	ldr	r3, [pc, #428]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d047      	beq.n	8002d92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
 8002d06:	e044      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d018      	beq.n	8002d42 <RCCEx_PLLSAI1_Config+0x86>
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d825      	bhi.n	8002d60 <RCCEx_PLLSAI1_Config+0xa4>
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d002      	beq.n	8002d1e <RCCEx_PLLSAI1_Config+0x62>
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d009      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x74>
 8002d1c:	e020      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d1e:	4b5f      	ldr	r3, [pc, #380]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11d      	bne.n	8002d66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2e:	e01a      	b.n	8002d66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d30:	4b5a      	ldr	r3, [pc, #360]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d116      	bne.n	8002d6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d40:	e013      	b.n	8002d6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d42:	4b56      	ldr	r3, [pc, #344]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d4e:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d5e:	e006      	b.n	8002d6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      break;
 8002d64:	e004      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d66:	bf00      	nop
 8002d68:	e002      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e000      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10d      	bne.n	8002d92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d76:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	4943      	ldr	r1, [pc, #268]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d17c      	bne.n	8002e92 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d98:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a3f      	ldr	r2, [pc, #252]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da4:	f7fe fbb6 	bl	8001514 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002daa:	e009      	b.n	8002dc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dac:	f7fe fbb2 	bl	8001514 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d902      	bls.n	8002dc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002dbe:	e005      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dc0:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ef      	bne.n	8002dac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d15f      	bne.n	8002e92 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d110      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dd8:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002de0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6892      	ldr	r2, [r2, #8]
 8002de8:	0211      	lsls	r1, r2, #8
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68d2      	ldr	r2, [r2, #12]
 8002dee:	06d2      	lsls	r2, r2, #27
 8002df0:	430a      	orrs	r2, r1
 8002df2:	492a      	ldr	r1, [pc, #168]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	610b      	str	r3, [r1, #16]
 8002df8:	e027      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d112      	bne.n	8002e26 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	0211      	lsls	r1, r2, #8
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6912      	ldr	r2, [r2, #16]
 8002e16:	0852      	lsrs	r2, r2, #1
 8002e18:	3a01      	subs	r2, #1
 8002e1a:	0552      	lsls	r2, r2, #21
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	491f      	ldr	r1, [pc, #124]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	610b      	str	r3, [r1, #16]
 8002e24:	e011      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6892      	ldr	r2, [r2, #8]
 8002e36:	0211      	lsls	r1, r2, #8
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6952      	ldr	r2, [r2, #20]
 8002e3c:	0852      	lsrs	r2, r2, #1
 8002e3e:	3a01      	subs	r2, #1
 8002e40:	0652      	lsls	r2, r2, #25
 8002e42:	430a      	orrs	r2, r1
 8002e44:	4915      	ldr	r1, [pc, #84]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fe fb5d 	bl	8001514 <HAL_GetTick>
 8002e5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e5c:	e009      	b.n	8002e72 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e5e:	f7fe fb59 	bl	8001514 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d902      	bls.n	8002e72 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	73fb      	strb	r3, [r7, #15]
          break;
 8002e70:	e005      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ef      	beq.n	8002e5e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4903      	ldr	r1, [pc, #12]	; (8002e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e095      	b.n	8002fde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d108      	bne.n	8002ecc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec2:	d009      	beq.n	8002ed8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
 8002eca:	e005      	b.n	8002ed8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe f96e 	bl	80011d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f18:	d902      	bls.n	8002f20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e002      	b.n	8002f26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f2e:	d007      	beq.n	8002f40 <HAL_SPI_Init+0xa0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f38:	d002      	beq.n	8002f40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	ea42 0103 	orr.w	r1, r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	0c1b      	lsrs	r3, r3, #16
 8002f9c:	f003 0204 	and.w	r2, r3, #4
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fbc:	ea42 0103 	orr.w	r1, r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_SPI_Transmit_IT+0x1e>
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
    goto error;
 800300a:	e06d      	b.n	80030e8 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d002      	beq.n	800301e <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8003018:	2302      	movs	r3, #2
 800301a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800301c:	e064      	b.n	80030e8 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_SPI_Transmit_IT+0x44>
 8003028:	2302      	movs	r3, #2
 800302a:	e05e      	b.n	80030ea <HAL_SPI_Transmit_IT+0x102>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2203      	movs	r2, #3
 8003038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	88fa      	ldrh	r2, [r7, #6]
 8003052:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003078:	d903      	bls.n	8003082 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <HAL_SPI_Transmit_IT+0x110>)
 800307e:	651a      	str	r2, [r3, #80]	; 0x50
 8003080:	e002      	b.n	8003088 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <HAL_SPI_Transmit_IT+0x114>)
 8003086:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003090:	d10f      	bne.n	80030b2 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d007      	beq.n	80030d0 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80030e6:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	08003381 	.word	0x08003381
 80030fc:	0800333b 	.word	0x0800333b

08003100 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10e      	bne.n	8003140 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
    return;
 800313e:	e0ce      	b.n	80032de <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_SPI_IRQHandler+0x5e>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d004      	beq.n	800315e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
    return;
 800315c:	e0bf      	b.n	80032de <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <HAL_SPI_IRQHandler+0x7e>
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80b0 	beq.w	80032de <HAL_SPI_IRQHandler+0x1de>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80aa 	beq.w	80032de <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d023      	beq.n	80031dc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b03      	cmp	r3, #3
 800319e:	d011      	beq.n	80031c4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a4:	f043 0204 	orr.w	r2, r3, #4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	e00b      	b.n	80031dc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
        return;
 80031da:	e080      	b.n	80032de <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d014      	beq.n	8003210 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00c      	beq.n	8003234 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	f043 0208 	orr.w	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	2b00      	cmp	r3, #0
 800323a:	d04f      	beq.n	80032dc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800324a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d104      	bne.n	8003268 <HAL_SPI_IRQHandler+0x168>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d034      	beq.n	80032d2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0203 	bic.w	r2, r2, #3
 8003276:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	2b00      	cmp	r3, #0
 800327e:	d011      	beq.n	80032a4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <HAL_SPI_IRQHandler+0x1e4>)
 8003286:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fac0 	bl	8001812 <HAL_DMA_Abort_IT>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d016      	beq.n	80032da <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <HAL_SPI_IRQHandler+0x1e4>)
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe faaa 	bl	8001812 <HAL_DMA_Abort_IT>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80032d0:	e003      	b.n	80032da <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f812 	bl	80032fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80032d8:	e000      	b.n	80032dc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80032da:	bf00      	nop
    return;
 80032dc:	bf00      	nop
  }
}
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	08003311 	.word	0x08003311

080032e8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff ffe5 	bl	80032fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f98a 	bl	800368c <SPI_CloseTx_ISR>
  }
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	1c9a      	adds	r2, r3, #2
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f968 	bl	800368c <SPI_CloseTx_ISR>
  }
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033d4:	f7fe f89e 	bl	8001514 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	4413      	add	r3, r2
 80033e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033e4:	f7fe f896 	bl	8001514 <HAL_GetTick>
 80033e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033ea:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	015b      	lsls	r3, r3, #5
 80033f0:	0d1b      	lsrs	r3, r3, #20
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	fb02 f303 	mul.w	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033fa:	e054      	b.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d050      	beq.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003404:	f7fe f886 	bl	8001514 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	429a      	cmp	r2, r3
 8003412:	d902      	bls.n	800341a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d13d      	bne.n	8003496 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003428:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003432:	d111      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343c:	d004      	beq.n	8003448 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003446:	d107      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003456:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003460:	d10f      	bne.n	8003482 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003480:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e017      	b.n	80034c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4013      	ands	r3, r2
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d19b      	bne.n	80033fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000010 	.word	0x20000010

080034d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034e6:	f7fe f815 	bl	8001514 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	4413      	add	r3, r2
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80034f6:	f7fe f80d 	bl	8001514 <HAL_GetTick>
 80034fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003504:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00da      	lsls	r2, r3, #3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	0d1b      	lsrs	r3, r3, #20
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800351c:	e060      	b.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003524:	d107      	bne.n	8003536 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003534:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d050      	beq.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800353e:	f7fd ffe9 	bl	8001514 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354a:	429a      	cmp	r2, r3
 800354c:	d902      	bls.n	8003554 <SPI_WaitFifoStateUntilTimeout+0x80>
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	2b00      	cmp	r3, #0
 8003552:	d13d      	bne.n	80035d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003562:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356c:	d111      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003576:	d004      	beq.n	8003582 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003580:	d107      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003590:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359a:	d10f      	bne.n	80035bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e010      	b.n	80035f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3b01      	subs	r3, #1
 80035de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d196      	bne.n	800351e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3728      	adds	r7, #40	; 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000010 	.word	0x20000010

08003600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2200      	movs	r2, #0
 8003614:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff ff5b 	bl	80034d4 <SPI_WaitFifoStateUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e027      	b.n	8003684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2200      	movs	r2, #0
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff fec0 	bl	80033c4 <SPI_WaitFlagStateUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e014      	b.n	8003684 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7ff ff34 	bl	80034d4 <SPI_WaitFifoStateUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e000      	b.n	8003684 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003694:	f7fd ff3e 	bl	8001514 <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	2164      	movs	r1, #100	; 0x64
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ffa6 	bl	8003600 <SPI_EndRxTxTransaction>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036be:	f043 0220 	orr.w	r2, r3, #32
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff fe01 	bl	80032fc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80036fa:	e002      	b.n	8003702 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff fdf3 	bl	80032e8 <HAL_SPI_TxCpltCallback>
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e040      	b.n	800379e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7fd fd9d 	bl	800126c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2224      	movs	r2, #36	; 0x24
 8003736:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fdab 	bl	80042ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fb7c 	bl	8003e54 <UART_SetConfig>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e01b      	b.n	800379e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003774:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003784:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fe2a 	bl	80043f0 <UART_CheckIdleState>
 800379c:	4603      	mov	r3, r0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d137      	bne.n	8003830 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_UART_Receive_IT+0x24>
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e030      	b.n	8003832 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a18      	ldr	r2, [pc, #96]	; (800383c <HAL_UART_Receive_IT+0x94>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d01f      	beq.n	8003820 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d018      	beq.n	8003820 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	613b      	str	r3, [r7, #16]
   return(result);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	623b      	str	r3, [r7, #32]
 800380e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	69f9      	ldr	r1, [r7, #28]
 8003812:	6a3a      	ldr	r2, [r7, #32]
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	61bb      	str	r3, [r7, #24]
   return(result);
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e6      	bne.n	80037ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	461a      	mov	r2, r3
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fef2 	bl	8004610 <UART_Start_Receive_IT>
 800382c:	4603      	mov	r3, r0
 800382e:	e000      	b.n	8003832 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	4618      	mov	r0, r3
 8003834:	3728      	adds	r7, #40	; 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40008000 	.word	0x40008000

08003840 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b0ba      	sub	sp, #232	; 0xe8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003866:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800386a:	f640 030f 	movw	r3, #2063	; 0x80f
 800386e:	4013      	ands	r3, r2
 8003870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d115      	bne.n	80038a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00f      	beq.n	80038a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d009      	beq.n	80038a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 82ae 	beq.w	8003dfa <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
      }
      return;
 80038a6:	e2a8      	b.n	8003dfa <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80038a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8117 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80038c2:	4b85      	ldr	r3, [pc, #532]	; (8003ad8 <HAL_UART_IRQHandler+0x298>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 810a 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d011      	beq.n	80038fc <HAL_UART_IRQHandler+0xbc>
 80038d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2201      	movs	r2, #1
 80038ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f2:	f043 0201 	orr.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d011      	beq.n	800392c <HAL_UART_IRQHandler+0xec>
 8003908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2202      	movs	r2, #2
 800391a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003922:	f043 0204 	orr.w	r2, r3, #4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800392c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d011      	beq.n	800395c <HAL_UART_IRQHandler+0x11c>
 8003938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2204      	movs	r2, #4
 800394a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003952:	f043 0202 	orr.w	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800395c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d017      	beq.n	8003998 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d105      	bne.n	8003980 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003978:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2208      	movs	r2, #8
 8003986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398e:	f043 0208 	orr.w	r2, r3, #8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <HAL_UART_IRQHandler+0x18a>
 80039a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00c      	beq.n	80039ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8214 	beq.w	8003dfe <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d04f      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 feba 	bl	800479c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	d141      	bne.n	8003aba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1d9      	bne.n	8003a36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d013      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <HAL_UART_IRQHandler+0x29c>)
 8003a90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd febb 	bl	8001812 <HAL_DMA_Abort_IT>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d017      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003aac:	4610      	mov	r0, r2
 8003aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	e00f      	b.n	8003ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9b8 	bl	8003e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	e00b      	b.n	8003ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f9b4 	bl	8003e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	e007      	b.n	8003ad2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f9b0 	bl	8003e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003ad0:	e195      	b.n	8003dfe <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad2:	bf00      	nop
    return;
 8003ad4:	e193      	b.n	8003dfe <HAL_UART_IRQHandler+0x5be>
 8003ad6:	bf00      	nop
 8003ad8:	04000120 	.word	0x04000120
 8003adc:	08004865 	.word	0x08004865

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	f040 814e 	bne.w	8003d86 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8147 	beq.w	8003d86 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8140 	beq.w	8003d86 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2210      	movs	r2, #16
 8003b0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	f040 80b8 	bne.w	8003c8e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 8167 	beq.w	8003e02 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	f080 815f 	bcs.w	8003e02 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 8086 	bne.w	8003c6c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1da      	bne.n	8003b60 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3308      	adds	r3, #8
 8003bb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e1      	bne.n	8003baa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3308      	adds	r3, #8
 8003bec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3308      	adds	r3, #8
 8003c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e3      	bne.n	8003be6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3c:	f023 0310 	bic.w	r3, r3, #16
 8003c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e4      	bne.n	8003c2c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd fd95 	bl	8001796 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8d8 	bl	8003e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c8c:	e0b9      	b.n	8003e02 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80ab 	beq.w	8003e06 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a6 	beq.w	8003e06 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8003cde:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e4      	bne.n	8003cba <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d14:	633a      	str	r2, [r7, #48]	; 0x30
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e3      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f023 0310 	bic.w	r3, r3, #16
 8003d50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	69b9      	ldr	r1, [r7, #24]
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e4      	bne.n	8003d3c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f85c 	bl	8003e3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d84:	e03f      	b.n	8003e06 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00e      	beq.n	8003db0 <HAL_UART_IRQHandler+0x570>
 8003d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003da6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 ff57 	bl	8004c5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dae:	e02d      	b.n	8003e0c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00e      	beq.n	8003dda <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01c      	beq.n	8003e0a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
    }
    return;
 8003dd8:	e017      	b.n	8003e0a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d012      	beq.n	8003e0c <HAL_UART_IRQHandler+0x5cc>
 8003de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fd4c 	bl	8004890 <UART_EndTransmit_IT>
    return;
 8003df8:	e008      	b.n	8003e0c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003dfa:	bf00      	nop
 8003dfc:	e006      	b.n	8003e0c <HAL_UART_IRQHandler+0x5cc>
    return;
 8003dfe:	bf00      	nop
 8003e00:	e004      	b.n	8003e0c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003e02:	bf00      	nop
 8003e04:	e002      	b.n	8003e0c <HAL_UART_IRQHandler+0x5cc>
      return;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <HAL_UART_IRQHandler+0x5cc>
    return;
 8003e0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e0c:	37e8      	adds	r7, #232	; 0xe8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop

08003e14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e58:	b08a      	sub	sp, #40	; 0x28
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4bb4      	ldr	r3, [pc, #720]	; (8004154 <UART_SetConfig+0x300>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4aa9      	ldr	r2, [pc, #676]	; (8004158 <UART_SetConfig+0x304>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4aa0      	ldr	r2, [pc, #640]	; (800415c <UART_SetConfig+0x308>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d126      	bne.n	8003f2c <UART_SetConfig+0xd8>
 8003ede:	4ba0      	ldr	r3, [pc, #640]	; (8004160 <UART_SetConfig+0x30c>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d81b      	bhi.n	8003f24 <UART_SetConfig+0xd0>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0xa0>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f05 	.word	0x08003f05
 8003ef8:	08003f15 	.word	0x08003f15
 8003efc:	08003f0d 	.word	0x08003f0d
 8003f00:	08003f1d 	.word	0x08003f1d
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0a:	e080      	b.n	800400e <UART_SetConfig+0x1ba>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f12:	e07c      	b.n	800400e <UART_SetConfig+0x1ba>
 8003f14:	2304      	movs	r3, #4
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1a:	e078      	b.n	800400e <UART_SetConfig+0x1ba>
 8003f1c:	2308      	movs	r3, #8
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f22:	e074      	b.n	800400e <UART_SetConfig+0x1ba>
 8003f24:	2310      	movs	r3, #16
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e070      	b.n	800400e <UART_SetConfig+0x1ba>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a8c      	ldr	r2, [pc, #560]	; (8004164 <UART_SetConfig+0x310>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d138      	bne.n	8003fa8 <UART_SetConfig+0x154>
 8003f36:	4b8a      	ldr	r3, [pc, #552]	; (8004160 <UART_SetConfig+0x30c>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d82d      	bhi.n	8003fa0 <UART_SetConfig+0x14c>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <UART_SetConfig+0xf8>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08003fa1 	.word	0x08003fa1
 8003f54:	08003fa1 	.word	0x08003fa1
 8003f58:	08003fa1 	.word	0x08003fa1
 8003f5c:	08003f91 	.word	0x08003f91
 8003f60:	08003fa1 	.word	0x08003fa1
 8003f64:	08003fa1 	.word	0x08003fa1
 8003f68:	08003fa1 	.word	0x08003fa1
 8003f6c:	08003f89 	.word	0x08003f89
 8003f70:	08003fa1 	.word	0x08003fa1
 8003f74:	08003fa1 	.word	0x08003fa1
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	08003f99 	.word	0x08003f99
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f86:	e042      	b.n	800400e <UART_SetConfig+0x1ba>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8e:	e03e      	b.n	800400e <UART_SetConfig+0x1ba>
 8003f90:	2304      	movs	r3, #4
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f96:	e03a      	b.n	800400e <UART_SetConfig+0x1ba>
 8003f98:	2308      	movs	r3, #8
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9e:	e036      	b.n	800400e <UART_SetConfig+0x1ba>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa6:	e032      	b.n	800400e <UART_SetConfig+0x1ba>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a6a      	ldr	r2, [pc, #424]	; (8004158 <UART_SetConfig+0x304>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d12a      	bne.n	8004008 <UART_SetConfig+0x1b4>
 8003fb2:	4b6b      	ldr	r3, [pc, #428]	; (8004160 <UART_SetConfig+0x30c>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fc0:	d01a      	beq.n	8003ff8 <UART_SetConfig+0x1a4>
 8003fc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fc6:	d81b      	bhi.n	8004000 <UART_SetConfig+0x1ac>
 8003fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fcc:	d00c      	beq.n	8003fe8 <UART_SetConfig+0x194>
 8003fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd2:	d815      	bhi.n	8004000 <UART_SetConfig+0x1ac>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <UART_SetConfig+0x18c>
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fdc:	d008      	beq.n	8003ff0 <UART_SetConfig+0x19c>
 8003fde:	e00f      	b.n	8004000 <UART_SetConfig+0x1ac>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe6:	e012      	b.n	800400e <UART_SetConfig+0x1ba>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fee:	e00e      	b.n	800400e <UART_SetConfig+0x1ba>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff6:	e00a      	b.n	800400e <UART_SetConfig+0x1ba>
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffe:	e006      	b.n	800400e <UART_SetConfig+0x1ba>
 8004000:	2310      	movs	r3, #16
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004006:	e002      	b.n	800400e <UART_SetConfig+0x1ba>
 8004008:	2310      	movs	r3, #16
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a51      	ldr	r2, [pc, #324]	; (8004158 <UART_SetConfig+0x304>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d17a      	bne.n	800410e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004018:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800401c:	2b08      	cmp	r3, #8
 800401e:	d824      	bhi.n	800406a <UART_SetConfig+0x216>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <UART_SetConfig+0x1d4>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	0800404d 	.word	0x0800404d
 800402c:	0800406b 	.word	0x0800406b
 8004030:	08004055 	.word	0x08004055
 8004034:	0800406b 	.word	0x0800406b
 8004038:	0800405b 	.word	0x0800405b
 800403c:	0800406b 	.word	0x0800406b
 8004040:	0800406b 	.word	0x0800406b
 8004044:	0800406b 	.word	0x0800406b
 8004048:	08004063 	.word	0x08004063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800404c:	f7fe fbb4 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8004050:	61f8      	str	r0, [r7, #28]
        break;
 8004052:	e010      	b.n	8004076 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004054:	4b44      	ldr	r3, [pc, #272]	; (8004168 <UART_SetConfig+0x314>)
 8004056:	61fb      	str	r3, [r7, #28]
        break;
 8004058:	e00d      	b.n	8004076 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405a:	f7fe fb15 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800405e:	61f8      	str	r0, [r7, #28]
        break;
 8004060:	e009      	b.n	8004076 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	61fb      	str	r3, [r7, #28]
        break;
 8004068:	e005      	b.n	8004076 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004074:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8107 	beq.w	800428c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	429a      	cmp	r2, r3
 800408c:	d305      	bcc.n	800409a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	429a      	cmp	r2, r3
 8004098:	d903      	bls.n	80040a2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040a0:	e0f4      	b.n	800428c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	2200      	movs	r2, #0
 80040a6:	461c      	mov	r4, r3
 80040a8:	4615      	mov	r5, r2
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	022b      	lsls	r3, r5, #8
 80040b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040b8:	0222      	lsls	r2, r4, #8
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	6849      	ldr	r1, [r1, #4]
 80040be:	0849      	lsrs	r1, r1, #1
 80040c0:	2000      	movs	r0, #0
 80040c2:	4688      	mov	r8, r1
 80040c4:	4681      	mov	r9, r0
 80040c6:	eb12 0a08 	adds.w	sl, r2, r8
 80040ca:	eb43 0b09 	adc.w	fp, r3, r9
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040dc:	4650      	mov	r0, sl
 80040de:	4659      	mov	r1, fp
 80040e0:	f7fc f87e 	bl	80001e0 <__aeabi_uldivmod>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4613      	mov	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f2:	d308      	bcc.n	8004106 <UART_SetConfig+0x2b2>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fa:	d204      	bcs.n	8004106 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	e0c2      	b.n	800428c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800410c:	e0be      	b.n	800428c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004116:	d16a      	bne.n	80041ee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800411c:	2b08      	cmp	r3, #8
 800411e:	d834      	bhi.n	800418a <UART_SetConfig+0x336>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x2d4>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	0800414d 	.word	0x0800414d
 800412c:	0800416d 	.word	0x0800416d
 8004130:	08004175 	.word	0x08004175
 8004134:	0800418b 	.word	0x0800418b
 8004138:	0800417b 	.word	0x0800417b
 800413c:	0800418b 	.word	0x0800418b
 8004140:	0800418b 	.word	0x0800418b
 8004144:	0800418b 	.word	0x0800418b
 8004148:	08004183 	.word	0x08004183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800414c:	f7fe fb34 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8004150:	61f8      	str	r0, [r7, #28]
        break;
 8004152:	e020      	b.n	8004196 <UART_SetConfig+0x342>
 8004154:	efff69f3 	.word	0xefff69f3
 8004158:	40008000 	.word	0x40008000
 800415c:	40013800 	.word	0x40013800
 8004160:	40021000 	.word	0x40021000
 8004164:	40004400 	.word	0x40004400
 8004168:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800416c:	f7fe fb3a 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 8004170:	61f8      	str	r0, [r7, #28]
        break;
 8004172:	e010      	b.n	8004196 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004174:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <UART_SetConfig+0x454>)
 8004176:	61fb      	str	r3, [r7, #28]
        break;
 8004178:	e00d      	b.n	8004196 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417a:	f7fe fa85 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800417e:	61f8      	str	r0, [r7, #28]
        break;
 8004180:	e009      	b.n	8004196 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004186:	61fb      	str	r3, [r7, #28]
        break;
 8004188:	e005      	b.n	8004196 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d077      	beq.n	800428c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	005a      	lsls	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	441a      	add	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b0f      	cmp	r3, #15
 80041b6:	d916      	bls.n	80041e6 <UART_SetConfig+0x392>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041be:	d212      	bcs.n	80041e6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f023 030f 	bic.w	r3, r3, #15
 80041c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	8afb      	ldrh	r3, [r7, #22]
 80041d8:	4313      	orrs	r3, r2
 80041da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	8afa      	ldrh	r2, [r7, #22]
 80041e2:	60da      	str	r2, [r3, #12]
 80041e4:	e052      	b.n	800428c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041ec:	e04e      	b.n	800428c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d827      	bhi.n	8004246 <UART_SetConfig+0x3f2>
 80041f6:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <UART_SetConfig+0x3a8>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004229 	.word	0x08004229
 8004204:	08004231 	.word	0x08004231
 8004208:	08004247 	.word	0x08004247
 800420c:	08004237 	.word	0x08004237
 8004210:	08004247 	.word	0x08004247
 8004214:	08004247 	.word	0x08004247
 8004218:	08004247 	.word	0x08004247
 800421c:	0800423f 	.word	0x0800423f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004220:	f7fe faca 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8004224:	61f8      	str	r0, [r7, #28]
        break;
 8004226:	e014      	b.n	8004252 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7fe fadc 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 800422c:	61f8      	str	r0, [r7, #28]
        break;
 800422e:	e010      	b.n	8004252 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004230:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <UART_SetConfig+0x454>)
 8004232:	61fb      	str	r3, [r7, #28]
        break;
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004236:	f7fe fa27 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800423a:	61f8      	str	r0, [r7, #28]
        break;
 800423c:	e009      	b.n	8004252 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004242:	61fb      	str	r3, [r7, #28]
        break;
 8004244:	e005      	b.n	8004252 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004250:	bf00      	nop
    }

    if (pclk != 0U)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d019      	beq.n	800428c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	085a      	lsrs	r2, r3, #1
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	441a      	add	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d909      	bls.n	8004286 <UART_SetConfig+0x432>
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004278:	d205      	bcs.n	8004286 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	e002      	b.n	800428c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004298:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800429c:	4618      	mov	r0, r3
 800429e:	3728      	adds	r7, #40	; 0x28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a6:	bf00      	nop
 80042a8:	00f42400 	.word	0x00f42400

080042ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01a      	beq.n	80043c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043aa:	d10a      	bne.n	80043c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b098      	sub	sp, #96	; 0x60
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004400:	f7fd f888 	bl	8001514 <HAL_GetTick>
 8004404:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d12e      	bne.n	8004472 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441c:	2200      	movs	r2, #0
 800441e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f88c 	bl	8004540 <UART_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d021      	beq.n	8004472 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800443c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004442:	653b      	str	r3, [r7, #80]	; 0x50
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444c:	647b      	str	r3, [r7, #68]	; 0x44
 800444e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800445a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e6      	bne.n	800442e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e062      	b.n	8004538 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b04      	cmp	r3, #4
 800447e:	d149      	bne.n	8004514 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004488:	2200      	movs	r2, #0
 800448a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f856 	bl	8004540 <UART_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d03c      	beq.n	8004514 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	623b      	str	r3, [r7, #32]
   return(result);
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e6      	bne.n	800449a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	60fb      	str	r3, [r7, #12]
   return(result);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ec:	61fa      	str	r2, [r7, #28]
 80044ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	617b      	str	r3, [r7, #20]
   return(result);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e011      	b.n	8004538 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3758      	adds	r7, #88	; 0x58
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004550:	e049      	b.n	80045e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d045      	beq.n	80045e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fc ffdb 	bl	8001514 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <UART_WaitOnFlagUntilTimeout+0x30>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e048      	b.n	8004606 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d031      	beq.n	80045e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b08      	cmp	r3, #8
 800458e:	d110      	bne.n	80045b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2208      	movs	r2, #8
 8004596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f8ff 	bl	800479c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2208      	movs	r2, #8
 80045a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e029      	b.n	8004606 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c0:	d111      	bne.n	80045e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f8e5 	bl	800479c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e00f      	b.n	8004606 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4013      	ands	r3, r2
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	bf0c      	ite	eq
 80045f6:	2301      	moveq	r3, #1
 80045f8:	2300      	movne	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	429a      	cmp	r2, r3
 8004602:	d0a6      	beq.n	8004552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004610:	b480      	push	{r7}
 8004612:	b097      	sub	sp, #92	; 0x5c
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	4613      	mov	r3, r2
 800461c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004642:	d10e      	bne.n	8004662 <UART_Start_Receive_IT+0x52>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d105      	bne.n	8004658 <UART_Start_Receive_IT+0x48>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004652:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004656:	e02d      	b.n	80046b4 <UART_Start_Receive_IT+0xa4>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	22ff      	movs	r2, #255	; 0xff
 800465c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004660:	e028      	b.n	80046b4 <UART_Start_Receive_IT+0xa4>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10d      	bne.n	8004686 <UART_Start_Receive_IT+0x76>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <UART_Start_Receive_IT+0x6c>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	22ff      	movs	r2, #255	; 0xff
 8004676:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800467a:	e01b      	b.n	80046b4 <UART_Start_Receive_IT+0xa4>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	227f      	movs	r2, #127	; 0x7f
 8004680:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004684:	e016      	b.n	80046b4 <UART_Start_Receive_IT+0xa4>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800468e:	d10d      	bne.n	80046ac <UART_Start_Receive_IT+0x9c>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <UART_Start_Receive_IT+0x92>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	227f      	movs	r2, #127	; 0x7f
 800469c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046a0:	e008      	b.n	80046b4 <UART_Start_Receive_IT+0xa4>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	223f      	movs	r2, #63	; 0x3f
 80046a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046aa:	e003      	b.n	80046b4 <UART_Start_Receive_IT+0xa4>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2222      	movs	r2, #34	; 0x22
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	657b      	str	r3, [r7, #84]	; 0x54
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3308      	adds	r3, #8
 80046e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80046e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e5      	bne.n	80046c4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004700:	d107      	bne.n	8004712 <UART_Start_Receive_IT+0x102>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d103      	bne.n	8004712 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4a21      	ldr	r2, [pc, #132]	; (8004794 <UART_Start_Receive_IT+0x184>)
 800470e:	669a      	str	r2, [r3, #104]	; 0x68
 8004710:	e002      	b.n	8004718 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4a20      	ldr	r2, [pc, #128]	; (8004798 <UART_Start_Receive_IT+0x188>)
 8004716:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d019      	beq.n	8004754 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473e:	637b      	str	r3, [r7, #52]	; 0x34
 8004740:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e6      	bne.n	8004720 <UART_Start_Receive_IT+0x110>
 8004752:	e018      	b.n	8004786 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	613b      	str	r3, [r7, #16]
   return(result);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f043 0320 	orr.w	r3, r3, #32
 8004768:	653b      	str	r3, [r7, #80]	; 0x50
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004772:	623b      	str	r3, [r7, #32]
 8004774:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	69f9      	ldr	r1, [r7, #28]
 8004778:	6a3a      	ldr	r2, [r7, #32]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e6      	bne.n	8004754 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	375c      	adds	r7, #92	; 0x5c
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	08004aa1 	.word	0x08004aa1
 8004798:	080048e5 	.word	0x080048e5

0800479c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800479c:	b480      	push	{r7}
 800479e:	b095      	sub	sp, #84	; 0x54
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c2:	643b      	str	r3, [r7, #64]	; 0x40
 80047c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e6      	bne.n	80047a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e5      	bne.n	80047d6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480e:	2b01      	cmp	r3, #1
 8004810:	d118      	bne.n	8004844 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f023 0310 	bic.w	r3, r3, #16
 8004826:	647b      	str	r3, [r7, #68]	; 0x44
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	6979      	ldr	r1, [r7, #20]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	613b      	str	r3, [r7, #16]
   return(result);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e6      	bne.n	8004812 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004858:	bf00      	nop
 800485a:	3754      	adds	r7, #84	; 0x54
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff fad0 	bl	8003e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6979      	ldr	r1, [r7, #20]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	613b      	str	r3, [r7, #16]
   return(result);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e6      	bne.n	8004898 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fa9c 	bl	8003e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048dc:	bf00      	nop
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b09c      	sub	sp, #112	; 0x70
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048fc:	2b22      	cmp	r3, #34	; 0x22
 80048fe:	f040 80be 	bne.w	8004a7e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004908:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800490c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004910:	b2d9      	uxtb	r1, r3
 8004912:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004916:	b2da      	uxtb	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	400a      	ands	r2, r1
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 80a3 	bne.w	8004a92 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800495a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004960:	66bb      	str	r3, [r7, #104]	; 0x68
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800496a:	65bb      	str	r3, [r7, #88]	; 0x58
 800496c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e6      	bne.n	800494c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800498e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	667b      	str	r3, [r7, #100]	; 0x64
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800499e:	647a      	str	r2, [r7, #68]	; 0x44
 80049a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a34      	ldr	r2, [pc, #208]	; (8004a9c <UART_RxISR_8BIT+0x1b8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d01f      	beq.n	8004a10 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d018      	beq.n	8004a10 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	623b      	str	r3, [r7, #32]
   return(result);
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049f2:	663b      	str	r3, [r7, #96]	; 0x60
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049fc:	633b      	str	r3, [r7, #48]	; 0x30
 80049fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e6      	bne.n	80049de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d12e      	bne.n	8004a76 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0310 	bic.w	r3, r3, #16
 8004a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	69b9      	ldr	r1, [r7, #24]
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	617b      	str	r3, [r7, #20]
   return(result);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e6      	bne.n	8004a1e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d103      	bne.n	8004a66 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2210      	movs	r2, #16
 8004a64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff f9e4 	bl	8003e3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a74:	e00d      	b.n	8004a92 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fb ff00 	bl	800087c <HAL_UART_RxCpltCallback>
}
 8004a7c:	e009      	b.n	8004a92 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	8b1b      	ldrh	r3, [r3, #24]
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0208 	orr.w	r2, r2, #8
 8004a8e:	b292      	uxth	r2, r2
 8004a90:	831a      	strh	r2, [r3, #24]
}
 8004a92:	bf00      	nop
 8004a94:	3770      	adds	r7, #112	; 0x70
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40008000 	.word	0x40008000

08004aa0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b09c      	sub	sp, #112	; 0x70
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004aae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab8:	2b22      	cmp	r3, #34	; 0x22
 8004aba:	f040 80be 	bne.w	8004c3a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ac4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004acc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ace:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004ad2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004adc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	1c9a      	adds	r2, r3, #2
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f040 80a3 	bne.w	8004c4e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b26:	657b      	str	r3, [r7, #84]	; 0x54
 8004b28:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e6      	bne.n	8004b08 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3308      	adds	r3, #8
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	663b      	str	r3, [r7, #96]	; 0x60
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3308      	adds	r3, #8
 8004b58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b5a:	643a      	str	r2, [r7, #64]	; 0x40
 8004b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e5      	bne.n	8004b3a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a34      	ldr	r2, [pc, #208]	; (8004c58 <UART_RxISR_16BIT+0x1b8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d01f      	beq.n	8004bcc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d018      	beq.n	8004bcc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e6      	bne.n	8004b9a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d12e      	bne.n	8004c32 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f023 0310 	bic.w	r3, r3, #16
 8004bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6979      	ldr	r1, [r7, #20]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	613b      	str	r3, [r7, #16]
   return(result);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e6      	bne.n	8004bda <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d103      	bne.n	8004c22 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2210      	movs	r2, #16
 8004c20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff f906 	bl	8003e3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c30:	e00d      	b.n	8004c4e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fb fe22 	bl	800087c <HAL_UART_RxCpltCallback>
}
 8004c38:	e009      	b.n	8004c4e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	8b1b      	ldrh	r3, [r3, #24]
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0208 	orr.w	r2, r2, #8
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	831a      	strh	r2, [r3, #24]
}
 8004c4e:	bf00      	nop
 8004c50:	3770      	adds	r7, #112	; 0x70
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40008000 	.word	0x40008000

08004c5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <memset>:
 8004c70:	4402      	add	r2, r0
 8004c72:	4603      	mov	r3, r0
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d100      	bne.n	8004c7a <memset+0xa>
 8004c78:	4770      	bx	lr
 8004c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7e:	e7f9      	b.n	8004c74 <memset+0x4>

08004c80 <__libc_init_array>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	4d0d      	ldr	r5, [pc, #52]	; (8004cb8 <__libc_init_array+0x38>)
 8004c84:	4c0d      	ldr	r4, [pc, #52]	; (8004cbc <__libc_init_array+0x3c>)
 8004c86:	1b64      	subs	r4, r4, r5
 8004c88:	10a4      	asrs	r4, r4, #2
 8004c8a:	2600      	movs	r6, #0
 8004c8c:	42a6      	cmp	r6, r4
 8004c8e:	d109      	bne.n	8004ca4 <__libc_init_array+0x24>
 8004c90:	4d0b      	ldr	r5, [pc, #44]	; (8004cc0 <__libc_init_array+0x40>)
 8004c92:	4c0c      	ldr	r4, [pc, #48]	; (8004cc4 <__libc_init_array+0x44>)
 8004c94:	f000 f820 	bl	8004cd8 <_init>
 8004c98:	1b64      	subs	r4, r4, r5
 8004c9a:	10a4      	asrs	r4, r4, #2
 8004c9c:	2600      	movs	r6, #0
 8004c9e:	42a6      	cmp	r6, r4
 8004ca0:	d105      	bne.n	8004cae <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca8:	4798      	blx	r3
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7ee      	b.n	8004c8c <__libc_init_array+0xc>
 8004cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb2:	4798      	blx	r3
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	e7f2      	b.n	8004c9e <__libc_init_array+0x1e>
 8004cb8:	08005d38 	.word	0x08005d38
 8004cbc:	08005d38 	.word	0x08005d38
 8004cc0:	08005d38 	.word	0x08005d38
 8004cc4:	08005d3c 	.word	0x08005d3c

08004cc8 <strcpy>:
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cce:	f803 2b01 	strb.w	r2, [r3], #1
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	d1f9      	bne.n	8004cca <strcpy+0x2>
 8004cd6:	4770      	bx	lr

08004cd8 <_init>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr

08004ce4 <_fini>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr
