
mcsd-project-heartrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001140  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006590  08006590  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006598  08006598  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080065a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000006c  0800660c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  0800660c  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145bc  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad3  00000000  00000000  0003469b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  00037170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df8  00000000  00000000  00038350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e68  00000000  00000000  00039148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e08  00000000  00000000  0005afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbe4c  00000000  00000000  00070db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cd8  00000000  00000000  0013cc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001418dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000006c 	.word	0x2000006c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005438 	.word	0x08005438

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000070 	.word	0x20000070
 80001c8:	08005438 	.word	0x08005438

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <button_debounce>:
 */

#include "button.h"
#include "main.h"

bool button_debounce() {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	GPIO_PinState button;
	uint8_t counter = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]

	button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d8:	f001 fb4e 	bl	8001b78 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	71bb      	strb	r3, [r7, #6]
	while (button == 0) {
 80004e0:	e007      	b.n	80004f2 <button_debounce+0x2a>
		counter++;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	3301      	adds	r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
		if (counter > DEBOUNCE) {
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b05      	cmp	r3, #5
 80004ec:	d901      	bls.n	80004f2 <button_debounce+0x2a>
			return true;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e003      	b.n	80004fa <button_debounce+0x32>
	while (button == 0) {
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f4      	beq.n	80004e2 <button_debounce+0x1a>
		}
	}
	return false;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <error_led_number_check>:
 */

#include "error_led.h"
#include "main.h"

void error_led_number_check(uint8_t number, TIM_HandleTypeDef *htim) {
 8000502:	b580      	push	{r7, lr}
 8000504:	b082      	sub	sp, #8
 8000506:	af00      	add	r7, sp, #0
 8000508:	4603      	mov	r3, r0
 800050a:	6039      	str	r1, [r7, #0]
 800050c:	71fb      	strb	r3, [r7, #7]
	if (number < LOW || number > HIGH) {
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b31      	cmp	r3, #49	; 0x31
 8000512:	d902      	bls.n	800051a <error_led_number_check+0x18>
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b4a      	cmp	r3, #74	; 0x4a
 8000518:	d903      	bls.n	8000522 <error_led_number_check+0x20>
		error_led_blink(htim);
 800051a:	6838      	ldr	r0, [r7, #0]
 800051c:	f000 f810 	bl	8000540 <error_led_blink>
 8000520:	e009      	b.n	8000536 <error_led_number_check+0x34>
	} else {
		HAL_TIM_Base_Stop_IT(htim);
 8000522:	6838      	ldr	r0, [r7, #0]
 8000524:	f003 f9d6 	bl	80038d4 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2140      	movs	r1, #64	; 0x40
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f001 fb3a 	bl	8001ba8 <HAL_GPIO_WritePin>
	}
}
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <error_led_blink>:

void error_led_blink (TIM_HandleTypeDef *htim) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(htim, BLINK_TIME);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000558:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(htim, 0);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2200      	movs	r2, #0
 8000560:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->EGR = 1;
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <error_led_blink+0x4c>)
 8000564:	2201      	movs	r2, #1
 8000566:	615a      	str	r2, [r3, #20]
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f06f 0201 	mvn.w	r2, #1
 8000570:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(htim);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f003 f95a 	bl	800382c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_TogglePin(GPIOA, ERROR_LED_Pin);
 8000578:	2140      	movs	r1, #64	; 0x40
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f001 fb2b 	bl	8001bd8 <HAL_GPIO_TogglePin>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40001000 	.word	0x40001000

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 ff5d 	bl	8001452 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f83a 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f930 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f8fe 	bl	80007a0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005a4:	f000 f886 	bl	80006b4 <MX_SPI1_Init>
  MX_TIM6_Init();
 80005a8:	f000 f8c2 	bl	8000730 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
oledc_default_cfg(&hspi1);
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <main+0x70>)
 80005ae:	f000 fa19 	bl	80009e4 <oledc_default_cfg>
oledc_start_screen(true, &oledc, &hspi1);
 80005b2:	4a13      	ldr	r2, [pc, #76]	; (8000600 <main+0x70>)
 80005b4:	4913      	ldr	r1, [pc, #76]	; (8000604 <main+0x74>)
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 fd78 	bl	80010ac <oledc_start_screen>
//strcpy((char*)receive_frame_copy, (char*)text1);
HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f001 faf0 	bl	8001ba8 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 80005c8:	e007      	b.n	80005da <main+0x4a>
		  if (!button_debounce())
 80005ca:	f7ff ff7d 	bl	80004c8 <button_debounce>
 80005ce:	4603      	mov	r3, r0
 80005d0:	f083 0301 	eor.w	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d108      	bne.n	80005ec <main+0x5c>
	  while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f001 faca 	bl	8001b78 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0ef      	beq.n	80005ca <main+0x3a>
 80005ea:	e000      	b.n	80005ee <main+0x5e>
			  break;
 80005ec:	bf00      	nop
		  }

	  receive();
 80005ee:	f000 f98b 	bl	8000908 <receive>
	  oledc_update_number(&oledc, receive_frame, &hspi1, &htim6);
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <main+0x78>)
 80005f4:	4a02      	ldr	r2, [pc, #8]	; (8000600 <main+0x70>)
 80005f6:	4905      	ldr	r1, [pc, #20]	; (800060c <main+0x7c>)
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <main+0x74>)
 80005fa:	f000 fd2c 	bl	8001056 <oledc_update_number>
	  while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 80005fe:	e7ec      	b.n	80005da <main+0x4a>
 8000600:	20000088 	.word	0x20000088
 8000604:	200001c4 	.word	0x200001c4
 8000608:	200000ec 	.word	0x200000ec
 800060c:	200001dc 	.word	0x200001dc

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	; 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fed8 	bl	80053d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000636:	f001 faf7 	bl	8001c28 <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 f9cb 	bl	80009da <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000644:	2310      	movs	r3, #16
 8000646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	; 0x60
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000658:	2301      	movs	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fb2d 	bl	8001cd4 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000680:	f000 f9ab 	bl	80009da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f001 ff2d 	bl	80024fc <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a8:	f000 f997 	bl	80009da <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3758      	adds	r7, #88	; 0x58
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_SPI1_Init+0x74>)
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <MX_SPI1_Init+0x78>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_SPI1_Init+0x74>)
 80006c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_SPI1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_SPI1_Init+0x74>)
 80006ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_SPI1_Init+0x74>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_SPI1_Init+0x74>)
 80006dc:	2201      	movs	r2, #1
 80006de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_SPI1_Init+0x74>)
 80006e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_SPI1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_SPI1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_SPI1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_SPI1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_SPI1_Init+0x74>)
 8000702:	2207      	movs	r2, #7
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_SPI1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_SPI1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_SPI1_Init+0x74>)
 8000714:	f002 fbfe 	bl	8002f14 <HAL_SPI_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800071e:	f000 f95c 	bl	80009da <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000088 	.word	0x20000088
 800072c:	40013000 	.word	0x40013000

08000730 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_TIM6_Init+0x68>)
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <MX_TIM6_Init+0x6c>)
 8000744:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_TIM6_Init+0x68>)
 8000748:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800074c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_TIM6_Init+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_TIM6_Init+0x68>)
 8000756:	f240 32e7 	movw	r2, #999	; 0x3e7
 800075a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_TIM6_Init+0x68>)
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_TIM6_Init+0x68>)
 8000764:	f003 f80b 	bl	800377e <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800076e:	f000 f934 	bl	80009da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_TIM6_Init+0x68>)
 8000780:	f003 fa66 	bl	8003c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800078a:	f000 f926 	bl	80009da <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000ec 	.word	0x200000ec
 800079c:	40001000 	.word	0x40001000

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART2_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007e4:	f003 fab8 	bl	8003d58 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f8f4 	bl	80009da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000138 	.word	0x20000138
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b39      	ldr	r3, [pc, #228]	; (80008fc <MX_GPIO_Init+0xfc>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a38      	ldr	r2, [pc, #224]	; (80008fc <MX_GPIO_Init+0xfc>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b36      	ldr	r3, [pc, #216]	; (80008fc <MX_GPIO_Init+0xfc>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b33      	ldr	r3, [pc, #204]	; (80008fc <MX_GPIO_Init+0xfc>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a32      	ldr	r2, [pc, #200]	; (80008fc <MX_GPIO_Init+0xfc>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b30      	ldr	r3, [pc, #192]	; (80008fc <MX_GPIO_Init+0xfc>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_GPIO_Init+0xfc>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a2c      	ldr	r2, [pc, #176]	; (80008fc <MX_GPIO_Init+0xfc>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_GPIO_Init+0xfc>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000864:	4826      	ldr	r0, [pc, #152]	; (8000900 <MX_GPIO_Init+0x100>)
 8000866:	f001 f99f 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RW_Pin|OLED_EN_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2149      	movs	r1, #73	; 0x49
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f001 f999 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2103      	movs	r1, #3
 800087a:	4822      	ldr	r0, [pc, #136]	; (8000904 <MX_GPIO_Init+0x104>)
 800087c:	f001 f994 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000880:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	4819      	ldr	r0, [pc, #100]	; (8000900 <MX_GPIO_Init+0x100>)
 800089a:	f001 f803 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RW_Pin OLED_EN_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = OLED_RW_Pin|OLED_EN_Pin|ERROR_LED_Pin;
 800089e:	2349      	movs	r3, #73	; 0x49
 80008a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 fff4 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f000 ffe7 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_GPIO_Init+0x104>)
 80008ee:	f000 ffd9 	bl	80018a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	48000800 	.word	0x48000800
 8000904:	48000400 	.word	0x48000400

08000908 <receive>:

/* USER CODE BEGIN 4 */
void receive() {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	while (eof_bool == false) {
 800090c:	e009      	b.n	8000922 <receive+0x1a>
		if (HAL_UART_Receive_IT (&huart2, &rec_byte, RECBUF) == HAL_ERROR) {									// read
 800090e:	2201      	movs	r2, #1
 8000910:	490a      	ldr	r1, [pc, #40]	; (800093c <receive+0x34>)
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <receive+0x38>)
 8000914:	f003 fa6e 	bl	8003df4 <HAL_UART_Receive_IT>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d101      	bne.n	8000922 <receive+0x1a>
			Error_Handler();
 800091e:	f000 f85c 	bl	80009da <Error_Handler>
	while (eof_bool == false) {
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <receive+0x3c>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	f083 0301 	eor.w	r3, r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1ee      	bne.n	800090e <receive+0x6>
		}
	}
	eof_bool = false;
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <receive+0x3c>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200001d8 	.word	0x200001d8
 8000940:	20000138 	.word	0x20000138
 8000944:	200001c0 	.word	0x200001c0

08000948 <HAL_UART_RxCpltCallback>:
 * @brief 	UART receiving callback function. Copies each received byte into string "receive_frame".
 * 			Upon receiving end-of-frame "MYEOF" puts string terminator.
 * @param 	huart: 	UART handle.
 * @retval	None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <HAL_UART_RxCpltCallback+0x64>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d123      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0x58>
		receive_frame[frame_index] = rec_byte;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_RxCpltCallback+0x68>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_UART_RxCpltCallback+0x6c>)
 8000960:	7819      	ldrb	r1, [r3, #0]
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_UART_RxCpltCallback+0x70>)
 8000964:	5499      	strb	r1, [r3, r2]

		if (frame_index == FRAMELEN) {
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_UART_RxCpltCallback+0x68>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b1c      	cmp	r3, #28
 800096c:	d102      	bne.n	8000974 <HAL_UART_RxCpltCallback+0x2c>
			frame_index = 0;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_UART_RxCpltCallback+0x68>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
		}
		frame_index++;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_UART_RxCpltCallback+0x68>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_UART_RxCpltCallback+0x68>)
 800097e:	701a      	strb	r2, [r3, #0]

		if (rec_byte == MYEOF) {
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_UART_RxCpltCallback+0x6c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b0a      	cmp	r3, #10
 8000986:	d10b      	bne.n	80009a0 <HAL_UART_RxCpltCallback+0x58>
			receive_frame[frame_index] = '\0';
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_UART_RxCpltCallback+0x68>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_UART_RxCpltCallback+0x70>)
 8000990:	2100      	movs	r1, #0
 8000992:	5499      	strb	r1, [r3, r2]
			frame_index = 0;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_UART_RxCpltCallback+0x68>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
			eof_bool = true;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_UART_RxCpltCallback+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	20000138 	.word	0x20000138
 80009b0:	200001f8 	.word	0x200001f8
 80009b4:	200001d8 	.word	0x200001d8
 80009b8:	200001dc 	.word	0x200001dc
 80009bc:	200001c0 	.word	0x200001c0

080009c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, ERROR_LED_Pin);
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f001 f903 	bl	8001bd8 <HAL_GPIO_TogglePin>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009de:	b672      	cpsid	i
}
 80009e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <Error_Handler+0x8>

080009e4 <oledc_default_cfg>:
                                OLEDC_RMP_SPLIT_ENABLE | OLEDC_COLOR_65K;

static  uint8_t OLEDC_DEFAULT_VSL[ 3 ]       = { 0xA0, 0xB5, 0x55 };
static  uint8_t OLEDC_DEFAULT_CONTRAST[ 3 ]  = { 0x8A, 0x51, 0x8A };

void oledc_default_cfg (SPI_HandleTypeDef *hspi) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	  // Enable CS
	  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2101      	movs	r1, #1
 80009f0:	4834      	ldr	r0, [pc, #208]	; (8000ac4 <oledc_default_cfg+0xe0>)
 80009f2:	f001 f8d9 	bl	8001ba8 <HAL_GPIO_WritePin>

	  // Enable OLED via EN
	  HAL_GPIO_WritePin(OLED_EN_GPIO_Port, OLED_EN_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2108      	movs	r1, #8
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f001 f8d3 	bl	8001ba8 <HAL_GPIO_WritePin>

	  oledc_reset();
 8000a02:	f000 f867 	bl	8000ad4 <oledc_reset>

	  // Unlock display and turn off
	oledc_one_arg_commands(OLEDC_COMMAND_LOCK, OLEDC_DEFAULT_OLED_LOCK, hspi);
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	2112      	movs	r1, #18
 8000a0a:	20fd      	movs	r0, #253	; 0xfd
 8000a0c:	f000 f884 	bl	8000b18 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_COMMAND_LOCK, OLEDC_DEFAULT_CMD_LOCK, hspi);
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	21b1      	movs	r1, #177	; 0xb1
 8000a14:	20fd      	movs	r0, #253	; 0xfd
 8000a16:	f000 f87f 	bl	8000b18 <oledc_one_arg_commands>
	oledc_more_arg_commands(OLEDC_SLEEP_ON,  0,  0 , hspi);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	20ae      	movs	r0, #174	; 0xae
 8000a22:	f000 f8a7 	bl	8000b74 <oledc_more_arg_commands>

	// Setup SSD1351
	oledc_one_arg_commands(OLEDC_SET_REMAP,       OLEDC_DEFAULT_REMAP        , hspi);
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <oledc_default_cfg+0xe4>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	20a0      	movs	r0, #160	; 0xa0
 8000a30:	f000 f872 	bl	8000b18 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_MUX_RATIO,       OLEDC_DEFAULT_MUX_RATIO    , hspi);
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	215f      	movs	r1, #95	; 0x5f
 8000a38:	20ca      	movs	r0, #202	; 0xca
 8000a3a:	f000 f86d 	bl	8000b18 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_START_LINE,  OLEDC_DEFAULT_START_LINE   , hspi);
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	2100      	movs	r1, #0
 8000a42:	20a1      	movs	r0, #161	; 0xa1
 8000a44:	f000 f868 	bl	8000b18 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_OFFSET,      OLEDC_DEFAULT_OFFSET       , hspi);
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	20a2      	movs	r0, #162	; 0xa2
 8000a4e:	f000 f863 	bl	8000b18 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_VCOMH,           OLEDC_DEFAULT_VCOMH        , hspi);
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	2105      	movs	r1, #5
 8000a56:	20be      	movs	r0, #190	; 0xbe
 8000a58:	f000 f85e 	bl	8000b18 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_CLOCK_DIV,       OLEDC_DEFAULT_DIVSET       , hspi);
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	21f1      	movs	r1, #241	; 0xf1
 8000a60:	20b3      	movs	r0, #179	; 0xb3
 8000a62:	f000 f859 	bl	8000b18 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_RESET_PRECH, OLEDC_DEFAULT_PRECHARGE    , hspi);
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	2132      	movs	r1, #50	; 0x32
 8000a6a:	20b1      	movs	r0, #177	; 0xb1
 8000a6c:	f000 f854 	bl	8000b18 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SETSEC_PRECH,    OLEDC_DEFAULT_PRECHARGE_2  , hspi);
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	2101      	movs	r1, #1
 8000a74:	20b6      	movs	r0, #182	; 0xb6
 8000a76:	f000 f84f 	bl	8000b18 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_MASTER_CONTRAST, OLEDC_DEFAULT_MASTER_CONT  , hspi);
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	21cf      	movs	r1, #207	; 0xcf
 8000a7e:	20c7      	movs	r0, #199	; 0xc7
 8000a80:	f000 f84a 	bl	8000b18 <oledc_one_arg_commands>

	oledc_more_arg_commands(OLEDC_CONTRAST,   OLEDC_DEFAULT_CONTRAST, 3 , hspi);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2203      	movs	r2, #3
 8000a88:	4910      	ldr	r1, [pc, #64]	; (8000acc <oledc_default_cfg+0xe8>)
 8000a8a:	20c1      	movs	r0, #193	; 0xc1
 8000a8c:	f000 f872 	bl	8000b74 <oledc_more_arg_commands>
	oledc_more_arg_commands(OLEDC_VSL,        OLEDC_DEFAULT_VSL,      3 , hspi);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2203      	movs	r2, #3
 8000a94:	490e      	ldr	r1, [pc, #56]	; (8000ad0 <oledc_default_cfg+0xec>)
 8000a96:	20b4      	movs	r0, #180	; 0xb4
 8000a98:	f000 f86c 	bl	8000b74 <oledc_more_arg_commands>

	// Set normal mode and turn on display
	oledc_more_arg_commands(OLEDC_MODE_NORMAL, 0, 0 , hspi);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	20a6      	movs	r0, #166	; 0xa6
 8000aa4:	f000 f866 	bl	8000b74 <oledc_more_arg_commands>
	oledc_more_arg_commands(OLEDC_SLEEP_OFF,   0, 0 , hspi);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	20af      	movs	r0, #175	; 0xaf
 8000ab0:	f000 f860 	bl	8000b74 <oledc_more_arg_commands>
	oledc_fill_screen(0 , hspi);
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f898 	bl	8000bec <oledc_fill_screen>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	20000006 	.word	0x20000006
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <oledc_reset>:

void oledc_reset() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ade:	480d      	ldr	r0, [pc, #52]	; (8000b14 <oledc_reset+0x40>)
 8000ae0:	f001 f862 	bl	8001ba8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f000 fd29 	bl	800153c <HAL_Delay>
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af0:	4808      	ldr	r0, [pc, #32]	; (8000b14 <oledc_reset+0x40>)
 8000af2:	f001 f859 	bl	8001ba8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fd20 	bl	800153c <HAL_Delay>
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <oledc_reset+0x40>)
 8000b04:	f001 f850 	bl	8001ba8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000b08:	2064      	movs	r0, #100	; 0x64
 8000b0a:	f000 fd17 	bl	800153c <HAL_Delay>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	48000800 	.word	0x48000800

08000b18 <oledc_one_arg_commands>:

void oledc_one_arg_commands (uint8_t command, uint8_t args, SPI_HandleTypeDef *hspi) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	603a      	str	r2, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	460b      	mov	r3, r1
 8000b26:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4810      	ldr	r0, [pc, #64]	; (8000b70 <oledc_one_arg_commands+0x58>)
 8000b2e:	f001 f83b 	bl	8001ba8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2102      	movs	r1, #2
 8000b36:	480e      	ldr	r0, [pc, #56]	; (8000b70 <oledc_one_arg_commands+0x58>)
 8000b38:	f001 f836 	bl	8001ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi, &command, 1);
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4619      	mov	r1, r3
 8000b42:	6838      	ldr	r0, [r7, #0]
 8000b44:	f002 fa8a 	bl	800305c <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <oledc_one_arg_commands+0x58>)
 8000b4e:	f001 f82b 	bl	8001ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi, &args, 1);
 8000b52:	1dbb      	adds	r3, r7, #6
 8000b54:	2201      	movs	r2, #1
 8000b56:	4619      	mov	r1, r3
 8000b58:	6838      	ldr	r0, [r7, #0]
 8000b5a:	f002 fa7f 	bl	800305c <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2101      	movs	r1, #1
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <oledc_one_arg_commands+0x58>)
 8000b64:	f001 f820 	bl	8001ba8 <HAL_GPIO_WritePin>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	48000400 	.word	0x48000400

08000b74 <oledc_more_arg_commands>:

void oledc_more_arg_commands ( uint8_t command, uint8_t *args, uint16_t args_len, SPI_HandleTypeDef *hspi) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4603      	mov	r3, r0
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	4613      	mov	r3, r2
 8000b84:	81bb      	strh	r3, [r7, #12]
    uint16_t cnt;
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4817      	ldr	r0, [pc, #92]	; (8000be8 <oledc_more_arg_commands+0x74>)
 8000b8c:	f001 f80c 	bl	8001ba8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2102      	movs	r1, #2
 8000b94:	4814      	ldr	r0, [pc, #80]	; (8000be8 <oledc_more_arg_commands+0x74>)
 8000b96:	f001 f807 	bl	8001ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi, &command, 1);
 8000b9a:	f107 030f 	add.w	r3, r7, #15
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f002 fa5a 	bl	800305c <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2102      	movs	r1, #2
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <oledc_more_arg_commands+0x74>)
 8000bae:	f000 fffb 	bl	8001ba8 <HAL_GPIO_WritePin>

    for ( cnt = 0; cnt < args_len; cnt++ )
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	82fb      	strh	r3, [r7, #22]
 8000bb6:	e00a      	b.n	8000bce <oledc_more_arg_commands+0x5a>
    {
        HAL_SPI_Transmit_IT(hspi, &args[cnt], 1);
 8000bb8:	8afb      	ldrh	r3, [r7, #22]
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f002 fa4a 	bl	800305c <HAL_SPI_Transmit_IT>
    for ( cnt = 0; cnt < args_len; cnt++ )
 8000bc8:	8afb      	ldrh	r3, [r7, #22]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	82fb      	strh	r3, [r7, #22]
 8000bce:	8afa      	ldrh	r2, [r7, #22]
 8000bd0:	89bb      	ldrh	r3, [r7, #12]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d3f0      	bcc.n	8000bb8 <oledc_more_arg_commands+0x44>
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4803      	ldr	r0, [pc, #12]	; (8000be8 <oledc_more_arg_commands+0x74>)
 8000bdc:	f000 ffe4 	bl	8001ba8 <HAL_GPIO_WritePin>
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	48000400 	.word	0x48000400

08000bec <oledc_fill_screen>:

void oledc_fill_screen (uint16_t color, SPI_HandleTypeDef *hspi) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	80fb      	strh	r3, [r7, #6]
    oledc_box_area(OLEDC_MIN, OLEDC_MIN, OLEDC_MAX, OLEDC_MAX, color, hspi);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2360      	movs	r3, #96	; 0x60
 8000c02:	2260      	movs	r2, #96	; 0x60
 8000c04:	2100      	movs	r1, #0
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f804 	bl	8000c14 <oledc_box_area>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <oledc_box_area>:

void oledc_box_area (uint8_t start_col, uint8_t start_row, uint8_t end_col, uint8_t end_row, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4623      	mov	r3, r4
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	4603      	mov	r3, r0
 8000c28:	71bb      	strb	r3, [r7, #6]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	717b      	strb	r3, [r7, #5]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	713b      	strb	r3, [r7, #4]
    uint8_t   cmd       = OLEDC_WRITE_RAM;
 8000c32:	235c      	movs	r3, #92	; 0x5c
 8000c34:	737b      	strb	r3, [r7, #13]
    uint16_t  cnt       = ( end_col - start_col ) * ( end_row - start_row );
 8000c36:	797a      	ldrb	r2, [r7, #5]
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	7939      	ldrb	r1, [r7, #4]
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	1acb      	subs	r3, r1, r3
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	fb12 f303 	smulbb	r3, r2, r3
 8000c4a:	81fb      	strh	r3, [r7, #14]
    uint8_t   clr[ 2 ]  = { 0 };
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	813b      	strh	r3, [r7, #8]

    if( ( start_col > OLEDC_SCREEN_WIDTH ) ||
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b60      	cmp	r3, #96	; 0x60
 8000c54:	d86f      	bhi.n	8000d36 <oledc_box_area+0x122>
 8000c56:	797b      	ldrb	r3, [r7, #5]
 8000c58:	2b60      	cmp	r3, #96	; 0x60
 8000c5a:	d86c      	bhi.n	8000d36 <oledc_box_area+0x122>
        ( end_col > OLEDC_SCREEN_WIDTH ) )
        return;

    if( ( start_row > OLEDC_SCREEN_HEIGHT ) ||
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	2b60      	cmp	r3, #96	; 0x60
 8000c60:	d86b      	bhi.n	8000d3a <oledc_box_area+0x126>
 8000c62:	793b      	ldrb	r3, [r7, #4]
 8000c64:	2b60      	cmp	r3, #96	; 0x60
 8000c66:	d868      	bhi.n	8000d3a <oledc_box_area+0x126>
        ( end_row > OLEDC_SCREEN_HEIGHT ) )
        return;

    if( ( end_col < start_col ) ||
 8000c68:	797a      	ldrb	r2, [r7, #5]
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d366      	bcc.n	8000d3e <oledc_box_area+0x12a>
 8000c70:	793a      	ldrb	r2, [r7, #4]
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d362      	bcc.n	8000d3e <oledc_box_area+0x12a>
        ( end_row < start_row ) )
        return;

    cols[ 0 ] = OLEDC_COL_OFF + start_col;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3310      	adds	r3, #16
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <oledc_box_area+0x134>)
 8000c80:	701a      	strb	r2, [r3, #0]
    cols[ 1 ] = OLEDC_COL_OFF + end_col - 1;
 8000c82:	797b      	ldrb	r3, [r7, #5]
 8000c84:	330f      	adds	r3, #15
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <oledc_box_area+0x134>)
 8000c8a:	705a      	strb	r2, [r3, #1]
    rows[ 0 ] = OLEDC_ROW_OFF + start_row;
 8000c8c:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <oledc_box_area+0x138>)
 8000c8e:	79bb      	ldrb	r3, [r7, #6]
 8000c90:	7013      	strb	r3, [r2, #0]
    rows[ 1 ] = OLEDC_ROW_OFF + end_row - 1;
 8000c92:	793b      	ldrb	r3, [r7, #4]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <oledc_box_area+0x138>)
 8000c9a:	705a      	strb	r2, [r3, #1]
    clr[ 0 ] |= color >> 8;
 8000c9c:	7a3a      	ldrb	r2, [r7, #8]
 8000c9e:	8c3b      	ldrh	r3, [r7, #32]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	723b      	strb	r3, [r7, #8]
    clr[ 1 ] |= color & 0x00FF;
 8000cac:	7a7b      	ldrb	r3, [r7, #9]
 8000cae:	b25a      	sxtb	r2, r3
 8000cb0:	8c3b      	ldrh	r3, [r7, #32]
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	727b      	strb	r3, [r7, #9]

    oledc_more_arg_commands(OLEDC_SET_COL_ADDRESS, cols, 2 , hspi);
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	4921      	ldr	r1, [pc, #132]	; (8000d48 <oledc_box_area+0x134>)
 8000cc2:	2015      	movs	r0, #21
 8000cc4:	f7ff ff56 	bl	8000b74 <oledc_more_arg_commands>
    oledc_more_arg_commands(OLEDC_SET_ROW_ADDRESS, rows, 2 , hspi);
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	2202      	movs	r2, #2
 8000ccc:	491f      	ldr	r1, [pc, #124]	; (8000d4c <oledc_box_area+0x138>)
 8000cce:	2075      	movs	r0, #117	; 0x75
 8000cd0:	f7ff ff50 	bl	8000b74 <oledc_more_arg_commands>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	481d      	ldr	r0, [pc, #116]	; (8000d50 <oledc_box_area+0x13c>)
 8000cda:	f000 ff65 	bl	8001ba8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	481b      	ldr	r0, [pc, #108]	; (8000d50 <oledc_box_area+0x13c>)
 8000ce4:	f000 ff60 	bl	8001ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi, &cmd, 1);
 8000ce8:	f107 030d 	add.w	r3, r7, #13
 8000cec:	2201      	movs	r2, #1
 8000cee:	4619      	mov	r1, r3
 8000cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cf2:	f002 f9b3 	bl	800305c <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4815      	ldr	r0, [pc, #84]	; (8000d50 <oledc_box_area+0x13c>)
 8000cfc:	f000 ff54 	bl	8001ba8 <HAL_GPIO_WritePin>

    while( cnt-- ) {
 8000d00:	e00e      	b.n	8000d20 <oledc_box_area+0x10c>
        HAL_SPI_Transmit_IT(hspi, &clr[0], 1);
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	2201      	movs	r2, #1
 8000d08:	4619      	mov	r1, r3
 8000d0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d0c:	f002 f9a6 	bl	800305c <HAL_SPI_Transmit_IT>
        HAL_SPI_Transmit_IT(hspi, &clr[1], 1);
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	3301      	adds	r3, #1
 8000d16:	2201      	movs	r2, #1
 8000d18:	4619      	mov	r1, r3
 8000d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d1c:	f002 f99e 	bl	800305c <HAL_SPI_Transmit_IT>
    while( cnt-- ) {
 8000d20:	89fb      	ldrh	r3, [r7, #14]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	81fa      	strh	r2, [r7, #14]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1eb      	bne.n	8000d02 <oledc_box_area+0xee>
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <oledc_box_area+0x13c>)
 8000d30:	f000 ff3a 	bl	8001ba8 <HAL_GPIO_WritePin>
 8000d34:	e004      	b.n	8000d40 <oledc_box_area+0x12c>
        return;
 8000d36:	bf00      	nop
 8000d38:	e002      	b.n	8000d40 <oledc_box_area+0x12c>
        return;
 8000d3a:	bf00      	nop
 8000d3c:	e000      	b.n	8000d40 <oledc_box_area+0x12c>
        return;
 8000d3e:	bf00      	nop
}
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000004 	.word	0x20000004
 8000d50:	48000400 	.word	0x48000400

08000d54 <oledc_text>:

void oledc_text ( oledc_t *oledc, uint8_t *text, uint16_t x, uint16_t y , SPI_HandleTypeDef *hspi) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	461a      	mov	r2, r3
 8000d62:	460b      	mov	r3, r1
 8000d64:	80fb      	strh	r3, [r7, #6]
 8000d66:	4613      	mov	r3, r2
 8000d68:	80bb      	strh	r3, [r7, #4]
    uint8_t *ptr = text;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	617b      	str	r3, [r7, #20]
    if ( ( x >= OLEDC_SCREEN_WIDTH ) || ( y >= OLEDC_SCREEN_HEIGHT ) ) {
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	2b5f      	cmp	r3, #95	; 0x5f
 8000d72:	d818      	bhi.n	8000da6 <oledc_text+0x52>
 8000d74:	88bb      	ldrh	r3, [r7, #4]
 8000d76:	2b5f      	cmp	r3, #95	; 0x5f
 8000d78:	d815      	bhi.n	8000da6 <oledc_text+0x52>
        return;
    }

    oledc->x_cord = x;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	88fa      	ldrh	r2, [r7, #6]
 8000d7e:	81da      	strh	r2, [r3, #14]
    oledc->y_cord = y;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	821a      	strh	r2, [r3, #16]

    while( *ptr ) {
 8000d86:	e009      	b.n	8000d9c <oledc_text+0x48>
        oledc_character( oledc, *ptr++ , hspi);
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	617a      	str	r2, [r7, #20]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	6a3a      	ldr	r2, [r7, #32]
 8000d94:	4619      	mov	r1, r3
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f000 f8b6 	bl	8000f08 <oledc_character>
    while( *ptr ) {
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1f1      	bne.n	8000d88 <oledc_text+0x34>
 8000da4:	e000      	b.n	8000da8 <oledc_text+0x54>
        return;
 8000da6:	bf00      	nop
    }
}
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <oledc_set_font>:

void oledc_set_font ( oledc_t *oledc, const uint8_t *font_s, uint16_t color ) {
 8000dae:	b480      	push	{r7}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	4613      	mov	r3, r2
 8000dba:	80fb      	strh	r3, [r7, #6]
    oledc->font_obj               = font_s;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	601a      	str	r2, [r3, #0]
    oledc->font_first_char    = font_s[2] + (font_s[3] << 8);
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	3303      	adds	r3, #3
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	811a      	strh	r2, [r3, #8]
    oledc->font_last_char     = font_s[4] + (font_s[5] << 8);
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3304      	adds	r3, #4
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	3305      	adds	r3, #5
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4413      	add	r3, r2
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	815a      	strh	r2, [r3, #10]
    oledc->font_height        = font_s[6];
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3306      	adds	r3, #6
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	819a      	strh	r2, [r3, #12]
    oledc->font_color         = color;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	809a      	strh	r2, [r3, #4]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <oledc_pixel>:

void oledc_pixel ( oledc_t *oledc, uint8_t col, uint8_t row, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4603      	mov	r3, r0
 8000e28:	70fb      	strb	r3, [r7, #3]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70bb      	strb	r3, [r7, #2]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	803b      	strh	r3, [r7, #0]
    uint8_t cmd       = OLEDC_WRITE_RAM;
 8000e32:	235c      	movs	r3, #92	; 0x5c
 8000e34:	73fb      	strb	r3, [r7, #15]
    uint8_t clr[ 2 ]  = { 0 };
 8000e36:	2300      	movs	r3, #0
 8000e38:	81bb      	strh	r3, [r7, #12]

    if( ( col > OLEDC_SCREEN_WIDTH ) || ( row > OLEDC_SCREEN_HEIGHT ) ) {
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	2b60      	cmp	r3, #96	; 0x60
 8000e3e:	d859      	bhi.n	8000ef4 <oledc_pixel+0xdc>
 8000e40:	78bb      	ldrb	r3, [r7, #2]
 8000e42:	2b60      	cmp	r3, #96	; 0x60
 8000e44:	d856      	bhi.n	8000ef4 <oledc_pixel+0xdc>
        return;
    }
    cols[ 0 ] = OLEDC_COL_OFF + col;
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	3310      	adds	r3, #16
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <oledc_pixel+0xe4>)
 8000e4e:	701a      	strb	r2, [r3, #0]
    cols[ 1 ] = OLEDC_COL_OFF + col;
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	3310      	adds	r3, #16
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <oledc_pixel+0xe4>)
 8000e58:	705a      	strb	r2, [r3, #1]
    rows[ 0 ] = OLEDC_ROW_OFF + row;
 8000e5a:	4a29      	ldr	r2, [pc, #164]	; (8000f00 <oledc_pixel+0xe8>)
 8000e5c:	78bb      	ldrb	r3, [r7, #2]
 8000e5e:	7013      	strb	r3, [r2, #0]
    rows[ 1 ] = OLEDC_ROW_OFF + row;
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <oledc_pixel+0xe8>)
 8000e62:	78bb      	ldrb	r3, [r7, #2]
 8000e64:	7053      	strb	r3, [r2, #1]
    clr[ 0 ] |= color >> 8;
 8000e66:	7b3a      	ldrb	r2, [r7, #12]
 8000e68:	883b      	ldrh	r3, [r7, #0]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	733b      	strb	r3, [r7, #12]
    clr[ 1 ] |= color & 0x00FF;
 8000e76:	7b7b      	ldrb	r3, [r7, #13]
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	883b      	ldrh	r3, [r7, #0]
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	737b      	strb	r3, [r7, #13]

    oledc_more_arg_commands(OLEDC_SET_COL_ADDRESS, cols, 2 , hspi);
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	491c      	ldr	r1, [pc, #112]	; (8000efc <oledc_pixel+0xe4>)
 8000e8c:	2015      	movs	r0, #21
 8000e8e:	f7ff fe71 	bl	8000b74 <oledc_more_arg_commands>
    oledc_more_arg_commands(OLEDC_SET_ROW_ADDRESS, rows, 2 , hspi);
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2202      	movs	r2, #2
 8000e96:	491a      	ldr	r1, [pc, #104]	; (8000f00 <oledc_pixel+0xe8>)
 8000e98:	2075      	movs	r0, #117	; 0x75
 8000e9a:	f7ff fe6b 	bl	8000b74 <oledc_more_arg_commands>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4818      	ldr	r0, [pc, #96]	; (8000f04 <oledc_pixel+0xec>)
 8000ea4:	f000 fe80 	bl	8001ba8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4815      	ldr	r0, [pc, #84]	; (8000f04 <oledc_pixel+0xec>)
 8000eae:	f000 fe7b 	bl	8001ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi, &cmd, 1);
 8000eb2:	f107 030f 	add.w	r3, r7, #15
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	69b8      	ldr	r0, [r7, #24]
 8000ebc:	f002 f8ce 	bl	800305c <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	480f      	ldr	r0, [pc, #60]	; (8000f04 <oledc_pixel+0xec>)
 8000ec6:	f000 fe6f 	bl	8001ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi, &clr[0], 1);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	69b8      	ldr	r0, [r7, #24]
 8000ed4:	f002 f8c2 	bl	800305c <HAL_SPI_Transmit_IT>
    HAL_SPI_Transmit_IT(hspi, &clr[1], 1);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	3301      	adds	r3, #1
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	69b8      	ldr	r0, [r7, #24]
 8000ee4:	f002 f8ba 	bl	800305c <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2101      	movs	r1, #1
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <oledc_pixel+0xec>)
 8000eee:	f000 fe5b 	bl	8001ba8 <HAL_GPIO_WritePin>
 8000ef2:	e000      	b.n	8000ef6 <oledc_pixel+0xde>
        return;
 8000ef4:	bf00      	nop
}
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000004 	.word	0x20000004
 8000f04:	48000400 	.word	0x48000400

08000f08 <oledc_character>:

void oledc_character (oledc_t *oledc, uint16_t ch , SPI_HandleTypeDef *hspi) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	; 0x38
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	460b      	mov	r3, r1
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	817b      	strh	r3, [r7, #10]
    uint8_t     ch_width = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t     x_cnt;
    uint8_t     y_cnt;
    uint16_t    x = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t    y = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t    tmp;
    uint8_t     temp = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t     mask = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    uint32_t    offset;
    const uint8_t *ch_table;
    const uint8_t *ch_bitmap;

    if( ch < oledc->font_first_char )
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	891b      	ldrh	r3, [r3, #8]
 8000f34:	897a      	ldrh	r2, [r7, #10]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	f0c0 8087 	bcc.w	800104a <oledc_character+0x142>
        return;

    if( ch > oledc->font_last_char )
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	895b      	ldrh	r3, [r3, #10]
 8000f40:	897a      	ldrh	r2, [r7, #10]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	f200 8083 	bhi.w	800104e <oledc_character+0x146>
        return;

    offset = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    tmp = (ch - oledc->font_first_char) << 2;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	891b      	ldrh	r3, [r3, #8]
 8000f50:	897a      	ldrh	r2, [r7, #10]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	837b      	strh	r3, [r7, #26]
    ch_table = oledc->font_obj + 8 + tmp;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	8b7b      	ldrh	r3, [r7, #26]
 8000f60:	3308      	adds	r3, #8
 8000f62:	4413      	add	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]
    ch_width = *ch_table;
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    offset = (uint32_t)ch_table[1] + ((uint32_t)ch_table[2] << 8) + ((uint32_t)ch_table[3] << 16);
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	441a      	add	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3303      	adds	r3, #3
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	041b      	lsls	r3, r3, #16
 8000f88:	4413      	add	r3, r2
 8000f8a:	61fb      	str	r3, [r7, #28]

    ch_bitmap = oledc->font_obj + offset;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	4413      	add	r3, r2
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24

    y = oledc->y_cord;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	8a1b      	ldrh	r3, [r3, #16]
 8000f9a:	857b      	strh	r3, [r7, #42]	; 0x2a
    for (y_cnt = 0; y_cnt < oledc->font_height; y_cnt++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000fa2:	e045      	b.n	8001030 <oledc_character+0x128>
        x = oledc->x_cord;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	89db      	ldrh	r3, [r3, #14]
 8000fa8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        mask = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        for( x_cnt = 0; x_cnt < ch_width; x_cnt++ ) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000fb6:	e02d      	b.n	8001014 <oledc_character+0x10c>
            if( !mask ) {
 8000fb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d108      	bne.n	8000fd2 <oledc_character+0xca>
                temp = *ch_bitmap++;
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	627a      	str	r2, [r7, #36]	; 0x24
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                mask = 0x01;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            }
            if( temp & mask )
 8000fd2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <oledc_character+0xf2>
                 oledc_pixel( oledc, x, y, oledc->font_color, hspi);
 8000fe2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000fe4:	b2d9      	uxtb	r1, r3
 8000fe6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	8898      	ldrh	r0, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff ff0f 	bl	8000e18 <oledc_pixel>

            x++;
 8000ffa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	85bb      	strh	r3, [r7, #44]	; 0x2c
            mask <<= 1;
 8001000:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        for( x_cnt = 0; x_cnt < ch_width; x_cnt++ ) {
 800100a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800100e:	3301      	adds	r3, #1
 8001010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001014:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001018:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800101c:	429a      	cmp	r2, r3
 800101e:	d3cb      	bcc.n	8000fb8 <oledc_character+0xb0>
        }
        y++;
 8001020:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001022:	3301      	adds	r3, #1
 8001024:	857b      	strh	r3, [r7, #42]	; 0x2a
    for (y_cnt = 0; y_cnt < oledc->font_height; y_cnt++) {
 8001026:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800102a:	3301      	adds	r3, #1
 800102c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001030:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001034:	b29a      	uxth	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	899b      	ldrh	r3, [r3, #12]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3b2      	bcc.n	8000fa4 <oledc_character+0x9c>
    }
    oledc->x_cord = x + 1;
 800103e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001040:	3301      	adds	r3, #1
 8001042:	b29a      	uxth	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	81da      	strh	r2, [r3, #14]
 8001048:	e002      	b.n	8001050 <oledc_character+0x148>
        return;
 800104a:	bf00      	nop
 800104c:	e000      	b.n	8001050 <oledc_character+0x148>
        return;
 800104e:	bf00      	nop
}
 8001050:	3730      	adds	r7, #48	; 0x30
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <oledc_update_number>:
		  oledc_text(oledc, text, i, TEXT_ROW, hspi);
		  HAL_Delay(100);
	  }
}

void oledc_update_number(oledc_t *oledc, uint8_t* numbers, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim) {
 8001056:	b580      	push	{r7, lr}
 8001058:	b088      	sub	sp, #32
 800105a:	af02      	add	r7, sp, #8
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	603b      	str	r3, [r7, #0]
	oledc_box_area (NUM_COL, NUM_ROW, NUM_COL_END, NUM_ROW_END, BACKGROUND, hspi);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	23ff      	movs	r3, #255	; 0xff
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2346      	movs	r3, #70	; 0x46
 800106e:	2246      	movs	r2, #70	; 0x46
 8001070:	2128      	movs	r1, #40	; 0x28
 8001072:	2028      	movs	r0, #40	; 0x28
 8001074:	f7ff fdce 	bl	8000c14 <oledc_box_area>
	oledc_text(oledc, numbers, NUM_COL, NUM_ROW, hspi);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2328      	movs	r3, #40	; 0x28
 800107e:	2228      	movs	r2, #40	; 0x28
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f7ff fe66 	bl	8000d54 <oledc_text>
	char *ptr;
	uint8_t number = strtol((char*)numbers, &ptr, 10);
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	220a      	movs	r2, #10
 800108e:	4619      	mov	r1, r3
 8001090:	68b8      	ldr	r0, [r7, #8]
 8001092:	f004 f995 	bl	80053c0 <strtol>
 8001096:	4603      	mov	r3, r0
 8001098:	75fb      	strb	r3, [r7, #23]
	error_led_number_check(number, htim);
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa2f 	bl	8000502 <error_led_number_check>
}
 80010a4:	bf00      	nop
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <oledc_start_screen>:
	oledc_set_font(oledc, guiFont_Exo_2_Condensed15x23_Regular, 0);
	oledc_fill_screen(ERROR_BACKGROUND, hspi);
	oledc_text(oledc, error_message, ERROR_TEXT_COL, TEXT_ROW, hspi);
}

void oledc_start_screen(bool startup, oledc_t *oledc, SPI_HandleTypeDef *hspi) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	73fb      	strb	r3, [r7, #15]
	uint8_t welcome[] = "WELCOME";
 80010ba:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <oledc_start_screen+0x84>)
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t pulse[] = "PULSE";
 80010c8:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <oledc_start_screen+0x88>)
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d2:	6018      	str	r0, [r3, #0]
 80010d4:	3304      	adds	r3, #4
 80010d6:	8019      	strh	r1, [r3, #0]
	oledc_set_font(oledc, guiFont_Tahoma_14_Regular, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	4917      	ldr	r1, [pc, #92]	; (8001138 <oledc_start_screen+0x8c>)
 80010dc:	68b8      	ldr	r0, [r7, #8]
 80010de:	f7ff fe66 	bl	8000dae <oledc_set_font>

	if (startup) {
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d011      	beq.n	800110c <oledc_start_screen+0x60>
		oledc_fill_screen(WELCOME_BACKGROUND, hspi);
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80010ee:	f7ff fd7d 	bl	8000bec <oledc_fill_screen>
		oledc_text(oledc, welcome, WELCOME_TEXT_COL, TEXT_ROW, hspi);
 80010f2:	f107 0118 	add.w	r1, r7, #24
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2314      	movs	r3, #20
 80010fc:	2205      	movs	r2, #5
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f7ff fe28 	bl	8000d54 <oledc_text>
		HAL_Delay(1000);
 8001104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001108:	f000 fa18 	bl	800153c <HAL_Delay>
	}

	oledc_fill_screen(BACKGROUND, hspi);
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	20ff      	movs	r0, #255	; 0xff
 8001110:	f7ff fd6c 	bl	8000bec <oledc_fill_screen>
	oledc_text(oledc, pulse, TEXT_COL, TEXT_ROW, hspi);
 8001114:	f107 0110 	add.w	r1, r7, #16
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2314      	movs	r3, #20
 800111e:	2214      	movs	r2, #20
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	f7ff fe17 	bl	8000d54 <oledc_text>
}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08005468 	.word	0x08005468
 8001134:	08005450 	.word	0x08005450
 8001138:	08005470 	.word	0x08005470

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_MspInit+0x44>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_MspInit+0x44>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6613      	str	r3, [r2, #96]	; 0x60
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x44>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_MspInit+0x44>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_MspInit+0x44>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	6593      	str	r3, [r2, #88]	; 0x58
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_MspInit+0x44>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <HAL_SPI_MspInit+0x8c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12f      	bne.n	8001206 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_SPI_MspInit+0x90>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <HAL_SPI_MspInit+0x90>)
 80011ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b0:	6613      	str	r3, [r2, #96]	; 0x60
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_SPI_MspInit+0x90>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_SPI_MspInit+0x90>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a14      	ldr	r2, [pc, #80]	; (8001214 <HAL_SPI_MspInit+0x90>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_SPI_MspInit+0x90>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_SDO_Pin|OLED_SDI_Pin;
 80011d6:	2338      	movs	r3, #56	; 0x38
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011e6:	2305      	movs	r3, #5
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <HAL_SPI_MspInit+0x94>)
 80011f2:	f000 fb57 	bl	80018a4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2023      	movs	r0, #35	; 0x23
 80011fc:	f000 fa9d 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001200:	2023      	movs	r0, #35	; 0x23
 8001202:	f000 fab6 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40013000 	.word	0x40013000
 8001214:	40021000 	.word	0x40021000
 8001218:	48000400 	.word	0x48000400

0800121c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d113      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_TIM_Base_MspInit+0x48>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_TIM_Base_MspInit+0x48>)
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	6593      	str	r3, [r2, #88]	; 0x58
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_TIM_Base_MspInit+0x48>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2036      	movs	r0, #54	; 0x36
 800124c:	f000 fa75 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001250:	2036      	movs	r0, #54	; 0x36
 8001252:	f000 fa8e 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40001000 	.word	0x40001000
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b09e      	sub	sp, #120	; 0x78
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2254      	movs	r2, #84	; 0x54
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f004 f8a3 	bl	80053d4 <memset>
  if(huart->Instance==USART2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a2c      	ldr	r2, [pc, #176]	; (8001344 <HAL_UART_MspInit+0xdc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d150      	bne.n	800133a <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001298:	2302      	movs	r3, #2
 800129a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fb4d 	bl	8002944 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012b0:	f7ff fb93 	bl	80009da <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_UART_MspInit+0xe0>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	4a23      	ldr	r2, [pc, #140]	; (8001348 <HAL_UART_MspInit+0xe0>)
 80012ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012be:	6593      	str	r3, [r2, #88]	; 0x58
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_UART_MspInit+0xe0>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_UART_MspInit+0xe0>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_UART_MspInit+0xe0>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_UART_MspInit+0xe0>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80012e4:	2304      	movs	r3, #4
 80012e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f4:	2307      	movs	r3, #7
 80012f6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f000 facf 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800130a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001318:	2303      	movs	r3, #3
 800131a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f000 fabd 	bl	80018a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2026      	movs	r0, #38	; 0x26
 8001330:	f000 fa03 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001334:	2026      	movs	r0, #38	; 0x26
 8001336:	f000 fa1c 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3778      	adds	r7, #120	; 0x78
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40004400 	.word	0x40004400
 8001348:	40021000 	.word	0x40021000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f8b0 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <SPI1_IRQHandler+0x10>)
 80013a6:	f001 fee5 	bl	8003174 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000088 	.word	0x20000088

080013b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <USART2_IRQHandler+0x10>)
 80013ba:	f002 fd67 	bl	8003e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000138 	.word	0x20000138

080013c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <TIM6_DAC_IRQHandler+0x10>)
 80013ce:	f002 fab0 	bl	8003932 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000ec 	.word	0x200000ec

080013dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001404:	f7ff ffea 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopForever+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142e:	f003 ffdf 	bl	80053f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001432:	f7ff f8ad 	bl	8000590 <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001444:	080065a0 	.word	0x080065a0
  ldr r2, =_sbss
 8001448:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800144c:	20000338 	.word	0x20000338

08001450 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_IRQHandler>

08001452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f961 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f80e 	bl	8001484 <HAL_InitTick>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	e001      	b.n	8001478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001474:	f7ff fe62 	bl	800113c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001478:	79fb      	ldrb	r3, [r7, #7]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_InitTick+0x6c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d023      	beq.n	80014e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_InitTick+0x70>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_InitTick+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f96d 	bl	800178e <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d809      	bhi.n	80014d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f000 f937 	bl	800173a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_InitTick+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e007      	b.n	80014e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e004      	b.n	80014e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	e001      	b.n	80014e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000018 	.word	0x20000018
 80014f4:	20000010 	.word	0x20000010
 80014f8:	20000014 	.word	0x20000014

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000018 	.word	0x20000018
 8001520:	200001fc 	.word	0x200001fc

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200001fc 	.word	0x200001fc

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000018 	.word	0x20000018

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <__NVIC_EnableIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff29 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff3e 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff31 	bl	80015e8 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d008      	beq.n	80017d0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2204      	movs	r2, #4
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e022      	b.n	8001816 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 020e 	bic.w	r2, r2, #14
 80017de:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	f003 021c 	and.w	r2, r3, #28
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	2101      	movs	r1, #1
 80017fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001802:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d005      	beq.n	8001846 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2204      	movs	r2, #4
 800183e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e029      	b.n	800189a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 020e 	bic.w	r2, r2, #14
 8001854:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0201 	bic.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f003 021c 	and.w	r2, r3, #28
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
    }
  }
  return status;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b2:	e148      	b.n	8001b46 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 813a 	beq.w	8001b40 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d005      	beq.n	80018e4 <HAL_GPIO_Init+0x40>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d130      	bne.n	8001946 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800191a:	2201      	movs	r2, #1
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	f003 0201 	and.w	r2, r3, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b03      	cmp	r3, #3
 8001950:	d017      	beq.n	8001982 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d123      	bne.n	80019d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	220f      	movs	r2, #15
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	08da      	lsrs	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3208      	adds	r2, #8
 80019d0:	6939      	ldr	r1, [r7, #16]
 80019d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0203 	and.w	r2, r3, #3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8094 	beq.w	8001b40 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a18:	4b52      	ldr	r3, [pc, #328]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1c:	4a51      	ldr	r2, [pc, #324]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6613      	str	r3, [r2, #96]	; 0x60
 8001a24:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a30:	4a4d      	ldr	r2, [pc, #308]	; (8001b68 <HAL_GPIO_Init+0x2c4>)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a5a:	d00d      	beq.n	8001a78 <HAL_GPIO_Init+0x1d4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a43      	ldr	r2, [pc, #268]	; (8001b6c <HAL_GPIO_Init+0x2c8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d007      	beq.n	8001a74 <HAL_GPIO_Init+0x1d0>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a42      	ldr	r2, [pc, #264]	; (8001b70 <HAL_GPIO_Init+0x2cc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_GPIO_Init+0x1cc>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e004      	b.n	8001a7a <HAL_GPIO_Init+0x1d6>
 8001a70:	2307      	movs	r3, #7
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x1d6>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_GPIO_Init+0x1d6>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	f002 0203 	and.w	r2, r2, #3
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	4093      	lsls	r3, r2
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a8a:	4937      	ldr	r1, [pc, #220]	; (8001b68 <HAL_GPIO_Init+0x2c4>)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001abc:	4a2d      	ldr	r2, [pc, #180]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b10:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f47f aeaf 	bne.w	80018b4 <HAL_GPIO_Init+0x10>
  }
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	48000400 	.word	0x48000400
 8001b70:	48000800 	.word	0x48000800
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e001      	b.n	8001b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb8:	787b      	ldrb	r3, [r7, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	041a      	lsls	r2, r3, #16
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43d9      	mvns	r1, r3
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40007000 	.word	0x40007000

08001c28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c36:	d130      	bne.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c38:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c44:	d038      	beq.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2232      	movs	r2, #50	; 0x32
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	0c9b      	lsrs	r3, r3, #18
 8001c68:	3301      	adds	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6c:	e002      	b.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c80:	d102      	bne.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f2      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c94:	d110      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e00f      	b.n	8001cba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca6:	d007      	beq.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cb0:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	20000010 	.word	0x20000010
 8001cd0:	431bde83 	.word	0x431bde83

08001cd4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f000 bc02 	b.w	80024ec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce8:	4b96      	ldr	r3, [pc, #600]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf2:	4b94      	ldr	r3, [pc, #592]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80e4 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4c>
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	f040 808b 	bne.w	8001e2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	f040 8087 	bne.w	8001e2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d20:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_OscConfig+0x64>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e3d9      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1a      	ldr	r2, [r3, #32]
 8001d3c:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_RCC_OscConfig+0x7e>
 8001d48:	4b7e      	ldr	r3, [pc, #504]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d50:	e005      	b.n	8001d5e <HAL_RCC_OscConfig+0x8a>
 8001d52:	4b7c      	ldr	r3, [pc, #496]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d223      	bcs.n	8001daa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fd8c 	bl	8002884 <RCC_SetFlashLatencyFromMSIRange>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e3ba      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d76:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a72      	ldr	r2, [pc, #456]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b70      	ldr	r3, [pc, #448]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	496d      	ldr	r1, [pc, #436]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d94:	4b6b      	ldr	r3, [pc, #428]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	4968      	ldr	r1, [pc, #416]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	e025      	b.n	8001df6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001daa:	4b66      	ldr	r3, [pc, #408]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a65      	ldr	r2, [pc, #404]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4960      	ldr	r1, [pc, #384]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc8:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	495b      	ldr	r1, [pc, #364]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fd4c 	bl	8002884 <RCC_SetFlashLatencyFromMSIRange>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e37a      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001df6:	f000 fc81 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	4b51      	ldr	r3, [pc, #324]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4950      	ldr	r1, [pc, #320]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e08:	5ccb      	ldrb	r3, [r1, r3]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e12:	4a4e      	ldr	r2, [pc, #312]	; (8001f4c <HAL_RCC_OscConfig+0x278>)
 8001e14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e16:	4b4e      	ldr	r3, [pc, #312]	; (8001f50 <HAL_RCC_OscConfig+0x27c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fb32 	bl	8001484 <HAL_InitTick>
 8001e20:	4603      	mov	r3, r0
 8001e22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d052      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	e35e      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d032      	beq.n	8001e9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e36:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a42      	ldr	r2, [pc, #264]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fb6f 	bl	8001524 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fb6b 	bl	8001524 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e347      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e5c:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e68:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a35      	ldr	r2, [pc, #212]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e6e:	f043 0308 	orr.w	r3, r3, #8
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4930      	ldr	r1, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e86:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	492b      	ldr	r1, [pc, #172]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
 8001e9a:	e01a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fb3c 	bl	8001524 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fb38 	bl	8001524 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e314      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1dc>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d073      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x21c>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d10e      	bne.n	8001f08 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d10b      	bne.n	8001f08 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d063      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x2f0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d15f      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e2f1      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d106      	bne.n	8001f20 <HAL_RCC_OscConfig+0x24c>
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e025      	b.n	8001f6c <HAL_RCC_OscConfig+0x298>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f28:	d114      	bne.n	8001f54 <HAL_RCC_OscConfig+0x280>
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a02      	ldr	r2, [pc, #8]	; (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e013      	b.n	8001f6c <HAL_RCC_OscConfig+0x298>
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08006444 	.word	0x08006444
 8001f4c:	20000010 	.word	0x20000010
 8001f50:	20000014 	.word	0x20000014
 8001f54:	4ba0      	ldr	r3, [pc, #640]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a9f      	ldr	r2, [pc, #636]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b9d      	ldr	r3, [pc, #628]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a9c      	ldr	r2, [pc, #624]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff fad6 	bl	8001524 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fad2 	bl	8001524 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e2ae      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8e:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x2a8>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fac2 	bl	8001524 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fabe 	bl	8001524 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e29a      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fb6:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x2d0>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d060      	beq.n	8002094 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x310>
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d119      	bne.n	8002012 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d116      	bne.n	8002012 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe4:	4b7c      	ldr	r3, [pc, #496]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_OscConfig+0x328>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e277      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	4973      	ldr	r1, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002010:	e040      	b.n	8002094 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d023      	beq.n	8002062 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff fa7d 	bl	8001524 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff fa79 	bl	8001524 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e255      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002040:	4b65      	ldr	r3, [pc, #404]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	495f      	ldr	r1, [pc, #380]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
 8002060:	e018      	b.n	8002094 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800206c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7ff fa59 	bl	8001524 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff fa55 	bl	8001524 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e231      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002088:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d03c      	beq.n	800211a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a8:	4b4b      	ldr	r3, [pc, #300]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff fa34 	bl	8001524 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff fa30 	bl	8001524 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e20c      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ef      	beq.n	80020c0 <HAL_RCC_OscConfig+0x3ec>
 80020e0:	e01b      	b.n	800211a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e8:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff fa17 	bl	8001524 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fa:	f7ff fa13 	bl	8001524 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e1ef      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800210c:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ef      	bne.n	80020fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80a6 	beq.w	8002274 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800213e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x508>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d118      	bne.n	8002192 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_RCC_OscConfig+0x508>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_RCC_OscConfig+0x508>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216c:	f7ff f9da 	bl	8001524 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002174:	f7ff f9d6 	bl	8001524 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1b2      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_RCC_OscConfig+0x508>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d108      	bne.n	80021ac <HAL_RCC_OscConfig+0x4d8>
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a0:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021aa:	e029      	b.n	8002200 <HAL_RCC_OscConfig+0x52c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d115      	bne.n	80021e0 <HAL_RCC_OscConfig+0x50c>
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	4a03      	ldr	r2, [pc, #12]	; (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d4:	e014      	b.n	8002200 <HAL_RCC_OscConfig+0x52c>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	4b9a      	ldr	r3, [pc, #616]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	4a99      	ldr	r2, [pc, #612]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f0:	4b96      	ldr	r3, [pc, #600]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	4a95      	ldr	r2, [pc, #596]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d016      	beq.n	8002236 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff f98c 	bl	8001524 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7ff f988 	bl	8001524 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e162      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ed      	beq.n	8002210 <HAL_RCC_OscConfig+0x53c>
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7ff f975 	bl	8001524 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7ff f971 	bl	8001524 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e14b      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002254:	4b7d      	ldr	r3, [pc, #500]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1ed      	bne.n	800223e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002262:	7ffb      	ldrb	r3, [r7, #31]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	4b78      	ldr	r3, [pc, #480]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	4a77      	ldr	r2, [pc, #476]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800226e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002272:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d03c      	beq.n	80022fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01c      	beq.n	80022c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002288:	4b70      	ldr	r3, [pc, #448]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800228a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800228e:	4a6f      	ldr	r2, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7ff f944 	bl	8001524 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a0:	f7ff f940 	bl	8001524 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e11c      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022b2:	4b66      	ldr	r3, [pc, #408]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80022b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ef      	beq.n	80022a0 <HAL_RCC_OscConfig+0x5cc>
 80022c0:	e01b      	b.n	80022fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022c2:	4b62      	ldr	r3, [pc, #392]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80022c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022c8:	4a60      	ldr	r2, [pc, #384]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7ff f927 	bl	8001524 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022da:	f7ff f923 	bl	8001524 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0ff      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022ec:	4b57      	ldr	r3, [pc, #348]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80022ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ef      	bne.n	80022da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80f3 	beq.w	80024ea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	2b02      	cmp	r3, #2
 800230a:	f040 80c9 	bne.w	80024a0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800230e:	4b4f      	ldr	r3, [pc, #316]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0203 	and.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	429a      	cmp	r2, r3
 8002320:	d12c      	bne.n	800237c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	3b01      	subs	r3, #1
 800232e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d123      	bne.n	800237c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d11b      	bne.n	800237c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d113      	bne.n	800237c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	3b01      	subs	r3, #1
 8002362:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d109      	bne.n	800237c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	3b01      	subs	r3, #1
 8002376:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d06b      	beq.n	8002454 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d062      	beq.n	8002448 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002382:	4b32      	ldr	r3, [pc, #200]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0ac      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2d      	ldr	r2, [pc, #180]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800239e:	f7ff f8c1 	bl	8001524 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7ff f8bd 	bl	8001524 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e099      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b8:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_RCC_OscConfig+0x778>)
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <HAL_RCC_OscConfig+0x77c>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d4:	3a01      	subs	r2, #1
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	4311      	orrs	r1, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023de:	0212      	lsls	r2, r2, #8
 80023e0:	4311      	orrs	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023e6:	0852      	lsrs	r2, r2, #1
 80023e8:	3a01      	subs	r2, #1
 80023ea:	0552      	lsls	r2, r2, #21
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023f2:	0852      	lsrs	r2, r2, #1
 80023f4:	3a01      	subs	r2, #1
 80023f6:	0652      	lsls	r2, r2, #25
 80023f8:	4311      	orrs	r1, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023fe:	06d2      	lsls	r2, r2, #27
 8002400:	430a      	orrs	r2, r1
 8002402:	4912      	ldr	r1, [pc, #72]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002404:	4313      	orrs	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800240e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002412:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_RCC_OscConfig+0x778>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002420:	f7ff f880 	bl	8001524 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff f87c 	bl	8001524 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e058      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <HAL_RCC_OscConfig+0x778>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002446:	e050      	b.n	80024ea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e04f      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
 800244c:	40021000 	.word	0x40021000
 8002450:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d144      	bne.n	80024ea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a23      	ldr	r2, [pc, #140]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 8002466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800246a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 8002472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002476:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002478:	f7ff f854 	bl	8001524 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff f850 	bl	8001524 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e02c      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x7ac>
 800249e:	e024      	b.n	80024ea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d01f      	beq.n	80024e6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 80024ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7ff f837 	bl	8001524 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff f833 	bl	8001524 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e00f      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	4905      	ldr	r1, [pc, #20]	; (80024f4 <HAL_RCC_OscConfig+0x820>)
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_OscConfig+0x824>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	60cb      	str	r3, [r1, #12]
 80024e4:	e001      	b.n	80024ea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	feeefffc 	.word	0xfeeefffc

080024fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0e7      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b75      	ldr	r3, [pc, #468]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b72      	ldr	r3, [pc, #456]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	4970      	ldr	r1, [pc, #448]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b6e      	ldr	r3, [pc, #440]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0cf      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d010      	beq.n	800256e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4b66      	ldr	r3, [pc, #408]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002558:	429a      	cmp	r2, r3
 800255a:	d908      	bls.n	800256e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4960      	ldr	r1, [pc, #384]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d04c      	beq.n	8002614 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002582:	4b5a      	ldr	r3, [pc, #360]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d121      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0a6      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800259a:	4b54      	ldr	r3, [pc, #336]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d115      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e09a      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b2:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e08e      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e086      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4943      	ldr	r1, [pc, #268]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e4:	f7fe ff9e 	bl	8001524 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7fe ff9a 	bl	8001524 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e06e      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 020c 	and.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	429a      	cmp	r2, r3
 8002612:	d1eb      	bne.n	80025ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d010      	beq.n	8002642 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800262c:	429a      	cmp	r2, r3
 800262e:	d208      	bcs.n	8002642 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	492b      	ldr	r1, [pc, #172]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d210      	bcs.n	8002672 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 0207 	bic.w	r2, r3, #7
 8002658:	4923      	ldr	r1, [pc, #140]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e036      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4918      	ldr	r1, [pc, #96]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d009      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4910      	ldr	r1, [pc, #64]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026b0:	f000 f824 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_RCC_ClockConfig+0x1f0>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	490b      	ldr	r1, [pc, #44]	; (80026f0 <HAL_RCC_ClockConfig+0x1f4>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1fc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fed5 	bl	8001484 <HAL_InitTick>
 80026da:	4603      	mov	r3, r0
 80026dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80026de:	7afb      	ldrb	r3, [r7, #11]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08006444 	.word	0x08006444
 80026f4:	20000010 	.word	0x20000010
 80026f8:	20000014 	.word	0x20000014

080026fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002714:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x34>
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d121      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d11e      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002730:	4b34      	ldr	r3, [pc, #208]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800273c:	4b31      	ldr	r3, [pc, #196]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e005      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800274c:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002758:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <HAL_RCC_GetSysClockFreq+0x10c>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10d      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d102      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_RCC_GetSysClockFreq+0x110>)
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	e004      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d101      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_RCC_GetSysClockFreq+0x114>)
 8002782:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d134      	bne.n	80027f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800278a:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d003      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0xac>
 80027a0:	e005      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <HAL_RCC_GetSysClockFreq+0x110>)
 80027a4:	617b      	str	r3, [r7, #20]
      break;
 80027a6:	e005      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_GetSysClockFreq+0x114>)
 80027aa:	617b      	str	r3, [r7, #20]
      break;
 80027ac:	e002      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	617b      	str	r3, [r7, #20]
      break;
 80027b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	3301      	adds	r3, #1
 80027c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	fb03 f202 	mul.w	r2, r3, r2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	0e5b      	lsrs	r3, r3, #25
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	3301      	adds	r3, #1
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027f4:	69bb      	ldr	r3, [r7, #24]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	0800645c 	.word	0x0800645c
 800280c:	00f42400 	.word	0x00f42400
 8002810:	007a1200 	.word	0x007a1200

08002814 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_RCC_GetHCLKFreq+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	20000010 	.word	0x20000010

0800282c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002830:	f7ff fff0 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	4904      	ldr	r1, [pc, #16]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	08006454 	.word	0x08006454

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800285c:	f7ff ffda 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0adb      	lsrs	r3, r3, #11
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x28>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	08006454 	.word	0x08006454

08002884 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800289c:	f7ff f9b6 	bl	8001c0c <HAL_PWREx_GetVoltageRange>
 80028a0:	6178      	str	r0, [r7, #20]
 80028a2:	e014      	b.n	80028ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6593      	str	r3, [r2, #88]	; 0x58
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028bc:	f7ff f9a6 	bl	8001c0c <HAL_PWREx_GetVoltageRange>
 80028c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	4b1e      	ldr	r3, [pc, #120]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	4a1d      	ldr	r2, [pc, #116]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d4:	d10b      	bne.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b80      	cmp	r3, #128	; 0x80
 80028da:	d919      	bls.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2ba0      	cmp	r3, #160	; 0xa0
 80028e0:	d902      	bls.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028e2:	2302      	movs	r3, #2
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	e013      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028e8:	2301      	movs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e010      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b80      	cmp	r3, #128	; 0x80
 80028f2:	d902      	bls.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028f4:	2303      	movs	r3, #3
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	e00a      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d102      	bne.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002900:	2302      	movs	r3, #2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e004      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b70      	cmp	r3, #112	; 0x70
 800290a:	d101      	bne.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800290c:	2301      	movs	r3, #1
 800290e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 0207 	bic.w	r2, r3, #7
 8002918:	4909      	ldr	r1, [pc, #36]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	429a      	cmp	r2, r3
 800292c:	d001      	beq.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	40022000 	.word	0x40022000

08002944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800294c:	2300      	movs	r3, #0
 800294e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002950:	2300      	movs	r3, #0
 8002952:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295c:	2b00      	cmp	r3, #0
 800295e:	d031      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002968:	d01a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800296a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800296e:	d814      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d009      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002974:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002978:	d10f      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4a5c      	ldr	r2, [pc, #368]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002986:	e00c      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f9ce 	bl	8002d30 <RCCEx_PLLSAI1_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002998:	e003      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	74fb      	strb	r3, [r7, #19]
      break;
 800299e:	e000      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80029a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a8:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	494e      	ldr	r1, [pc, #312]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029be:	e001      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 809e 	beq.w	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029d6:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	4a3f      	ldr	r2, [pc, #252]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f6:	6593      	str	r3, [r2, #88]	; 0x58
 80029f8:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a04:	2301      	movs	r3, #1
 8002a06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a39      	ldr	r2, [pc, #228]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fd86 	bl	8001524 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a1a:	e009      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1c:	f7fe fd82 	bl	8001524 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d902      	bls.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a2e:	e005      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a30:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ef      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d15a      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01e      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d019      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a8a:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d016      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fd42 	bl	8001524 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa2:	e00b      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fd3e 	bl	8001524 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d902      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	74fb      	strb	r3, [r7, #19]
            break;
 8002aba:	e006      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ec      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	4904      	ldr	r1, [pc, #16]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ae6:	e009      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	74bb      	strb	r3, [r7, #18]
 8002aec:	e006      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002afc:	7c7b      	ldrb	r3, [r7, #17]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b02:	4b8a      	ldr	r3, [pc, #552]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b06:	4a89      	ldr	r2, [pc, #548]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b1a:	4b84      	ldr	r3, [pc, #528]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	f023 0203 	bic.w	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4980      	ldr	r1, [pc, #512]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b3c:	4b7b      	ldr	r3, [pc, #492]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f023 020c 	bic.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	4978      	ldr	r1, [pc, #480]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b5e:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	496f      	ldr	r1, [pc, #444]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	4967      	ldr	r1, [pc, #412]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ba2:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	495e      	ldr	r1, [pc, #376]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	4956      	ldr	r1, [pc, #344]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002be6:	4b51      	ldr	r3, [pc, #324]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	494d      	ldr	r1, [pc, #308]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d028      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c08:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4945      	ldr	r1, [pc, #276]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c26:	d106      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c28:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a3f      	ldr	r2, [pc, #252]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c32:	60d3      	str	r3, [r2, #12]
 8002c34:	e011      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f872 	bl	8002d30 <RCCEx_PLLSAI1_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c66:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	492d      	ldr	r1, [pc, #180]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c84:	d106      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c90:	60d3      	str	r3, [r2, #12]
 8002c92:	e011      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f843 	bl	8002d30 <RCCEx_PLLSAI1_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d01c      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	4916      	ldr	r1, [pc, #88]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	2102      	movs	r1, #2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f820 	bl	8002d30 <RCCEx_PLLSAI1_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	4904      	ldr	r1, [pc, #16]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d20:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000

08002d30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d3e:	4b74      	ldr	r3, [pc, #464]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d018      	beq.n	8002d7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d4a:	4b71      	ldr	r3, [pc, #452]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0203 	and.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d10d      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d62:	4b6b      	ldr	r3, [pc, #428]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
       ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d047      	beq.n	8002e06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	e044      	b.n	8002e06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d018      	beq.n	8002db6 <RCCEx_PLLSAI1_Config+0x86>
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d825      	bhi.n	8002dd4 <RCCEx_PLLSAI1_Config+0xa4>
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d002      	beq.n	8002d92 <RCCEx_PLLSAI1_Config+0x62>
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d009      	beq.n	8002da4 <RCCEx_PLLSAI1_Config+0x74>
 8002d90:	e020      	b.n	8002dd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d92:	4b5f      	ldr	r3, [pc, #380]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11d      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da2:	e01a      	b.n	8002dda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002da4:	4b5a      	ldr	r3, [pc, #360]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d116      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db4:	e013      	b.n	8002dde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002db6:	4b56      	ldr	r3, [pc, #344]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10f      	bne.n	8002de2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dc2:	4b53      	ldr	r3, [pc, #332]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dd2:	e006      	b.n	8002de2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd8:	e004      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002de2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dea:	4b49      	ldr	r3, [pc, #292]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	4943      	ldr	r1, [pc, #268]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d17c      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e0c:	4b40      	ldr	r3, [pc, #256]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a3f      	ldr	r2, [pc, #252]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e18:	f7fe fb84 	bl	8001524 <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e1e:	e009      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e20:	f7fe fb80 	bl	8001524 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	73fb      	strb	r3, [r7, #15]
        break;
 8002e32:	e005      	b.n	8002e40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e34:	4b36      	ldr	r3, [pc, #216]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ef      	bne.n	8002e20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d15f      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d110      	bne.n	8002e6e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e4c:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6892      	ldr	r2, [r2, #8]
 8002e5c:	0211      	lsls	r1, r2, #8
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	06d2      	lsls	r2, r2, #27
 8002e64:	430a      	orrs	r2, r1
 8002e66:	492a      	ldr	r1, [pc, #168]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	610b      	str	r3, [r1, #16]
 8002e6c:	e027      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d112      	bne.n	8002e9a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e74:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	0211      	lsls	r1, r2, #8
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6912      	ldr	r2, [r2, #16]
 8002e8a:	0852      	lsrs	r2, r2, #1
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	0552      	lsls	r2, r2, #21
 8002e90:	430a      	orrs	r2, r1
 8002e92:	491f      	ldr	r1, [pc, #124]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	610b      	str	r3, [r1, #16]
 8002e98:	e011      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ea2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6892      	ldr	r2, [r2, #8]
 8002eaa:	0211      	lsls	r1, r2, #8
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6952      	ldr	r2, [r2, #20]
 8002eb0:	0852      	lsrs	r2, r2, #1
 8002eb2:	3a01      	subs	r2, #1
 8002eb4:	0652      	lsls	r2, r2, #25
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	4915      	ldr	r1, [pc, #84]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe fb2b 	bl	8001524 <HAL_GetTick>
 8002ece:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ed0:	e009      	b.n	8002ee6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ed2:	f7fe fb27 	bl	8001524 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d902      	bls.n	8002ee6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ee4:	e005      	b.n	8002ef2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0ef      	beq.n	8002ed2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e095      	b.n	8003052 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f36:	d009      	beq.n	8002f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
 8002f3e:	e005      	b.n	8002f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fe f90c 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f8c:	d902      	bls.n	8002f94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	e002      	b.n	8002f9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fa2:	d007      	beq.n	8002fb4 <HAL_SPI_Init+0xa0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fac:	d002      	beq.n	8002fb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	ea42 0103 	orr.w	r1, r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	0c1b      	lsrs	r3, r3, #16
 8003010:	f003 0204 	and.w	r2, r3, #4
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003030:	ea42 0103 	orr.w	r1, r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_SPI_Transmit_IT+0x1e>
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800307e:	e06d      	b.n	800315c <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d002      	beq.n	8003092 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 800308c:	2302      	movs	r3, #2
 800308e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003090:	e064      	b.n	800315c <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_SPI_Transmit_IT+0x44>
 800309c:	2302      	movs	r3, #2
 800309e:	e05e      	b.n	800315e <HAL_SPI_Transmit_IT+0x102>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2203      	movs	r2, #3
 80030ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ec:	d903      	bls.n	80030f6 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a1e      	ldr	r2, [pc, #120]	; (800316c <HAL_SPI_Transmit_IT+0x110>)
 80030f2:	651a      	str	r2, [r3, #80]	; 0x50
 80030f4:	e002      	b.n	80030fc <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <HAL_SPI_Transmit_IT+0x114>)
 80030fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003104:	d10f      	bne.n	8003126 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003114:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003124:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d007      	beq.n	8003144 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800315a:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
}
 800315e:	4618      	mov	r0, r3
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	080033f5 	.word	0x080033f5
 8003170:	080033af 	.word	0x080033af

08003174 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10e      	bne.n	80031b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d004      	beq.n	80031b4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
    return;
 80031b2:	e0ce      	b.n	8003352 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_SPI_IRQHandler+0x5e>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d004      	beq.n	80031d2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
    return;
 80031d0:	e0bf      	b.n	8003352 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <HAL_SPI_IRQHandler+0x7e>
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80b0 	beq.w	8003352 <HAL_SPI_IRQHandler+0x1de>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80aa 	beq.w	8003352 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b03      	cmp	r3, #3
 8003212:	d011      	beq.n	8003238 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003218:	f043 0204 	orr.w	r2, r3, #4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	e00b      	b.n	8003250 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
        return;
 800324e:	e080      	b.n	8003352 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d014      	beq.n	8003284 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325e:	f043 0201 	orr.w	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00c      	beq.n	80032a8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003292:	f043 0208 	orr.w	r2, r3, #8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d04f      	beq.n	8003350 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032be:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <HAL_SPI_IRQHandler+0x168>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d034      	beq.n	8003346 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0203 	bic.w	r2, r2, #3
 80032ea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d011      	beq.n	8003318 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	4a17      	ldr	r2, [pc, #92]	; (8003358 <HAL_SPI_IRQHandler+0x1e4>)
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe fa8e 	bl	8001822 <HAL_DMA_Abort_IT>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003310:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331c:	2b00      	cmp	r3, #0
 800331e:	d016      	beq.n	800334e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <HAL_SPI_IRQHandler+0x1e4>)
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fa78 	bl	8001822 <HAL_DMA_Abort_IT>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003344:	e003      	b.n	800334e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f812 	bl	8003370 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800334c:	e000      	b.n	8003350 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800334e:	bf00      	nop
    return;
 8003350:	bf00      	nop
  }
}
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08003385 	.word	0x08003385

0800335c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7ff ffe5 	bl	8003370 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	7812      	ldrb	r2, [r2, #0]
 80033c2:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f98a 	bl	8003700 <SPI_CloseTx_ISR>
  }
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	1c9a      	adds	r2, r3, #2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f968 	bl	8003700 <SPI_CloseTx_ISR>
  }
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003448:	f7fe f86c 	bl	8001524 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	4413      	add	r3, r2
 8003456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003458:	f7fe f864 	bl	8001524 <HAL_GetTick>
 800345c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	015b      	lsls	r3, r3, #5
 8003464:	0d1b      	lsrs	r3, r3, #20
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	fb02 f303 	mul.w	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800346e:	e054      	b.n	800351a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d050      	beq.n	800351a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003478:	f7fe f854 	bl	8001524 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	429a      	cmp	r2, r3
 8003486:	d902      	bls.n	800348e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d13d      	bne.n	800350a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800349c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a6:	d111      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b0:	d004      	beq.n	80034bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ba:	d107      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d4:	d10f      	bne.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e017      	b.n	800353a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3b01      	subs	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	429a      	cmp	r2, r3
 8003536:	d19b      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000010 	.word	0x20000010

08003548 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800355a:	f7fd ffe3 	bl	8001524 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	4413      	add	r3, r2
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800356a:	f7fd ffdb 	bl	8001524 <HAL_GetTick>
 800356e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	330c      	adds	r3, #12
 8003576:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003578:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00da      	lsls	r2, r3, #3
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	0d1b      	lsrs	r3, r3, #20
 8003588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003590:	e060      	b.n	8003654 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003598:	d107      	bne.n	80035aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d050      	beq.n	8003654 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035b2:	f7fd ffb7 	bl	8001524 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035be:	429a      	cmp	r2, r3
 80035c0:	d902      	bls.n	80035c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d13d      	bne.n	8003644 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e0:	d111      	bne.n	8003606 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ea:	d004      	beq.n	80035f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f4:	d107      	bne.n	8003606 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003604:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360e:	d10f      	bne.n	8003630 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800362e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e010      	b.n	8003666 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	3b01      	subs	r3, #1
 8003652:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	d196      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000010 	.word	0x20000010

08003674 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2200      	movs	r2, #0
 8003688:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ff5b 	bl	8003548 <SPI_WaitFifoStateUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d007      	beq.n	80036a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e027      	b.n	80036f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2200      	movs	r2, #0
 80036b0:	2180      	movs	r1, #128	; 0x80
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7ff fec0 	bl	8003438 <SPI_WaitFlagStateUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c2:	f043 0220 	orr.w	r2, r3, #32
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e014      	b.n	80036f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff ff34 	bl	8003548 <SPI_WaitFifoStateUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e000      	b.n	80036f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003708:	f7fd ff0c 	bl	8001524 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800371c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	2164      	movs	r1, #100	; 0x64
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ffa6 	bl	8003674 <SPI_EndRxTxTransaction>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff fe01 	bl	8003370 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800376e:	e002      	b.n	8003776 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fdf3 	bl	800335c <HAL_SPI_TxCpltCallback>
}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e049      	b.n	8003824 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7fd fd39 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f000 f9e3 	bl	8003b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d001      	beq.n	8003844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e03b      	b.n	80038bc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_TIM_Base_Start_IT+0x4e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d004      	beq.n	800387a <HAL_TIM_Base_Start_IT+0x4e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a15      	ldr	r2, [pc, #84]	; (80038cc <HAL_TIM_Base_Start_IT+0xa0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d115      	bne.n	80038a6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <HAL_TIM_Base_Start_IT+0xa4>)
 8003882:	4013      	ands	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b06      	cmp	r3, #6
 800388a:	d015      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x8c>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003892:	d011      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a4:	e008      	b.n	80038b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	e000      	b.n	80038ba <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40014000 	.word	0x40014000
 80038d0:	00010007 	.word	0x00010007

080038d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a1a      	ldr	r2, [r3, #32]
 80038f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10f      	bne.n	800391c <HAL_TIM_Base_Stop_IT+0x48>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	f240 4344 	movw	r3, #1092	; 0x444
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d107      	bne.n	800391c <HAL_TIM_Base_Stop_IT+0x48>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01b      	beq.n	8003996 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0202 	mvn.w	r2, #2
 8003966:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f8e4 	bl	8003b4a <HAL_TIM_IC_CaptureCallback>
 8003982:	e005      	b.n	8003990 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f8d6 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8e7 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01b      	beq.n	80039e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f06f 0204 	mvn.w	r2, #4
 80039b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f8be 	bl	8003b4a <HAL_TIM_IC_CaptureCallback>
 80039ce:	e005      	b.n	80039dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8b0 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8c1 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d020      	beq.n	8003a2e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01b      	beq.n	8003a2e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0208 	mvn.w	r2, #8
 80039fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2204      	movs	r2, #4
 8003a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f898 	bl	8003b4a <HAL_TIM_IC_CaptureCallback>
 8003a1a:	e005      	b.n	8003a28 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f88a 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f89b 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01b      	beq.n	8003a7a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f06f 0210 	mvn.w	r2, #16
 8003a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2208      	movs	r2, #8
 8003a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f872 	bl	8003b4a <HAL_TIM_IC_CaptureCallback>
 8003a66:	e005      	b.n	8003a74 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f864 	bl	8003b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f875 	bl	8003b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00c      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f06f 0201 	mvn.w	r2, #1
 8003a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7fc ff91 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00c      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f937 	bl	8003d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00c      	beq.n	8003ae6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f92f 	bl	8003d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00c      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f834 	bl	8003b72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00c      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f06f 0220 	mvn.w	r2, #32
 8003b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f8f7 	bl	8003d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <TIM_Base_SetConfig+0xbc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_Base_SetConfig+0x20>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba6:	d108      	bne.n	8003bba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a21      	ldr	r2, [pc, #132]	; (8003c44 <TIM_Base_SetConfig+0xbc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <TIM_Base_SetConfig+0x52>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d007      	beq.n	8003bda <TIM_Base_SetConfig+0x52>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <TIM_Base_SetConfig+0xc0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_Base_SetConfig+0x52>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <TIM_Base_SetConfig+0xc4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d108      	bne.n	8003bec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a0c      	ldr	r2, [pc, #48]	; (8003c44 <TIM_Base_SetConfig+0xbc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_Base_SetConfig+0xa0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <TIM_Base_SetConfig+0xc0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_Base_SetConfig+0xa0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <TIM_Base_SetConfig+0xc4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d103      	bne.n	8003c30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	615a      	str	r2, [r3, #20]
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40014000 	.word	0x40014000
 8003c4c:	40014400 	.word	0x40014400

08003c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e04f      	b.n	8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d108      	bne.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd0:	d004      	beq.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a10      	ldr	r2, [pc, #64]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10c      	bne.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40014000 	.word	0x40014000

08003d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e040      	b.n	8003dec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fd fa74 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2224      	movs	r2, #36	; 0x24
 8003d84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0201 	bic.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fdaa 	bl	80048f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fb7b 	bl	80044a0 <UART_SetConfig>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e01b      	b.n	8003dec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fe29 	bl	8004a3c <UART_CheckIdleState>
 8003dea:	4603      	mov	r3, r0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	; 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d137      	bne.n	8003e7c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_UART_Receive_IT+0x24>
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e030      	b.n	8003e7e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_UART_Receive_IT+0x94>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d01f      	beq.n	8003e6c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d018      	beq.n	8003e6c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	613b      	str	r3, [r7, #16]
   return(result);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	623b      	str	r3, [r7, #32]
 8003e5a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	69f9      	ldr	r1, [r7, #28]
 8003e5e:	6a3a      	ldr	r2, [r7, #32]
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e6      	bne.n	8003e3a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fef2 	bl	8004c5c <UART_Start_Receive_IT>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3728      	adds	r7, #40	; 0x28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40008000 	.word	0x40008000

08003e8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b0ba      	sub	sp, #232	; 0xe8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003eb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003eb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003eba:	4013      	ands	r3, r2
 8003ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ec0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d115      	bne.n	8003ef4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00f      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 82ae 	beq.w	8004446 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
      }
      return;
 8003ef2:	e2a8      	b.n	8004446 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8117 	beq.w	800412c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f0e:	4b85      	ldr	r3, [pc, #532]	; (8004124 <HAL_UART_IRQHandler+0x298>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 810a 	beq.w	800412c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d011      	beq.n	8003f48 <HAL_UART_IRQHandler+0xbc>
 8003f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2201      	movs	r2, #1
 8003f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d011      	beq.n	8003f78 <HAL_UART_IRQHandler+0xec>
 8003f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2202      	movs	r2, #2
 8003f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6e:	f043 0204 	orr.w	r2, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d011      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x11c>
 8003f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00b      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2204      	movs	r2, #4
 8003f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d017      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fda:	f043 0208 	orr.w	r2, r3, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d012      	beq.n	8004016 <HAL_UART_IRQHandler+0x18a>
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00c      	beq.n	8004016 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8214 	beq.w	800444a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004050:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d005      	beq.n	800406e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004066:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800406a:	2b00      	cmp	r3, #0
 800406c:	d04f      	beq.n	800410e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 feba 	bl	8004de8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d141      	bne.n	8004106 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800409c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3308      	adds	r3, #8
 80040aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1d9      	bne.n	8004082 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d013      	beq.n	80040fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040da:	4a13      	ldr	r2, [pc, #76]	; (8004128 <HAL_UART_IRQHandler+0x29c>)
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fb9d 	bl	8001822 <HAL_DMA_Abort_IT>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d017      	beq.n	800411e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040f8:	4610      	mov	r0, r2
 80040fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	e00f      	b.n	800411e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9b8 	bl	8004474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	e00b      	b.n	800411e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f9b4 	bl	8004474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	e007      	b.n	800411e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f9b0 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800411c:	e195      	b.n	800444a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411e:	bf00      	nop
    return;
 8004120:	e193      	b.n	800444a <HAL_UART_IRQHandler+0x5be>
 8004122:	bf00      	nop
 8004124:	04000120 	.word	0x04000120
 8004128:	08004eb1 	.word	0x08004eb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	2b01      	cmp	r3, #1
 8004132:	f040 814e 	bne.w	80043d2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8147 	beq.w	80043d2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8140 	beq.w	80043d2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2210      	movs	r2, #16
 8004158:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b40      	cmp	r3, #64	; 0x40
 8004166:	f040 80b8 	bne.w	80042da <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004176:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8167 	beq.w	800444e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800418a:	429a      	cmp	r2, r3
 800418c:	f080 815f 	bcs.w	800444e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 8086 	bne.w	80042b8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1da      	bne.n	80041ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3308      	adds	r3, #8
 8004216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800421a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800421e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004222:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800422c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e1      	bne.n	80041f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3308      	adds	r3, #8
 8004238:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004256:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004258:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800425c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e3      	bne.n	8004232 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004288:	f023 0310 	bic.w	r3, r3, #16
 800428c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800429a:	65bb      	str	r3, [r7, #88]	; 0x58
 800429c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e4      	bne.n	8004278 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd fa77 	bl	80017a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f8d8 	bl	8004488 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042d8:	e0b9      	b.n	800444e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80ab 	beq.w	8004452 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80042fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80a6 	beq.w	8004452 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800431a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004328:	647b      	str	r3, [r7, #68]	; 0x44
 800432a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800432e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e4      	bne.n	8004306 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	623b      	str	r3, [r7, #32]
   return(result);
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3308      	adds	r3, #8
 800435c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004360:	633a      	str	r2, [r7, #48]	; 0x30
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e3      	bne.n	800433c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	60fb      	str	r3, [r7, #12]
   return(result);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f023 0310 	bic.w	r3, r3, #16
 800439c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	617b      	str	r3, [r7, #20]
   return(result);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e4      	bne.n	8004388 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f85c 	bl	8004488 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043d0:	e03f      	b.n	8004452 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00e      	beq.n	80043fc <HAL_UART_IRQHandler+0x570>
 80043de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 ff57 	bl	80052a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043fa:	e02d      	b.n	8004458 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00e      	beq.n	8004426 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800440c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01c      	beq.n	8004456 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	4798      	blx	r3
    }
    return;
 8004424:	e017      	b.n	8004456 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d012      	beq.n	8004458 <HAL_UART_IRQHandler+0x5cc>
 8004432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fd4c 	bl	8004edc <UART_EndTransmit_IT>
    return;
 8004444:	e008      	b.n	8004458 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004446:	bf00      	nop
 8004448:	e006      	b.n	8004458 <HAL_UART_IRQHandler+0x5cc>
    return;
 800444a:	bf00      	nop
 800444c:	e004      	b.n	8004458 <HAL_UART_IRQHandler+0x5cc>
      return;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004456:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004458:	37e8      	adds	r7, #232	; 0xe8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop

08004460 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a4:	b08a      	sub	sp, #40	; 0x28
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	431a      	orrs	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4bb4      	ldr	r3, [pc, #720]	; (80047a0 <UART_SetConfig+0x300>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044d8:	430b      	orrs	r3, r1
 80044da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4aa9      	ldr	r2, [pc, #676]	; (80047a4 <UART_SetConfig+0x304>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004508:	4313      	orrs	r3, r2
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451c:	430a      	orrs	r2, r1
 800451e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4aa0      	ldr	r2, [pc, #640]	; (80047a8 <UART_SetConfig+0x308>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d126      	bne.n	8004578 <UART_SetConfig+0xd8>
 800452a:	4ba0      	ldr	r3, [pc, #640]	; (80047ac <UART_SetConfig+0x30c>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	2b03      	cmp	r3, #3
 8004536:	d81b      	bhi.n	8004570 <UART_SetConfig+0xd0>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART_SetConfig+0xa0>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004551 	.word	0x08004551
 8004544:	08004561 	.word	0x08004561
 8004548:	08004559 	.word	0x08004559
 800454c:	08004569 	.word	0x08004569
 8004550:	2301      	movs	r3, #1
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004556:	e080      	b.n	800465a <UART_SetConfig+0x1ba>
 8004558:	2302      	movs	r3, #2
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455e:	e07c      	b.n	800465a <UART_SetConfig+0x1ba>
 8004560:	2304      	movs	r3, #4
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004566:	e078      	b.n	800465a <UART_SetConfig+0x1ba>
 8004568:	2308      	movs	r3, #8
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456e:	e074      	b.n	800465a <UART_SetConfig+0x1ba>
 8004570:	2310      	movs	r3, #16
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e070      	b.n	800465a <UART_SetConfig+0x1ba>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a8c      	ldr	r2, [pc, #560]	; (80047b0 <UART_SetConfig+0x310>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d138      	bne.n	80045f4 <UART_SetConfig+0x154>
 8004582:	4b8a      	ldr	r3, [pc, #552]	; (80047ac <UART_SetConfig+0x30c>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b0c      	cmp	r3, #12
 800458e:	d82d      	bhi.n	80045ec <UART_SetConfig+0x14c>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <UART_SetConfig+0xf8>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045cd 	.word	0x080045cd
 800459c:	080045ed 	.word	0x080045ed
 80045a0:	080045ed 	.word	0x080045ed
 80045a4:	080045ed 	.word	0x080045ed
 80045a8:	080045dd 	.word	0x080045dd
 80045ac:	080045ed 	.word	0x080045ed
 80045b0:	080045ed 	.word	0x080045ed
 80045b4:	080045ed 	.word	0x080045ed
 80045b8:	080045d5 	.word	0x080045d5
 80045bc:	080045ed 	.word	0x080045ed
 80045c0:	080045ed 	.word	0x080045ed
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	080045e5 	.word	0x080045e5
 80045cc:	2300      	movs	r3, #0
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d2:	e042      	b.n	800465a <UART_SetConfig+0x1ba>
 80045d4:	2302      	movs	r3, #2
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045da:	e03e      	b.n	800465a <UART_SetConfig+0x1ba>
 80045dc:	2304      	movs	r3, #4
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e2:	e03a      	b.n	800465a <UART_SetConfig+0x1ba>
 80045e4:	2308      	movs	r3, #8
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ea:	e036      	b.n	800465a <UART_SetConfig+0x1ba>
 80045ec:	2310      	movs	r3, #16
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f2:	e032      	b.n	800465a <UART_SetConfig+0x1ba>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a6a      	ldr	r2, [pc, #424]	; (80047a4 <UART_SetConfig+0x304>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d12a      	bne.n	8004654 <UART_SetConfig+0x1b4>
 80045fe:	4b6b      	ldr	r3, [pc, #428]	; (80047ac <UART_SetConfig+0x30c>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800460c:	d01a      	beq.n	8004644 <UART_SetConfig+0x1a4>
 800460e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004612:	d81b      	bhi.n	800464c <UART_SetConfig+0x1ac>
 8004614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004618:	d00c      	beq.n	8004634 <UART_SetConfig+0x194>
 800461a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461e:	d815      	bhi.n	800464c <UART_SetConfig+0x1ac>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <UART_SetConfig+0x18c>
 8004624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004628:	d008      	beq.n	800463c <UART_SetConfig+0x19c>
 800462a:	e00f      	b.n	800464c <UART_SetConfig+0x1ac>
 800462c:	2300      	movs	r3, #0
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004632:	e012      	b.n	800465a <UART_SetConfig+0x1ba>
 8004634:	2302      	movs	r3, #2
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e00e      	b.n	800465a <UART_SetConfig+0x1ba>
 800463c:	2304      	movs	r3, #4
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e00a      	b.n	800465a <UART_SetConfig+0x1ba>
 8004644:	2308      	movs	r3, #8
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e006      	b.n	800465a <UART_SetConfig+0x1ba>
 800464c:	2310      	movs	r3, #16
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e002      	b.n	800465a <UART_SetConfig+0x1ba>
 8004654:	2310      	movs	r3, #16
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a51      	ldr	r2, [pc, #324]	; (80047a4 <UART_SetConfig+0x304>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d17a      	bne.n	800475a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004668:	2b08      	cmp	r3, #8
 800466a:	d824      	bhi.n	80046b6 <UART_SetConfig+0x216>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <UART_SetConfig+0x1d4>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004699 	.word	0x08004699
 8004678:	080046b7 	.word	0x080046b7
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046b7 	.word	0x080046b7
 8004684:	080046a7 	.word	0x080046a7
 8004688:	080046b7 	.word	0x080046b7
 800468c:	080046b7 	.word	0x080046b7
 8004690:	080046b7 	.word	0x080046b7
 8004694:	080046af 	.word	0x080046af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004698:	f7fe f8c8 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 800469c:	61f8      	str	r0, [r7, #28]
        break;
 800469e:	e010      	b.n	80046c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a0:	4b44      	ldr	r3, [pc, #272]	; (80047b4 <UART_SetConfig+0x314>)
 80046a2:	61fb      	str	r3, [r7, #28]
        break;
 80046a4:	e00d      	b.n	80046c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a6:	f7fe f829 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80046aa:	61f8      	str	r0, [r7, #28]
        break;
 80046ac:	e009      	b.n	80046c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b2:	61fb      	str	r3, [r7, #28]
        break;
 80046b4:	e005      	b.n	80046c2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8107 	beq.w	80048d8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	4413      	add	r3, r2
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d305      	bcc.n	80046e6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d903      	bls.n	80046ee <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046ec:	e0f4      	b.n	80048d8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	2200      	movs	r2, #0
 80046f2:	461c      	mov	r4, r3
 80046f4:	4615      	mov	r5, r2
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	022b      	lsls	r3, r5, #8
 8004700:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004704:	0222      	lsls	r2, r4, #8
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	6849      	ldr	r1, [r1, #4]
 800470a:	0849      	lsrs	r1, r1, #1
 800470c:	2000      	movs	r0, #0
 800470e:	4688      	mov	r8, r1
 8004710:	4681      	mov	r9, r0
 8004712:	eb12 0a08 	adds.w	sl, r2, r8
 8004716:	eb43 0b09 	adc.w	fp, r3, r9
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004728:	4650      	mov	r0, sl
 800472a:	4659      	mov	r1, fp
 800472c:	f7fb fd4e 	bl	80001cc <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4613      	mov	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800473e:	d308      	bcc.n	8004752 <UART_SetConfig+0x2b2>
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004746:	d204      	bcs.n	8004752 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	60da      	str	r2, [r3, #12]
 8004750:	e0c2      	b.n	80048d8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004758:	e0be      	b.n	80048d8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004762:	d16a      	bne.n	800483a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004768:	2b08      	cmp	r3, #8
 800476a:	d834      	bhi.n	80047d6 <UART_SetConfig+0x336>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0x2d4>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004799 	.word	0x08004799
 8004778:	080047b9 	.word	0x080047b9
 800477c:	080047c1 	.word	0x080047c1
 8004780:	080047d7 	.word	0x080047d7
 8004784:	080047c7 	.word	0x080047c7
 8004788:	080047d7 	.word	0x080047d7
 800478c:	080047d7 	.word	0x080047d7
 8004790:	080047d7 	.word	0x080047d7
 8004794:	080047cf 	.word	0x080047cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004798:	f7fe f848 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 800479c:	61f8      	str	r0, [r7, #28]
        break;
 800479e:	e020      	b.n	80047e2 <UART_SetConfig+0x342>
 80047a0:	efff69f3 	.word	0xefff69f3
 80047a4:	40008000 	.word	0x40008000
 80047a8:	40013800 	.word	0x40013800
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40004400 	.word	0x40004400
 80047b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b8:	f7fe f84e 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 80047bc:	61f8      	str	r0, [r7, #28]
        break;
 80047be:	e010      	b.n	80047e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c0:	4b4c      	ldr	r3, [pc, #304]	; (80048f4 <UART_SetConfig+0x454>)
 80047c2:	61fb      	str	r3, [r7, #28]
        break;
 80047c4:	e00d      	b.n	80047e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c6:	f7fd ff99 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80047ca:	61f8      	str	r0, [r7, #28]
        break;
 80047cc:	e009      	b.n	80047e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d2:	61fb      	str	r3, [r7, #28]
        break;
 80047d4:	e005      	b.n	80047e2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d077      	beq.n	80048d8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	005a      	lsls	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	441a      	add	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b0f      	cmp	r3, #15
 8004802:	d916      	bls.n	8004832 <UART_SetConfig+0x392>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480a:	d212      	bcs.n	8004832 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f023 030f 	bic.w	r3, r3, #15
 8004814:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	085b      	lsrs	r3, r3, #1
 800481a:	b29b      	uxth	r3, r3
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	b29a      	uxth	r2, r3
 8004822:	8afb      	ldrh	r3, [r7, #22]
 8004824:	4313      	orrs	r3, r2
 8004826:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	8afa      	ldrh	r2, [r7, #22]
 800482e:	60da      	str	r2, [r3, #12]
 8004830:	e052      	b.n	80048d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004838:	e04e      	b.n	80048d8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800483a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800483e:	2b08      	cmp	r3, #8
 8004840:	d827      	bhi.n	8004892 <UART_SetConfig+0x3f2>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <UART_SetConfig+0x3a8>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	0800486d 	.word	0x0800486d
 800484c:	08004875 	.word	0x08004875
 8004850:	0800487d 	.word	0x0800487d
 8004854:	08004893 	.word	0x08004893
 8004858:	08004883 	.word	0x08004883
 800485c:	08004893 	.word	0x08004893
 8004860:	08004893 	.word	0x08004893
 8004864:	08004893 	.word	0x08004893
 8004868:	0800488b 	.word	0x0800488b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800486c:	f7fd ffde 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8004870:	61f8      	str	r0, [r7, #28]
        break;
 8004872:	e014      	b.n	800489e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7fd fff0 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8004878:	61f8      	str	r0, [r7, #28]
        break;
 800487a:	e010      	b.n	800489e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <UART_SetConfig+0x454>)
 800487e:	61fb      	str	r3, [r7, #28]
        break;
 8004880:	e00d      	b.n	800489e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004882:	f7fd ff3b 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8004886:	61f8      	str	r0, [r7, #28]
        break;
 8004888:	e009      	b.n	800489e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488e:	61fb      	str	r3, [r7, #28]
        break;
 8004890:	e005      	b.n	800489e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800489c:	bf00      	nop
    }

    if (pclk != 0U)
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d019      	beq.n	80048d8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	085a      	lsrs	r2, r3, #1
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	441a      	add	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b0f      	cmp	r3, #15
 80048bc:	d909      	bls.n	80048d2 <UART_SetConfig+0x432>
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c4:	d205      	bcs.n	80048d2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60da      	str	r2, [r3, #12]
 80048d0:	e002      	b.n	80048d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3728      	adds	r7, #40	; 0x28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f2:	bf00      	nop
 80048f4:	00f42400 	.word	0x00f42400

080048f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f6:	d10a      	bne.n	8004a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b098      	sub	sp, #96	; 0x60
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a4c:	f7fc fd6a 	bl	8001524 <HAL_GetTick>
 8004a50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d12e      	bne.n	8004abe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f88c 	bl	8004b8c <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d021      	beq.n	8004abe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a98:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e6      	bne.n	8004a7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e062      	b.n	8004b84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d149      	bne.n	8004b60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f856 	bl	8004b8c <UART_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d03c      	beq.n	8004b60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	623b      	str	r3, [r7, #32]
   return(result);
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b04:	633b      	str	r3, [r7, #48]	; 0x30
 8004b06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e6      	bne.n	8004ae6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b38:	61fa      	str	r2, [r7, #28]
 8004b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	617b      	str	r3, [r7, #20]
   return(result);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e5      	bne.n	8004b18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e011      	b.n	8004b84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3758      	adds	r7, #88	; 0x58
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9c:	e049      	b.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d045      	beq.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba6:	f7fc fcbd 	bl	8001524 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d302      	bcc.n	8004bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e048      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d031      	beq.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d110      	bne.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2208      	movs	r2, #8
 8004be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f8ff 	bl	8004de8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2208      	movs	r2, #8
 8004bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e029      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c0c:	d111      	bne.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f8e5 	bl	8004de8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e00f      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	bf0c      	ite	eq
 8004c42:	2301      	moveq	r3, #1
 8004c44:	2300      	movne	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d0a6      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b097      	sub	sp, #92	; 0x5c
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	88fa      	ldrh	r2, [r7, #6]
 8004c74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8e:	d10e      	bne.n	8004cae <UART_Start_Receive_IT+0x52>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <UART_Start_Receive_IT+0x48>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ca2:	e02d      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	22ff      	movs	r2, #255	; 0xff
 8004ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cac:	e028      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10d      	bne.n	8004cd2 <UART_Start_Receive_IT+0x76>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <UART_Start_Receive_IT+0x6c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	22ff      	movs	r2, #255	; 0xff
 8004cc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cc6:	e01b      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	227f      	movs	r2, #127	; 0x7f
 8004ccc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cd0:	e016      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cda:	d10d      	bne.n	8004cf8 <UART_Start_Receive_IT+0x9c>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <UART_Start_Receive_IT+0x92>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	227f      	movs	r2, #127	; 0x7f
 8004ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cec:	e008      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	223f      	movs	r2, #63	; 0x3f
 8004cf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cf6:	e003      	b.n	8004d00 <UART_Start_Receive_IT+0xa4>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2222      	movs	r2, #34	; 0x22
 8004d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	657b      	str	r3, [r7, #84]	; 0x54
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d30:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4c:	d107      	bne.n	8004d5e <UART_Start_Receive_IT+0x102>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a21      	ldr	r2, [pc, #132]	; (8004de0 <UART_Start_Receive_IT+0x184>)
 8004d5a:	669a      	str	r2, [r3, #104]	; 0x68
 8004d5c:	e002      	b.n	8004d64 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a20      	ldr	r2, [pc, #128]	; (8004de4 <UART_Start_Receive_IT+0x188>)
 8004d62:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d019      	beq.n	8004da0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e6      	bne.n	8004d6c <UART_Start_Receive_IT+0x110>
 8004d9e:	e018      	b.n	8004dd2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	613b      	str	r3, [r7, #16]
   return(result);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f043 0320 	orr.w	r3, r3, #32
 8004db4:	653b      	str	r3, [r7, #80]	; 0x50
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dbe:	623b      	str	r3, [r7, #32]
 8004dc0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	69f9      	ldr	r1, [r7, #28]
 8004dc4:	6a3a      	ldr	r2, [r7, #32]
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e6      	bne.n	8004da0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	375c      	adds	r7, #92	; 0x5c
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	080050ed 	.word	0x080050ed
 8004de4:	08004f31 	.word	0x08004f31

08004de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b095      	sub	sp, #84	; 0x54
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e6      	bne.n	8004df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3308      	adds	r3, #8
 8004e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e5      	bne.n	8004e22 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d118      	bne.n	8004e90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f023 0310 	bic.w	r3, r3, #16
 8004e72:	647b      	str	r3, [r7, #68]	; 0x44
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6979      	ldr	r1, [r7, #20]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	613b      	str	r3, [r7, #16]
   return(result);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e6      	bne.n	8004e5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ea4:	bf00      	nop
 8004ea6:	3754      	adds	r7, #84	; 0x54
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff fad0 	bl	8004474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6979      	ldr	r1, [r7, #20]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e6      	bne.n	8004ee4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff fa9c 	bl	8004460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f28:	bf00      	nop
 8004f2a:	3720      	adds	r7, #32
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b09c      	sub	sp, #112	; 0x70
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f48:	2b22      	cmp	r3, #34	; 0x22
 8004f4a:	f040 80be 	bne.w	80050ca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f5c:	b2d9      	uxtb	r1, r3
 8004f5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	400a      	ands	r2, r1
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 80a3 	bne.w	80050de <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fac:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e6      	bne.n	8004f98 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	667b      	str	r3, [r7, #100]	; 0x64
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fea:	647a      	str	r2, [r7, #68]	; 0x44
 8004fec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e5      	bne.n	8004fca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a34      	ldr	r2, [pc, #208]	; (80050e8 <UART_RxISR_8BIT+0x1b8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d01f      	beq.n	800505c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d018      	beq.n	800505c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	623b      	str	r3, [r7, #32]
   return(result);
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800503e:	663b      	str	r3, [r7, #96]	; 0x60
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005048:	633b      	str	r3, [r7, #48]	; 0x30
 800504a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800504e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e6      	bne.n	800502a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005060:	2b01      	cmp	r3, #1
 8005062:	d12e      	bne.n	80050c2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	60fb      	str	r3, [r7, #12]
   return(result);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0310 	bic.w	r3, r3, #16
 800507e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	617b      	str	r3, [r7, #20]
   return(result);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b10      	cmp	r3, #16
 80050a8:	d103      	bne.n	80050b2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2210      	movs	r2, #16
 80050b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff f9e4 	bl	8004488 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050c0:	e00d      	b.n	80050de <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fb fc40 	bl	8000948 <HAL_UART_RxCpltCallback>
}
 80050c8:	e009      	b.n	80050de <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	8b1b      	ldrh	r3, [r3, #24]
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0208 	orr.w	r2, r2, #8
 80050da:	b292      	uxth	r2, r2
 80050dc:	831a      	strh	r2, [r3, #24]
}
 80050de:	bf00      	nop
 80050e0:	3770      	adds	r7, #112	; 0x70
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40008000 	.word	0x40008000

080050ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b09c      	sub	sp, #112	; 0x70
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005104:	2b22      	cmp	r3, #34	; 0x22
 8005106:	f040 80be 	bne.w	8005286 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005110:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800511a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800511e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005122:	4013      	ands	r3, r2
 8005124:	b29a      	uxth	r2, r3
 8005126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005128:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 80a3 	bne.w	800529a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005168:	667b      	str	r3, [r7, #100]	; 0x64
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005172:	657b      	str	r3, [r7, #84]	; 0x54
 8005174:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e6      	bne.n	8005154 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	663b      	str	r3, [r7, #96]	; 0x60
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3308      	adds	r3, #8
 80051a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051a6:	643a      	str	r2, [r7, #64]	; 0x40
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e5      	bne.n	8005186 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <UART_RxISR_16BIT+0x1b8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d01f      	beq.n	8005218 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d018      	beq.n	8005218 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005206:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800520a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e6      	bne.n	80051e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521c:	2b01      	cmp	r3, #1
 800521e:	d12e      	bne.n	800527e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	60bb      	str	r3, [r7, #8]
   return(result);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f023 0310 	bic.w	r3, r3, #16
 800523a:	65bb      	str	r3, [r7, #88]	; 0x58
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6979      	ldr	r1, [r7, #20]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	613b      	str	r3, [r7, #16]
   return(result);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e6      	bne.n	8005226 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b10      	cmp	r3, #16
 8005264:	d103      	bne.n	800526e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2210      	movs	r2, #16
 800526c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff f906 	bl	8004488 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800527c:	e00d      	b.n	800529a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb fb62 	bl	8000948 <HAL_UART_RxCpltCallback>
}
 8005284:	e009      	b.n	800529a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	8b1b      	ldrh	r3, [r3, #24]
 800528c:	b29a      	uxth	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0208 	orr.w	r2, r2, #8
 8005296:	b292      	uxth	r2, r2
 8005298:	831a      	strh	r2, [r3, #24]
}
 800529a:	bf00      	nop
 800529c:	3770      	adds	r7, #112	; 0x70
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40008000 	.word	0x40008000

080052a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <_strtol_l.constprop.0>:
 80052bc:	2b01      	cmp	r3, #1
 80052be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c2:	d001      	beq.n	80052c8 <_strtol_l.constprop.0+0xc>
 80052c4:	2b24      	cmp	r3, #36	; 0x24
 80052c6:	d906      	bls.n	80052d6 <_strtol_l.constprop.0+0x1a>
 80052c8:	f000 f88c 	bl	80053e4 <__errno>
 80052cc:	2316      	movs	r3, #22
 80052ce:	6003      	str	r3, [r0, #0]
 80052d0:	2000      	movs	r0, #0
 80052d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80053bc <_strtol_l.constprop.0+0x100>
 80052da:	460d      	mov	r5, r1
 80052dc:	462e      	mov	r6, r5
 80052de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80052e6:	f017 0708 	ands.w	r7, r7, #8
 80052ea:	d1f7      	bne.n	80052dc <_strtol_l.constprop.0+0x20>
 80052ec:	2c2d      	cmp	r4, #45	; 0x2d
 80052ee:	d132      	bne.n	8005356 <_strtol_l.constprop.0+0x9a>
 80052f0:	782c      	ldrb	r4, [r5, #0]
 80052f2:	2701      	movs	r7, #1
 80052f4:	1cb5      	adds	r5, r6, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d05b      	beq.n	80053b2 <_strtol_l.constprop.0+0xf6>
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d109      	bne.n	8005312 <_strtol_l.constprop.0+0x56>
 80052fe:	2c30      	cmp	r4, #48	; 0x30
 8005300:	d107      	bne.n	8005312 <_strtol_l.constprop.0+0x56>
 8005302:	782c      	ldrb	r4, [r5, #0]
 8005304:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005308:	2c58      	cmp	r4, #88	; 0x58
 800530a:	d14d      	bne.n	80053a8 <_strtol_l.constprop.0+0xec>
 800530c:	786c      	ldrb	r4, [r5, #1]
 800530e:	2310      	movs	r3, #16
 8005310:	3502      	adds	r5, #2
 8005312:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005316:	f108 38ff 	add.w	r8, r8, #4294967295
 800531a:	f04f 0e00 	mov.w	lr, #0
 800531e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005322:	4676      	mov	r6, lr
 8005324:	fb03 8a19 	mls	sl, r3, r9, r8
 8005328:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800532c:	f1bc 0f09 	cmp.w	ip, #9
 8005330:	d816      	bhi.n	8005360 <_strtol_l.constprop.0+0xa4>
 8005332:	4664      	mov	r4, ip
 8005334:	42a3      	cmp	r3, r4
 8005336:	dd24      	ble.n	8005382 <_strtol_l.constprop.0+0xc6>
 8005338:	f1be 3fff 	cmp.w	lr, #4294967295
 800533c:	d008      	beq.n	8005350 <_strtol_l.constprop.0+0x94>
 800533e:	45b1      	cmp	r9, r6
 8005340:	d31c      	bcc.n	800537c <_strtol_l.constprop.0+0xc0>
 8005342:	d101      	bne.n	8005348 <_strtol_l.constprop.0+0x8c>
 8005344:	45a2      	cmp	sl, r4
 8005346:	db19      	blt.n	800537c <_strtol_l.constprop.0+0xc0>
 8005348:	fb06 4603 	mla	r6, r6, r3, r4
 800534c:	f04f 0e01 	mov.w	lr, #1
 8005350:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005354:	e7e8      	b.n	8005328 <_strtol_l.constprop.0+0x6c>
 8005356:	2c2b      	cmp	r4, #43	; 0x2b
 8005358:	bf04      	itt	eq
 800535a:	782c      	ldrbeq	r4, [r5, #0]
 800535c:	1cb5      	addeq	r5, r6, #2
 800535e:	e7ca      	b.n	80052f6 <_strtol_l.constprop.0+0x3a>
 8005360:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005364:	f1bc 0f19 	cmp.w	ip, #25
 8005368:	d801      	bhi.n	800536e <_strtol_l.constprop.0+0xb2>
 800536a:	3c37      	subs	r4, #55	; 0x37
 800536c:	e7e2      	b.n	8005334 <_strtol_l.constprop.0+0x78>
 800536e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005372:	f1bc 0f19 	cmp.w	ip, #25
 8005376:	d804      	bhi.n	8005382 <_strtol_l.constprop.0+0xc6>
 8005378:	3c57      	subs	r4, #87	; 0x57
 800537a:	e7db      	b.n	8005334 <_strtol_l.constprop.0+0x78>
 800537c:	f04f 3eff 	mov.w	lr, #4294967295
 8005380:	e7e6      	b.n	8005350 <_strtol_l.constprop.0+0x94>
 8005382:	f1be 3fff 	cmp.w	lr, #4294967295
 8005386:	d105      	bne.n	8005394 <_strtol_l.constprop.0+0xd8>
 8005388:	2322      	movs	r3, #34	; 0x22
 800538a:	6003      	str	r3, [r0, #0]
 800538c:	4646      	mov	r6, r8
 800538e:	b942      	cbnz	r2, 80053a2 <_strtol_l.constprop.0+0xe6>
 8005390:	4630      	mov	r0, r6
 8005392:	e79e      	b.n	80052d2 <_strtol_l.constprop.0+0x16>
 8005394:	b107      	cbz	r7, 8005398 <_strtol_l.constprop.0+0xdc>
 8005396:	4276      	negs	r6, r6
 8005398:	2a00      	cmp	r2, #0
 800539a:	d0f9      	beq.n	8005390 <_strtol_l.constprop.0+0xd4>
 800539c:	f1be 0f00 	cmp.w	lr, #0
 80053a0:	d000      	beq.n	80053a4 <_strtol_l.constprop.0+0xe8>
 80053a2:	1e69      	subs	r1, r5, #1
 80053a4:	6011      	str	r1, [r2, #0]
 80053a6:	e7f3      	b.n	8005390 <_strtol_l.constprop.0+0xd4>
 80053a8:	2430      	movs	r4, #48	; 0x30
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1b1      	bne.n	8005312 <_strtol_l.constprop.0+0x56>
 80053ae:	2308      	movs	r3, #8
 80053b0:	e7af      	b.n	8005312 <_strtol_l.constprop.0+0x56>
 80053b2:	2c30      	cmp	r4, #48	; 0x30
 80053b4:	d0a5      	beq.n	8005302 <_strtol_l.constprop.0+0x46>
 80053b6:	230a      	movs	r3, #10
 80053b8:	e7ab      	b.n	8005312 <_strtol_l.constprop.0+0x56>
 80053ba:	bf00      	nop
 80053bc:	0800648d 	.word	0x0800648d

080053c0 <strtol>:
 80053c0:	4613      	mov	r3, r2
 80053c2:	460a      	mov	r2, r1
 80053c4:	4601      	mov	r1, r0
 80053c6:	4802      	ldr	r0, [pc, #8]	; (80053d0 <strtol+0x10>)
 80053c8:	6800      	ldr	r0, [r0, #0]
 80053ca:	f7ff bf77 	b.w	80052bc <_strtol_l.constprop.0>
 80053ce:	bf00      	nop
 80053d0:	20000068 	.word	0x20000068

080053d4 <memset>:
 80053d4:	4402      	add	r2, r0
 80053d6:	4603      	mov	r3, r0
 80053d8:	4293      	cmp	r3, r2
 80053da:	d100      	bne.n	80053de <memset+0xa>
 80053dc:	4770      	bx	lr
 80053de:	f803 1b01 	strb.w	r1, [r3], #1
 80053e2:	e7f9      	b.n	80053d8 <memset+0x4>

080053e4 <__errno>:
 80053e4:	4b01      	ldr	r3, [pc, #4]	; (80053ec <__errno+0x8>)
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000068 	.word	0x20000068

080053f0 <__libc_init_array>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	4d0d      	ldr	r5, [pc, #52]	; (8005428 <__libc_init_array+0x38>)
 80053f4:	4c0d      	ldr	r4, [pc, #52]	; (800542c <__libc_init_array+0x3c>)
 80053f6:	1b64      	subs	r4, r4, r5
 80053f8:	10a4      	asrs	r4, r4, #2
 80053fa:	2600      	movs	r6, #0
 80053fc:	42a6      	cmp	r6, r4
 80053fe:	d109      	bne.n	8005414 <__libc_init_array+0x24>
 8005400:	4d0b      	ldr	r5, [pc, #44]	; (8005430 <__libc_init_array+0x40>)
 8005402:	4c0c      	ldr	r4, [pc, #48]	; (8005434 <__libc_init_array+0x44>)
 8005404:	f000 f818 	bl	8005438 <_init>
 8005408:	1b64      	subs	r4, r4, r5
 800540a:	10a4      	asrs	r4, r4, #2
 800540c:	2600      	movs	r6, #0
 800540e:	42a6      	cmp	r6, r4
 8005410:	d105      	bne.n	800541e <__libc_init_array+0x2e>
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	f855 3b04 	ldr.w	r3, [r5], #4
 8005418:	4798      	blx	r3
 800541a:	3601      	adds	r6, #1
 800541c:	e7ee      	b.n	80053fc <__libc_init_array+0xc>
 800541e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005422:	4798      	blx	r3
 8005424:	3601      	adds	r6, #1
 8005426:	e7f2      	b.n	800540e <__libc_init_array+0x1e>
 8005428:	08006598 	.word	0x08006598
 800542c:	08006598 	.word	0x08006598
 8005430:	08006598 	.word	0x08006598
 8005434:	0800659c 	.word	0x0800659c

08005438 <_init>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	bf00      	nop
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr

08005444 <_fini>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	bf00      	nop
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr
