
mcsd-project-heartrate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052dc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000112c  08005468  08005468  00015468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006594  08006594  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006594  08006594  00016594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800659c  0800659c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080065a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000006c  08006610  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08006610  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014772  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae2  00000000  00000000  00034851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00037338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dff  00000000  00000000  00038520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e0d  00000000  00000000  0003931f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015eab  00000000  00000000  0005b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbd6d  00000000  00000000  00070fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d08  00000000  00000000  0013cd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00141a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000006c 	.word	0x2000006c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005450 	.word	0x08005450

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000070 	.word	0x20000070
 80001c8:	08005450 	.word	0x08005450

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <debounce>:
 */

#include "button.h"
#include "main.h"

bool debounce() {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	GPIO_PinState button;
	uint8_t counter = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]

	button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d8:	f001 fb5a 	bl	8001b90 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	71bb      	strb	r3, [r7, #6]
	while (button == 0) {
 80004e0:	e007      	b.n	80004f2 <debounce+0x2a>
		counter++;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	3301      	adds	r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
		if (counter > DEBOUNCE) {
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b05      	cmp	r3, #5
 80004ec:	d901      	bls.n	80004f2 <debounce+0x2a>
			return true;
 80004ee:	2301      	movs	r3, #1
 80004f0:	e003      	b.n	80004fa <debounce+0x32>
	while (button == 0) {
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f4      	beq.n	80004e2 <debounce+0x1a>
		}
	}
	return false;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <number_check>:
 */

#include "error_led.h"
#include "main.h"

void number_check(uint8_t number, TIM_HandleTypeDef *htim) {
 8000502:	b580      	push	{r7, lr}
 8000504:	b084      	sub	sp, #16
 8000506:	af00      	add	r7, sp, #0
 8000508:	4603      	mov	r3, r0
 800050a:	6039      	str	r1, [r7, #0]
 800050c:	71fb      	strb	r3, [r7, #7]
	uint8_t low = 10;
 800050e:	230a      	movs	r3, #10
 8000510:	73fb      	strb	r3, [r7, #15]
	uint8_t high = 99;
 8000512:	2363      	movs	r3, #99	; 0x63
 8000514:	73bb      	strb	r3, [r7, #14]

	if (number < low || number > high) {
 8000516:	79fa      	ldrb	r2, [r7, #7]
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	429a      	cmp	r2, r3
 800051c:	d303      	bcc.n	8000526 <number_check+0x24>
 800051e:	79fa      	ldrb	r2, [r7, #7]
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	429a      	cmp	r2, r3
 8000524:	d903      	bls.n	800052e <number_check+0x2c>
		error_led_blink(htim);
 8000526:	6838      	ldr	r0, [r7, #0]
 8000528:	f000 f810 	bl	800054c <error_led_blink>
 800052c:	e009      	b.n	8000542 <number_check+0x40>
	} else {
		HAL_TIM_Base_Stop_IT(htim);
 800052e:	6838      	ldr	r0, [r7, #0]
 8000530:	f003 f9dc 	bl	80038ec <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2140      	movs	r1, #64	; 0x40
 8000538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053c:	f001 fb40 	bl	8001bc0 <HAL_GPIO_WritePin>
	}
}
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <error_led_blink>:

void error_led_blink (TIM_HandleTypeDef *htim) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(htim, BLINK_TIME);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000564:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->EGR = 1;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <error_led_blink+0x4c>)
 8000570:	2201      	movs	r2, #1
 8000572:	615a      	str	r2, [r3, #20]
	__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f06f 0201 	mvn.w	r2, #1
 800057c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(htim);
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f003 f960 	bl	8003844 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_TogglePin(GPIOA, ERROR_LED_Pin);
 8000584:	2140      	movs	r1, #64	; 0x40
 8000586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058a:	f001 fb31 	bl	8001bf0 <HAL_GPIO_TogglePin>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40001000 	.word	0x40001000

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 ff62 	bl	800146a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f867 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f95d 	bl	8000868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f92b 	bl	8000808 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005b2:	f000 f8b3 	bl	800071c <MX_SPI1_Init>
  MX_TIM6_Init();
 80005b6:	f000 f8ef 	bl	8000798 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
oledc_default_cfg(&hspi1);
 80005ba:	4828      	ldr	r0, [pc, #160]	; (800065c <main+0xc0>)
 80005bc:	f000 fa46 	bl	8000a4c <oledc_default_cfg>
oledc_set_font(&oledc, guiFont_Tahoma_14_Regular, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	4927      	ldr	r1, [pc, #156]	; (8000660 <main+0xc4>)
 80005c4:	4827      	ldr	r0, [pc, #156]	; (8000664 <main+0xc8>)
 80005c6:	f000 fc26 	bl	8000e16 <oledc_set_font>
oledc_fill_screen(0xF800, &hspi1);
 80005ca:	4924      	ldr	r1, [pc, #144]	; (800065c <main+0xc0>)
 80005cc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80005d0:	f000 fb40 	bl	8000c54 <oledc_fill_screen>
uint8_t text1[] = "52";
 80005d4:	4a24      	ldr	r2, [pc, #144]	; (8000668 <main+0xcc>)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	6812      	ldr	r2, [r2, #0]
 80005dc:	4611      	mov	r1, r2
 80005de:	8019      	strh	r1, [r3, #0]
 80005e0:	3302      	adds	r3, #2
 80005e2:	0c12      	lsrs	r2, r2, #16
 80005e4:	701a      	strb	r2, [r3, #0]
uint8_t text2[] = "PULSE";
 80005e6:	4a21      	ldr	r2, [pc, #132]	; (800066c <main+0xd0>)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ee:	6018      	str	r0, [r3, #0]
 80005f0:	3304      	adds	r3, #4
 80005f2:	8019      	strh	r1, [r3, #0]
//uint8_t text3[] = "OXYGEN";
//uint8_t text3[] = "50";
oledc_text(&oledc, text2, 20, 20, &hspi1);
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <main+0xc0>)
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2314      	movs	r3, #20
 80005fc:	2214      	movs	r2, #20
 80005fe:	4819      	ldr	r0, [pc, #100]	; (8000664 <main+0xc8>)
 8000600:	f000 fbdc 	bl	8000dbc <oledc_text>
oledc_text(&oledc, text1, 40, 40, &hspi1);
 8000604:	f107 010c 	add.w	r1, r7, #12
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <main+0xc0>)
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2328      	movs	r3, #40	; 0x28
 800060e:	2228      	movs	r2, #40	; 0x28
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <main+0xc8>)
 8000612:	f000 fbd3 	bl	8000dbc <oledc_text>
//strcpy((char*)receive_frame_copy, (char*)text1);
HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2140      	movs	r1, #64	; 0x40
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f001 facf 	bl	8001bc0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 8000622:	e007      	b.n	8000634 <main+0x98>
		  if (!debounce())
 8000624:	f7ff ff50 	bl	80004c8 <debounce>
 8000628:	4603      	mov	r3, r0
 800062a:	f083 0301 	eor.w	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d108      	bne.n	8000646 <main+0xaa>
	  while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f001 faa9 	bl	8001b90 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0ef      	beq.n	8000624 <main+0x88>
 8000644:	e000      	b.n	8000648 <main+0xac>
			  break;
 8000646:	bf00      	nop
		  }

	  receive();
 8000648:	f000 f992 	bl	8000970 <receive>
	  oledc_update_number(&oledc, receive_frame, &hspi1, &htim6);
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <main+0xd4>)
 800064e:	4a03      	ldr	r2, [pc, #12]	; (800065c <main+0xc0>)
 8000650:	4908      	ldr	r1, [pc, #32]	; (8000674 <main+0xd8>)
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <main+0xc8>)
 8000654:	f000 fd51 	bl	80010fa <oledc_update_number>
	  while (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 8000658:	e7ec      	b.n	8000634 <main+0x98>
 800065a:	bf00      	nop
 800065c:	20000088 	.word	0x20000088
 8000660:	08005474 	.word	0x08005474
 8000664:	200001c4 	.word	0x200001c4
 8000668:	08005468 	.word	0x08005468
 800066c:	0800546c 	.word	0x0800546c
 8000670:	200000ec 	.word	0x200000ec
 8000674:	200001dc 	.word	0x200001dc

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	; 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2244      	movs	r2, #68	; 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 feb0 	bl	80053ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069e:	f001 facf 	bl	8001c40 <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a8:	f000 f9cb 	bl	8000a42 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ac:	2310      	movs	r3, #16
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c0:	2301      	movs	r3, #1
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fb05 	bl	8001cec <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006e8:	f000 f9ab 	bl	8000a42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	2101      	movs	r1, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f001 ff05 	bl	8002514 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000710:	f000 f997 	bl	8000a42 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3758      	adds	r7, #88	; 0x58
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_SPI1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_SPI1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_SPI1_Init+0x74>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_SPI1_Init+0x74>)
 8000736:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800073a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_SPI1_Init+0x74>)
 800073e:	2202      	movs	r2, #2
 8000740:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_SPI1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI1_Init+0x74>)
 800074a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI1_Init+0x74>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_SPI1_Init+0x74>)
 800077c:	f002 fbd6 	bl	8002f2c <HAL_SPI_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f95c 	bl	8000a42 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000088 	.word	0x20000088
 8000794:	40013000 	.word	0x40013000

08000798 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_TIM6_Init+0x68>)
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <MX_TIM6_Init+0x6c>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_TIM6_Init+0x68>)
 80007b0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80007b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_TIM6_Init+0x68>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_TIM6_Init+0x68>)
 80007be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_TIM6_Init+0x68>)
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_TIM6_Init+0x68>)
 80007cc:	f002 ffe3 	bl	8003796 <HAL_TIM_Base_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80007d6:	f000 f934 	bl	8000a42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_TIM6_Init+0x68>)
 80007e8:	f003 fa3e 	bl	8003c68 <HAL_TIMEx_MasterConfigSynchronization>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80007f2:	f000 f926 	bl	8000a42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000ec 	.word	0x200000ec
 8000804:	40001000 	.word	0x40001000

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MX_USART2_UART_Init+0x5c>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800084c:	f003 fa90 	bl	8003d70 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f8f4 	bl	8000a42 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000138 	.word	0x20000138
 8000864:	40004400 	.word	0x40004400

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <MX_GPIO_Init+0xfc>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a38      	ldr	r2, [pc, #224]	; (8000964 <MX_GPIO_Init+0xfc>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <MX_GPIO_Init+0xfc>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b33      	ldr	r3, [pc, #204]	; (8000964 <MX_GPIO_Init+0xfc>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a32      	ldr	r2, [pc, #200]	; (8000964 <MX_GPIO_Init+0xfc>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <MX_GPIO_Init+0xfc>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <MX_GPIO_Init+0xfc>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a2c      	ldr	r2, [pc, #176]	; (8000964 <MX_GPIO_Init+0xfc>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_GPIO_Init+0xfc>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008cc:	4826      	ldr	r0, [pc, #152]	; (8000968 <MX_GPIO_Init+0x100>)
 80008ce:	f001 f977 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RW_Pin|OLED_EN_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2149      	movs	r1, #73	; 0x49
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f001 f971 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2103      	movs	r1, #3
 80008e2:	4822      	ldr	r0, [pc, #136]	; (800096c <MX_GPIO_Init+0x104>)
 80008e4:	f001 f96c 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80008e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4819      	ldr	r0, [pc, #100]	; (8000968 <MX_GPIO_Init+0x100>)
 8000902:	f000 ffdb 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RW_Pin OLED_EN_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = OLED_RW_Pin|OLED_EN_Pin|ERROR_LED_Pin;
 8000906:	2349      	movs	r3, #73	; 0x49
 8000908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f000 ffcc 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f000 ffbf 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 800093e:	2303      	movs	r3, #3
 8000940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_GPIO_Init+0x104>)
 8000956:	f000 ffb1 	bl	80018bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	48000800 	.word	0x48000800
 800096c:	48000400 	.word	0x48000400

08000970 <receive>:

/* USER CODE BEGIN 4 */
void receive() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	while (eof_bool == false) {
 8000974:	e009      	b.n	800098a <receive+0x1a>
		if (HAL_UART_Receive_IT (&huart2, &rec_byte, RECBUF) == HAL_ERROR) {									// read
 8000976:	2201      	movs	r2, #1
 8000978:	490a      	ldr	r1, [pc, #40]	; (80009a4 <receive+0x34>)
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <receive+0x38>)
 800097c:	f003 fa46 	bl	8003e0c <HAL_UART_Receive_IT>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d101      	bne.n	800098a <receive+0x1a>
			Error_Handler();
 8000986:	f000 f85c 	bl	8000a42 <Error_Handler>
	while (eof_bool == false) {
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <receive+0x3c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f083 0301 	eor.w	r3, r3, #1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1ee      	bne.n	8000976 <receive+0x6>
		}
	}
	eof_bool = false;
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <receive+0x3c>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200001d8 	.word	0x200001d8
 80009a8:	20000138 	.word	0x20000138
 80009ac:	200001c0 	.word	0x200001c0

080009b0 <HAL_UART_RxCpltCallback>:
 * @brief 	UART receiving callback function. Copies each received byte into string "receive_frame".
 * 			Upon receiving end-of-frame "MYEOF" puts string terminator.
 * @param 	huart: 	UART handle.
 * @retval	None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <HAL_UART_RxCpltCallback+0x64>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d123      	bne.n	8000a08 <HAL_UART_RxCpltCallback+0x58>
		receive_frame[frame_index] = rec_byte;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_UART_RxCpltCallback+0x6c>)
 80009c8:	7819      	ldrb	r1, [r3, #0]
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_UART_RxCpltCallback+0x70>)
 80009cc:	5499      	strb	r1, [r3, r2]

		if (frame_index == FRAMELEN) {
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b1c      	cmp	r3, #28
 80009d4:	d102      	bne.n	80009dc <HAL_UART_RxCpltCallback+0x2c>
			frame_index = 0;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
		}
		frame_index++;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009e6:	701a      	strb	r2, [r3, #0]

		if (rec_byte == MYEOF) {
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_UART_RxCpltCallback+0x6c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b0a      	cmp	r3, #10
 80009ee:	d10b      	bne.n	8000a08 <HAL_UART_RxCpltCallback+0x58>
			receive_frame[frame_index] = '\0';
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_UART_RxCpltCallback+0x70>)
 80009f8:	2100      	movs	r1, #0
 80009fa:	5499      	strb	r1, [r3, r2]
			frame_index = 0;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_UART_RxCpltCallback+0x68>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
			eof_bool = true;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_UART_RxCpltCallback+0x74>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	20000138 	.word	0x20000138
 8000a18:	200001f8 	.word	0x200001f8
 8000a1c:	200001d8 	.word	0x200001d8
 8000a20:	200001dc 	.word	0x200001dc
 8000a24:	200001c0 	.word	0x200001c0

08000a28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, ERROR_LED_Pin);
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f001 f8db 	bl	8001bf0 <HAL_GPIO_TogglePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a46:	b672      	cpsid	i
}
 8000a48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <Error_Handler+0x8>

08000a4c <oledc_default_cfg>:
                                OLEDC_RMP_SPLIT_ENABLE | OLEDC_COLOR_65K;

static  uint8_t OLEDC_DEFAULT_VSL[ 3 ]       = { 0xA0, 0xB5, 0x55 };
static  uint8_t OLEDC_DEFAULT_CONTRAST[ 3 ]  = { 0x8A, 0x51, 0x8A };

void oledc_default_cfg (SPI_HandleTypeDef *hspi1) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	  // Enable CS
	  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2101      	movs	r1, #1
 8000a58:	4834      	ldr	r0, [pc, #208]	; (8000b2c <oledc_default_cfg+0xe0>)
 8000a5a:	f001 f8b1 	bl	8001bc0 <HAL_GPIO_WritePin>

	  // Enable OLED via EN
	  HAL_GPIO_WritePin(OLED_EN_GPIO_Port, OLED_EN_Pin, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2108      	movs	r1, #8
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f001 f8ab 	bl	8001bc0 <HAL_GPIO_WritePin>

	  oledc_reset();
 8000a6a:	f000 f867 	bl	8000b3c <oledc_reset>

	  // Unlock display and turn off
	oledc_one_arg_commands(OLEDC_COMMAND_LOCK, OLEDC_DEFAULT_OLED_LOCK, hspi1);
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	2112      	movs	r1, #18
 8000a72:	20fd      	movs	r0, #253	; 0xfd
 8000a74:	f000 f884 	bl	8000b80 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_COMMAND_LOCK, OLEDC_DEFAULT_CMD_LOCK, hspi1);
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	21b1      	movs	r1, #177	; 0xb1
 8000a7c:	20fd      	movs	r0, #253	; 0xfd
 8000a7e:	f000 f87f 	bl	8000b80 <oledc_one_arg_commands>
	oledc_more_arg_commands(OLEDC_SLEEP_ON,  0,  0 , hspi1);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	20ae      	movs	r0, #174	; 0xae
 8000a8a:	f000 f8a7 	bl	8000bdc <oledc_more_arg_commands>

	// Setup SSD1351
	oledc_one_arg_commands(OLEDC_SET_REMAP,       OLEDC_DEFAULT_REMAP        , hspi1);
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <oledc_default_cfg+0xe4>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4619      	mov	r1, r3
 8000a96:	20a0      	movs	r0, #160	; 0xa0
 8000a98:	f000 f872 	bl	8000b80 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_MUX_RATIO,       OLEDC_DEFAULT_MUX_RATIO    , hspi1);
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	215f      	movs	r1, #95	; 0x5f
 8000aa0:	20ca      	movs	r0, #202	; 0xca
 8000aa2:	f000 f86d 	bl	8000b80 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_START_LINE,  OLEDC_DEFAULT_START_LINE   , hspi1);
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	20a1      	movs	r0, #161	; 0xa1
 8000aac:	f000 f868 	bl	8000b80 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_OFFSET,      OLEDC_DEFAULT_OFFSET       , hspi1);
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	20a2      	movs	r0, #162	; 0xa2
 8000ab6:	f000 f863 	bl	8000b80 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_VCOMH,           OLEDC_DEFAULT_VCOMH        , hspi1);
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	2105      	movs	r1, #5
 8000abe:	20be      	movs	r0, #190	; 0xbe
 8000ac0:	f000 f85e 	bl	8000b80 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_CLOCK_DIV,       OLEDC_DEFAULT_DIVSET       , hspi1);
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	21f1      	movs	r1, #241	; 0xf1
 8000ac8:	20b3      	movs	r0, #179	; 0xb3
 8000aca:	f000 f859 	bl	8000b80 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SET_RESET_PRECH, OLEDC_DEFAULT_PRECHARGE    , hspi1);
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	2132      	movs	r1, #50	; 0x32
 8000ad2:	20b1      	movs	r0, #177	; 0xb1
 8000ad4:	f000 f854 	bl	8000b80 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_SETSEC_PRECH,    OLEDC_DEFAULT_PRECHARGE_2  , hspi1);
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	2101      	movs	r1, #1
 8000adc:	20b6      	movs	r0, #182	; 0xb6
 8000ade:	f000 f84f 	bl	8000b80 <oledc_one_arg_commands>
	oledc_one_arg_commands(OLEDC_MASTER_CONTRAST, OLEDC_DEFAULT_MASTER_CONT  , hspi1);
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	21cf      	movs	r1, #207	; 0xcf
 8000ae6:	20c7      	movs	r0, #199	; 0xc7
 8000ae8:	f000 f84a 	bl	8000b80 <oledc_one_arg_commands>

	oledc_more_arg_commands(OLEDC_CONTRAST,   OLEDC_DEFAULT_CONTRAST, 3 , hspi1);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2203      	movs	r2, #3
 8000af0:	4910      	ldr	r1, [pc, #64]	; (8000b34 <oledc_default_cfg+0xe8>)
 8000af2:	20c1      	movs	r0, #193	; 0xc1
 8000af4:	f000 f872 	bl	8000bdc <oledc_more_arg_commands>
	oledc_more_arg_commands(OLEDC_VSL,        OLEDC_DEFAULT_VSL,      3 , hspi1);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2203      	movs	r2, #3
 8000afc:	490e      	ldr	r1, [pc, #56]	; (8000b38 <oledc_default_cfg+0xec>)
 8000afe:	20b4      	movs	r0, #180	; 0xb4
 8000b00:	f000 f86c 	bl	8000bdc <oledc_more_arg_commands>

	// Set normal mode and turn on display
	oledc_more_arg_commands(OLEDC_MODE_NORMAL, 0, 0 , hspi1);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	20a6      	movs	r0, #166	; 0xa6
 8000b0c:	f000 f866 	bl	8000bdc <oledc_more_arg_commands>
	oledc_more_arg_commands(OLEDC_SLEEP_OFF,   0, 0 , hspi1);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	20af      	movs	r0, #175	; 0xaf
 8000b18:	f000 f860 	bl	8000bdc <oledc_more_arg_commands>
	oledc_fill_screen(0 , hspi1);
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f898 	bl	8000c54 <oledc_fill_screen>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	20000006 	.word	0x20000006
 8000b34:	2000000c 	.word	0x2000000c
 8000b38:	20000008 	.word	0x20000008

08000b3c <oledc_reset>:

void oledc_reset() {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b46:	480d      	ldr	r0, [pc, #52]	; (8000b7c <oledc_reset+0x40>)
 8000b48:	f001 f83a 	bl	8001bc0 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 fd01 	bl	8001554 <HAL_Delay>
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <oledc_reset+0x40>)
 8000b5a:	f001 f831 	bl	8001bc0 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f000 fcf8 	bl	8001554 <HAL_Delay>
	  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6a:	4804      	ldr	r0, [pc, #16]	; (8000b7c <oledc_reset+0x40>)
 8000b6c:	f001 f828 	bl	8001bc0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000b70:	2064      	movs	r0, #100	; 0x64
 8000b72:	f000 fcef 	bl	8001554 <HAL_Delay>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	48000800 	.word	0x48000800

08000b80 <oledc_one_arg_commands>:

void oledc_one_arg_commands (uint8_t command, uint8_t args, SPI_HandleTypeDef *hspi1) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	603a      	str	r2, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2101      	movs	r1, #1
 8000b94:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <oledc_one_arg_commands+0x58>)
 8000b96:	f001 f813 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <oledc_one_arg_commands+0x58>)
 8000ba0:	f001 f80e 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &command, 1);
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4619      	mov	r1, r3
 8000baa:	6838      	ldr	r0, [r7, #0]
 8000bac:	f002 fa62 	bl	8003074 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <oledc_one_arg_commands+0x58>)
 8000bb6:	f001 f803 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &args, 1);
 8000bba:	1dbb      	adds	r3, r7, #6
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	6838      	ldr	r0, [r7, #0]
 8000bc2:	f002 fa57 	bl	8003074 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <oledc_one_arg_commands+0x58>)
 8000bcc:	f000 fff8 	bl	8001bc0 <HAL_GPIO_WritePin>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	48000400 	.word	0x48000400

08000bdc <oledc_more_arg_commands>:

void oledc_more_arg_commands ( uint8_t command, uint8_t *args, uint16_t args_len, SPI_HandleTypeDef *hspi1) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4603      	mov	r3, r0
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	4613      	mov	r3, r2
 8000bec:	81bb      	strh	r3, [r7, #12]
    uint16_t cnt;
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4817      	ldr	r0, [pc, #92]	; (8000c50 <oledc_more_arg_commands+0x74>)
 8000bf4:	f000 ffe4 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4814      	ldr	r0, [pc, #80]	; (8000c50 <oledc_more_arg_commands+0x74>)
 8000bfe:	f000 ffdf 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &command, 1);
 8000c02:	f107 030f 	add.w	r3, r7, #15
 8000c06:	2201      	movs	r2, #1
 8000c08:	4619      	mov	r1, r3
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f002 fa32 	bl	8003074 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2102      	movs	r1, #2
 8000c14:	480e      	ldr	r0, [pc, #56]	; (8000c50 <oledc_more_arg_commands+0x74>)
 8000c16:	f000 ffd3 	bl	8001bc0 <HAL_GPIO_WritePin>

    for ( cnt = 0; cnt < args_len; cnt++ )
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	82fb      	strh	r3, [r7, #22]
 8000c1e:	e00a      	b.n	8000c36 <oledc_more_arg_commands+0x5a>
    {
        HAL_SPI_Transmit_IT(hspi1, &args[cnt], 1);
 8000c20:	8afb      	ldrh	r3, [r7, #22]
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	4413      	add	r3, r2
 8000c26:	2201      	movs	r2, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f002 fa22 	bl	8003074 <HAL_SPI_Transmit_IT>
    for ( cnt = 0; cnt < args_len; cnt++ )
 8000c30:	8afb      	ldrh	r3, [r7, #22]
 8000c32:	3301      	adds	r3, #1
 8000c34:	82fb      	strh	r3, [r7, #22]
 8000c36:	8afa      	ldrh	r2, [r7, #22]
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d3f0      	bcc.n	8000c20 <oledc_more_arg_commands+0x44>
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2101      	movs	r1, #1
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <oledc_more_arg_commands+0x74>)
 8000c44:	f000 ffbc 	bl	8001bc0 <HAL_GPIO_WritePin>
}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	48000400 	.word	0x48000400

08000c54 <oledc_fill_screen>:

void oledc_fill_screen (uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	80fb      	strh	r3, [r7, #6]
    box_area(0, 0, 96, 96, color , hspi1);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2360      	movs	r3, #96	; 0x60
 8000c6a:	2260      	movs	r2, #96	; 0x60
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 f804 	bl	8000c7c <box_area>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <box_area>:

void box_area (uint8_t start_col, uint8_t start_row, uint8_t end_col, uint8_t end_row, uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	4608      	mov	r0, r1
 8000c86:	4611      	mov	r1, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	71fb      	strb	r3, [r7, #7]
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71bb      	strb	r3, [r7, #6]
 8000c92:	460b      	mov	r3, r1
 8000c94:	717b      	strb	r3, [r7, #5]
 8000c96:	4613      	mov	r3, r2
 8000c98:	713b      	strb	r3, [r7, #4]
    uint8_t   cmd       = OLEDC_WRITE_RAM;
 8000c9a:	235c      	movs	r3, #92	; 0x5c
 8000c9c:	737b      	strb	r3, [r7, #13]
    uint16_t  cnt       = ( end_col - start_col ) * ( end_row - start_row );
 8000c9e:	797a      	ldrb	r2, [r7, #5]
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	7939      	ldrb	r1, [r7, #4]
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	1acb      	subs	r3, r1, r3
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	fb12 f303 	smulbb	r3, r2, r3
 8000cb2:	81fb      	strh	r3, [r7, #14]
    uint8_t   clr[ 2 ]  = { 0 };
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	813b      	strh	r3, [r7, #8]

    if( ( start_col > OLEDC_SCREEN_WIDTH ) ||
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b60      	cmp	r3, #96	; 0x60
 8000cbc:	d86f      	bhi.n	8000d9e <box_area+0x122>
 8000cbe:	797b      	ldrb	r3, [r7, #5]
 8000cc0:	2b60      	cmp	r3, #96	; 0x60
 8000cc2:	d86c      	bhi.n	8000d9e <box_area+0x122>
        ( end_col > OLEDC_SCREEN_WIDTH ) )
        return;

    if( ( start_row > OLEDC_SCREEN_HEIGHT ) ||
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	2b60      	cmp	r3, #96	; 0x60
 8000cc8:	d86b      	bhi.n	8000da2 <box_area+0x126>
 8000cca:	793b      	ldrb	r3, [r7, #4]
 8000ccc:	2b60      	cmp	r3, #96	; 0x60
 8000cce:	d868      	bhi.n	8000da2 <box_area+0x126>
        ( end_row > OLEDC_SCREEN_HEIGHT ) )
        return;

    if( ( end_col < start_col ) ||
 8000cd0:	797a      	ldrb	r2, [r7, #5]
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d366      	bcc.n	8000da6 <box_area+0x12a>
 8000cd8:	793a      	ldrb	r2, [r7, #4]
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d362      	bcc.n	8000da6 <box_area+0x12a>
        ( end_row < start_row ) )
        return;

    cols[ 0 ] = OLEDC_COL_OFF + start_col;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <box_area+0x134>)
 8000ce8:	701a      	strb	r2, [r3, #0]
    cols[ 1 ] = OLEDC_COL_OFF + end_col - 1;
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	330f      	adds	r3, #15
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <box_area+0x134>)
 8000cf2:	705a      	strb	r2, [r3, #1]
    rows[ 0 ] = OLEDC_ROW_OFF + start_row;
 8000cf4:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <box_area+0x138>)
 8000cf6:	79bb      	ldrb	r3, [r7, #6]
 8000cf8:	7013      	strb	r3, [r2, #0]
    rows[ 1 ] = OLEDC_ROW_OFF + end_row - 1;
 8000cfa:	793b      	ldrb	r3, [r7, #4]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <box_area+0x138>)
 8000d02:	705a      	strb	r2, [r3, #1]
    clr[ 0 ] |= color >> 8;
 8000d04:	7a3a      	ldrb	r2, [r7, #8]
 8000d06:	8c3b      	ldrh	r3, [r7, #32]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	723b      	strb	r3, [r7, #8]
    clr[ 1 ] |= color & 0x00FF;
 8000d14:	7a7b      	ldrb	r3, [r7, #9]
 8000d16:	b25a      	sxtb	r2, r3
 8000d18:	8c3b      	ldrh	r3, [r7, #32]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	727b      	strb	r3, [r7, #9]

    oledc_more_arg_commands(OLEDC_SET_COL_ADDRESS, cols, 2 , hspi1);
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	2202      	movs	r2, #2
 8000d28:	4921      	ldr	r1, [pc, #132]	; (8000db0 <box_area+0x134>)
 8000d2a:	2015      	movs	r0, #21
 8000d2c:	f7ff ff56 	bl	8000bdc <oledc_more_arg_commands>
    oledc_more_arg_commands(OLEDC_SET_ROW_ADDRESS, rows, 2 , hspi1);
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	2202      	movs	r2, #2
 8000d34:	491f      	ldr	r1, [pc, #124]	; (8000db4 <box_area+0x138>)
 8000d36:	2075      	movs	r0, #117	; 0x75
 8000d38:	f7ff ff50 	bl	8000bdc <oledc_more_arg_commands>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2101      	movs	r1, #1
 8000d40:	481d      	ldr	r0, [pc, #116]	; (8000db8 <box_area+0x13c>)
 8000d42:	f000 ff3d 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2102      	movs	r1, #2
 8000d4a:	481b      	ldr	r0, [pc, #108]	; (8000db8 <box_area+0x13c>)
 8000d4c:	f000 ff38 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &cmd, 1);
 8000d50:	f107 030d 	add.w	r3, r7, #13
 8000d54:	2201      	movs	r2, #1
 8000d56:	4619      	mov	r1, r3
 8000d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d5a:	f002 f98b 	bl	8003074 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2102      	movs	r1, #2
 8000d62:	4815      	ldr	r0, [pc, #84]	; (8000db8 <box_area+0x13c>)
 8000d64:	f000 ff2c 	bl	8001bc0 <HAL_GPIO_WritePin>

    while( cnt-- ) {
 8000d68:	e00e      	b.n	8000d88 <box_area+0x10c>
        HAL_SPI_Transmit_IT(hspi1, &clr[0], 1);
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4619      	mov	r1, r3
 8000d72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d74:	f002 f97e 	bl	8003074 <HAL_SPI_Transmit_IT>
        HAL_SPI_Transmit_IT(hspi1, &clr[1], 1);
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4619      	mov	r1, r3
 8000d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d84:	f002 f976 	bl	8003074 <HAL_SPI_Transmit_IT>
    while( cnt-- ) {
 8000d88:	89fb      	ldrh	r3, [r7, #14]
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	81fa      	strh	r2, [r7, #14]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1eb      	bne.n	8000d6a <box_area+0xee>
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2101      	movs	r1, #1
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <box_area+0x13c>)
 8000d98:	f000 ff12 	bl	8001bc0 <HAL_GPIO_WritePin>
 8000d9c:	e004      	b.n	8000da8 <box_area+0x12c>
        return;
 8000d9e:	bf00      	nop
 8000da0:	e002      	b.n	8000da8 <box_area+0x12c>
        return;
 8000da2:	bf00      	nop
 8000da4:	e000      	b.n	8000da8 <box_area+0x12c>
        return;
 8000da6:	bf00      	nop
}
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000004 	.word	0x20000004
 8000db8:	48000400 	.word	0x48000400

08000dbc <oledc_text>:

void oledc_text ( oledc_t *ctx, uint8_t *text, uint16_t x, uint16_t y , SPI_HandleTypeDef *hspi1) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	460b      	mov	r3, r1
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	80bb      	strh	r3, [r7, #4]
    uint8_t *ptr = text;
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	617b      	str	r3, [r7, #20]
    if ( ( x >= OLEDC_SCREEN_WIDTH ) || ( y >= OLEDC_SCREEN_HEIGHT ) ) {
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	2b5f      	cmp	r3, #95	; 0x5f
 8000dda:	d818      	bhi.n	8000e0e <oledc_text+0x52>
 8000ddc:	88bb      	ldrh	r3, [r7, #4]
 8000dde:	2b5f      	cmp	r3, #95	; 0x5f
 8000de0:	d815      	bhi.n	8000e0e <oledc_text+0x52>
        return;
    }

    ctx->x_cord = x;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	88fa      	ldrh	r2, [r7, #6]
 8000de6:	81da      	strh	r2, [r3, #14]
    ctx->y_cord = y;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	88ba      	ldrh	r2, [r7, #4]
 8000dec:	821a      	strh	r2, [r3, #16]

    while( *ptr ) {
 8000dee:	e009      	b.n	8000e04 <oledc_text+0x48>
        character( ctx, *ptr++ , hspi1);
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	617a      	str	r2, [r7, #20]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	6a3a      	ldr	r2, [r7, #32]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f000 f8b6 	bl	8000f70 <character>
    while( *ptr ) {
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f1      	bne.n	8000df0 <oledc_text+0x34>
 8000e0c:	e000      	b.n	8000e10 <oledc_text+0x54>
        return;
 8000e0e:	bf00      	nop
    }
}
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <oledc_set_font>:

void oledc_set_font ( oledc_t *ctx, const uint8_t *font_s, uint16_t color ) {
 8000e16:	b480      	push	{r7}
 8000e18:	b085      	sub	sp, #20
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	4613      	mov	r3, r2
 8000e22:	80fb      	strh	r3, [r7, #6]
    ctx->font_obj               = font_s;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	601a      	str	r2, [r3, #0]
    ctx->font_first_char    = font_s[2] + (font_s[3] << 8);
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3303      	adds	r3, #3
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	811a      	strh	r2, [r3, #8]
    ctx->font_last_char     = font_s[4] + (font_s[5] << 8);
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	3305      	adds	r3, #5
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	815a      	strh	r2, [r3, #10]
    ctx->font_height        = font_s[6];
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3306      	adds	r3, #6
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	819a      	strh	r2, [r3, #12]
    ctx->font_color         = color;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	88fa      	ldrh	r2, [r7, #6]
 8000e72:	809a      	strh	r2, [r3, #4]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <pixel>:

void pixel ( oledc_t *ctx, uint8_t col, uint8_t row, uint16_t color, SPI_HandleTypeDef *hspi1) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4603      	mov	r3, r0
 8000e90:	70fb      	strb	r3, [r7, #3]
 8000e92:	460b      	mov	r3, r1
 8000e94:	70bb      	strb	r3, [r7, #2]
 8000e96:	4613      	mov	r3, r2
 8000e98:	803b      	strh	r3, [r7, #0]
    uint8_t cmd       = OLEDC_WRITE_RAM;
 8000e9a:	235c      	movs	r3, #92	; 0x5c
 8000e9c:	73fb      	strb	r3, [r7, #15]
    uint8_t clr[ 2 ]  = { 0 };
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	81bb      	strh	r3, [r7, #12]

    if( ( col > OLEDC_SCREEN_WIDTH ) || ( row > OLEDC_SCREEN_HEIGHT ) ) {
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	2b60      	cmp	r3, #96	; 0x60
 8000ea6:	d859      	bhi.n	8000f5c <pixel+0xdc>
 8000ea8:	78bb      	ldrb	r3, [r7, #2]
 8000eaa:	2b60      	cmp	r3, #96	; 0x60
 8000eac:	d856      	bhi.n	8000f5c <pixel+0xdc>
        return;
    }
    cols[ 0 ] = OLEDC_COL_OFF + col;
 8000eae:	78fb      	ldrb	r3, [r7, #3]
 8000eb0:	3310      	adds	r3, #16
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <pixel+0xe4>)
 8000eb6:	701a      	strb	r2, [r3, #0]
    cols[ 1 ] = OLEDC_COL_OFF + col;
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	3310      	adds	r3, #16
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <pixel+0xe4>)
 8000ec0:	705a      	strb	r2, [r3, #1]
    rows[ 0 ] = OLEDC_ROW_OFF + row;
 8000ec2:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <pixel+0xe8>)
 8000ec4:	78bb      	ldrb	r3, [r7, #2]
 8000ec6:	7013      	strb	r3, [r2, #0]
    rows[ 1 ] = OLEDC_ROW_OFF + row;
 8000ec8:	4a27      	ldr	r2, [pc, #156]	; (8000f68 <pixel+0xe8>)
 8000eca:	78bb      	ldrb	r3, [r7, #2]
 8000ecc:	7053      	strb	r3, [r2, #1]
    clr[ 0 ] |= color >> 8;
 8000ece:	7b3a      	ldrb	r2, [r7, #12]
 8000ed0:	883b      	ldrh	r3, [r7, #0]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	733b      	strb	r3, [r7, #12]
    clr[ 1 ] |= color & 0x00FF;
 8000ede:	7b7b      	ldrb	r3, [r7, #13]
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	883b      	ldrh	r3, [r7, #0]
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	737b      	strb	r3, [r7, #13]

    oledc_more_arg_commands(OLEDC_SET_COL_ADDRESS, cols, 2 , hspi1);
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	491c      	ldr	r1, [pc, #112]	; (8000f64 <pixel+0xe4>)
 8000ef4:	2015      	movs	r0, #21
 8000ef6:	f7ff fe71 	bl	8000bdc <oledc_more_arg_commands>
    oledc_more_arg_commands(OLEDC_SET_ROW_ADDRESS, rows, 2 , hspi1);
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2202      	movs	r2, #2
 8000efe:	491a      	ldr	r1, [pc, #104]	; (8000f68 <pixel+0xe8>)
 8000f00:	2075      	movs	r0, #117	; 0x75
 8000f02:	f7ff fe6b 	bl	8000bdc <oledc_more_arg_commands>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4818      	ldr	r0, [pc, #96]	; (8000f6c <pixel+0xec>)
 8000f0c:	f000 fe58 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	4815      	ldr	r0, [pc, #84]	; (8000f6c <pixel+0xec>)
 8000f16:	f000 fe53 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &cmd, 1);
 8000f1a:	f107 030f 	add.w	r3, r7, #15
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	69b8      	ldr	r0, [r7, #24]
 8000f24:	f002 f8a6 	bl	8003074 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	480f      	ldr	r0, [pc, #60]	; (8000f6c <pixel+0xec>)
 8000f2e:	f000 fe47 	bl	8001bc0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_IT(hspi1, &clr[0], 1);
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	2201      	movs	r2, #1
 8000f38:	4619      	mov	r1, r3
 8000f3a:	69b8      	ldr	r0, [r7, #24]
 8000f3c:	f002 f89a 	bl	8003074 <HAL_SPI_Transmit_IT>
    HAL_SPI_Transmit_IT(hspi1, &clr[1], 1);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	3301      	adds	r3, #1
 8000f46:	2201      	movs	r2, #1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	69b8      	ldr	r0, [r7, #24]
 8000f4c:	f002 f892 	bl	8003074 <HAL_SPI_Transmit_IT>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2101      	movs	r1, #1
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <pixel+0xec>)
 8000f56:	f000 fe33 	bl	8001bc0 <HAL_GPIO_WritePin>
 8000f5a:	e000      	b.n	8000f5e <pixel+0xde>
        return;
 8000f5c:	bf00      	nop
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	48000400 	.word	0x48000400

08000f70 <character>:

void character ( oledc_t *ctx, uint16_t ch , SPI_HandleTypeDef *hspi1) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	; 0x38
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	817b      	strh	r3, [r7, #10]
    uint8_t     ch_width = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t     x_cnt;
    uint8_t     y_cnt;
    uint16_t    x = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t    y = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t    tmp;
    uint8_t     temp = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t     mask = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    uint32_t    offset;
    const uint8_t *ch_table;
    const uint8_t *ch_bitmap;

    if( ch < ctx->font_first_char )
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	891b      	ldrh	r3, [r3, #8]
 8000f9c:	897a      	ldrh	r2, [r7, #10]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	f0c0 8087 	bcc.w	80010b2 <character+0x142>
        return;

    if( ch > ctx->font_last_char )
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	895b      	ldrh	r3, [r3, #10]
 8000fa8:	897a      	ldrh	r2, [r7, #10]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	f200 8083 	bhi.w	80010b6 <character+0x146>
        return;

    offset = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    tmp = (ch - ctx->font_first_char) << 2;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	891b      	ldrh	r3, [r3, #8]
 8000fb8:	897a      	ldrh	r2, [r7, #10]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	837b      	strh	r3, [r7, #26]
    ch_table = ctx->font_obj + 8 + tmp;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	8b7b      	ldrh	r3, [r7, #26]
 8000fc8:	3308      	adds	r3, #8
 8000fca:	4413      	add	r3, r2
 8000fcc:	617b      	str	r3, [r7, #20]
    ch_width = *ch_table;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    offset = (uint32_t)ch_table[1] + ((uint32_t)ch_table[2] << 8) + ((uint32_t)ch_table[3] << 16);
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	441a      	add	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3303      	adds	r3, #3
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	041b      	lsls	r3, r3, #16
 8000ff0:	4413      	add	r3, r2
 8000ff2:	61fb      	str	r3, [r7, #28]

    ch_bitmap = ctx->font_obj + offset;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24

    y = ctx->y_cord;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	8a1b      	ldrh	r3, [r3, #16]
 8001002:	857b      	strh	r3, [r7, #42]	; 0x2a
    for (y_cnt = 0; y_cnt < ctx->font_height; y_cnt++) {
 8001004:	2300      	movs	r3, #0
 8001006:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800100a:	e045      	b.n	8001098 <character+0x128>
        x = ctx->x_cord;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	89db      	ldrh	r3, [r3, #14]
 8001010:	85bb      	strh	r3, [r7, #44]	; 0x2c
        mask = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        for( x_cnt = 0; x_cnt < ch_width; x_cnt++ ) {
 8001018:	2300      	movs	r3, #0
 800101a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800101e:	e02d      	b.n	800107c <character+0x10c>
            if( !mask ) {
 8001020:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001024:	2b00      	cmp	r3, #0
 8001026:	d108      	bne.n	800103a <character+0xca>
                temp = *ch_bitmap++;
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	627a      	str	r2, [r7, #36]	; 0x24
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                mask = 0x01;
 8001034:	2301      	movs	r3, #1
 8001036:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            }
            if( temp & mask )
 800103a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800103e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001042:	4013      	ands	r3, r2
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <character+0xf2>
                 pixel( ctx, x, y, ctx->font_color, hspi1);
 800104a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800104c:	b2d9      	uxtb	r1, r3
 800104e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	8898      	ldrh	r0, [r3, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	4603      	mov	r3, r0
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f7ff ff0f 	bl	8000e80 <pixel>

            x++;
 8001062:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001064:	3301      	adds	r3, #1
 8001066:	85bb      	strh	r3, [r7, #44]	; 0x2c
            mask <<= 1;
 8001068:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        for( x_cnt = 0; x_cnt < ch_width; x_cnt++ ) {
 8001072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001076:	3301      	adds	r3, #1
 8001078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800107c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001084:	429a      	cmp	r2, r3
 8001086:	d3cb      	bcc.n	8001020 <character+0xb0>
        }
        y++;
 8001088:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800108a:	3301      	adds	r3, #1
 800108c:	857b      	strh	r3, [r7, #42]	; 0x2a
    for (y_cnt = 0; y_cnt < ctx->font_height; y_cnt++) {
 800108e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001092:	3301      	adds	r3, #1
 8001094:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001098:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800109c:	b29a      	uxth	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	899b      	ldrh	r3, [r3, #12]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3b2      	bcc.n	800100c <character+0x9c>
    }
    ctx->x_cord = x + 1;
 80010a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010a8:	3301      	adds	r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	81da      	strh	r2, [r3, #14]
 80010b0:	e002      	b.n	80010b8 <character+0x148>
        return;
 80010b2:	bf00      	nop
 80010b4:	e000      	b.n	80010b8 <character+0x148>
        return;
 80010b6:	bf00      	nop
}
 80010b8:	3730      	adds	r7, #48	; 0x30
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <oledc_rectangle>:
        tmp += 2;
    }
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
}

void oledc_rectangle (uint8_t col_off, uint8_t row_off, uint8_t col_end, uint8_t row_end, uint16_t color, SPI_HandleTypeDef *hspi1) {
 80010be:	b590      	push	{r4, r7, lr}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	4604      	mov	r4, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4611      	mov	r1, r2
 80010ca:	461a      	mov	r2, r3
 80010cc:	4623      	mov	r3, r4
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4603      	mov	r3, r0
 80010d2:	71bb      	strb	r3, [r7, #6]
 80010d4:	460b      	mov	r3, r1
 80010d6:	717b      	strb	r3, [r7, #5]
 80010d8:	4613      	mov	r3, r2
 80010da:	713b      	strb	r3, [r7, #4]
    box_area(col_off, row_off, col_end, row_end, color, hspi1);
 80010dc:	793c      	ldrb	r4, [r7, #4]
 80010de:	797a      	ldrb	r2, [r7, #5]
 80010e0:	79b9      	ldrb	r1, [r7, #6]
 80010e2:	79f8      	ldrb	r0, [r7, #7]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	8b3b      	ldrh	r3, [r7, #24]
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4623      	mov	r3, r4
 80010ee:	f7ff fdc5 	bl	8000c7c <box_area>
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}

080010fa <oledc_update_number>:
		  oledc_text(oledc, text, i, 20, hspi1);
		  HAL_Delay(100);
	  }
}

void oledc_update_number(oledc_t *oledc, uint8_t* numbers, SPI_HandleTypeDef *hspi1, TIM_HandleTypeDef *htim) {
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b088      	sub	sp, #32
 80010fe:	af02      	add	r7, sp, #8
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
	oledc_rectangle (40, 40, 70, 70, 0xF800, hspi1);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2346      	movs	r3, #70	; 0x46
 8001114:	2246      	movs	r2, #70	; 0x46
 8001116:	2128      	movs	r1, #40	; 0x28
 8001118:	2028      	movs	r0, #40	; 0x28
 800111a:	f7ff ffd0 	bl	80010be <oledc_rectangle>
	oledc_text(oledc, numbers, 40, 40, hspi1);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2328      	movs	r3, #40	; 0x28
 8001124:	2228      	movs	r2, #40	; 0x28
 8001126:	68b9      	ldr	r1, [r7, #8]
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff fe47 	bl	8000dbc <oledc_text>
	char *ptr;
	uint8_t number = strtol((char*)numbers, &ptr, 10);
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	220a      	movs	r2, #10
 8001134:	4619      	mov	r1, r3
 8001136:	68b8      	ldr	r0, [r7, #8]
 8001138:	f004 f94e 	bl	80053d8 <strtol>
 800113c:	4603      	mov	r3, r0
 800113e:	75fb      	strb	r3, [r7, #23]
	number_check(number, htim);
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9dc 	bl	8000502 <number_check>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_MspInit+0x44>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_MspInit+0x44>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6613      	str	r3, [r2, #96]	; 0x60
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_MspInit+0x44>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_MspInit+0x44>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_MspInit+0x44>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6593      	str	r3, [r2, #88]	; 0x58
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_MspInit+0x44>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <HAL_SPI_MspInit+0x8c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12f      	bne.n	800121e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_SPI_MspInit+0x90>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	4a1a      	ldr	r2, [pc, #104]	; (800122c <HAL_SPI_MspInit+0x90>)
 80011c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011c8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_SPI_MspInit+0x90>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_SPI_MspInit+0x90>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_SPI_MspInit+0x90>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_SPI_MspInit+0x90>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_SDO_Pin|OLED_SDI_Pin;
 80011ee:	2338      	movs	r3, #56	; 0x38
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011fe:	2305      	movs	r3, #5
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <HAL_SPI_MspInit+0x94>)
 800120a:	f000 fb57 	bl	80018bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2023      	movs	r0, #35	; 0x23
 8001214:	f000 fa9d 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001218:	2023      	movs	r0, #35	; 0x23
 800121a:	f000 fab6 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40013000 	.word	0x40013000
 800122c:	40021000 	.word	0x40021000
 8001230:	48000400 	.word	0x48000400

08001234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <HAL_TIM_Base_MspInit+0x44>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d113      	bne.n	800126e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_TIM_Base_MspInit+0x48>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_TIM_Base_MspInit+0x48>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	6593      	str	r3, [r2, #88]	; 0x58
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_TIM_Base_MspInit+0x48>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2036      	movs	r0, #54	; 0x36
 8001264:	f000 fa75 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001268:	2036      	movs	r0, #54	; 0x36
 800126a:	f000 fa8e 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40001000 	.word	0x40001000
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b09e      	sub	sp, #120	; 0x78
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2254      	movs	r2, #84	; 0x54
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 f8a3 	bl	80053ec <memset>
  if(huart->Instance==USART2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a2c      	ldr	r2, [pc, #176]	; (800135c <HAL_UART_MspInit+0xdc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d150      	bne.n	8001352 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fb4d 	bl	800295c <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012c8:	f7ff fbbb 	bl	8000a42 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <HAL_UART_MspInit+0xe0>)
 80012ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d0:	4a23      	ldr	r2, [pc, #140]	; (8001360 <HAL_UART_MspInit+0xe0>)
 80012d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d6:	6593      	str	r3, [r2, #88]	; 0x58
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_UART_MspInit+0xe0>)
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_UART_MspInit+0xe0>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_UART_MspInit+0xe0>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_UART_MspInit+0xe0>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80012fc:	2304      	movs	r3, #4
 80012fe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800130c:	2307      	movs	r3, #7
 800130e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f000 facf 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800131e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001322:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001330:	2303      	movs	r3, #3
 8001332:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001338:	4619      	mov	r1, r3
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f000 fabd 	bl	80018bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2026      	movs	r0, #38	; 0x26
 8001348:	f000 fa03 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800134c:	2026      	movs	r0, #38	; 0x26
 800134e:	f000 fa1c 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3778      	adds	r7, #120	; 0x78
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40004400 	.word	0x40004400
 8001360:	40021000 	.word	0x40021000

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <NMI_Handler+0x4>

0800136a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <MemManage_Handler+0x4>

08001376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler+0x4>

08001382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b0:	f000 f8b0 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <SPI1_IRQHandler+0x10>)
 80013be:	f001 fee5 	bl	800318c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000088 	.word	0x20000088

080013cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <USART2_IRQHandler+0x10>)
 80013d2:	f002 fd67 	bl	8003ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000138 	.word	0x20000138

080013e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM6_DAC_IRQHandler+0x10>)
 80013e6:	f002 fab0 	bl	800394a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200000ec 	.word	0x200000ec

080013f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <SystemInit+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <SystemInit+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800141c:	f7ff ffea 	bl	80013f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <LoopForever+0x6>)
  ldr r1, =_edata
 8001422:	490d      	ldr	r1, [pc, #52]	; (8001458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <LoopForever+0xe>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001428:	e002      	b.n	8001430 <LoopCopyDataInit>

0800142a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800142c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142e:	3304      	adds	r3, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001434:	d3f9      	bcc.n	800142a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001438:	4c0a      	ldr	r4, [pc, #40]	; (8001464 <LoopForever+0x16>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800143c:	e001      	b.n	8001442 <LoopFillZerobss>

0800143e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001440:	3204      	adds	r2, #4

08001442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001444:	d3fb      	bcc.n	800143e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001446:	f003 ffdf 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144a:	f7ff f8a7 	bl	800059c <main>

0800144e <LoopForever>:

LoopForever:
    b LoopForever
 800144e:	e7fe      	b.n	800144e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001450:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800145c:	080065a4 	.word	0x080065a4
  ldr r2, =_sbss
 8001460:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001464:	20000338 	.word	0x20000338

08001468 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC1_IRQHandler>

0800146a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001474:	2003      	movs	r0, #3
 8001476:	f000 f961 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147a:	2000      	movs	r0, #0
 800147c:	f000 f80e 	bl	800149c <HAL_InitTick>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	71fb      	strb	r3, [r7, #7]
 800148a:	e001      	b.n	8001490 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800148c:	f7ff fe62 	bl	8001154 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001490:	79fb      	ldrb	r3, [r7, #7]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_InitTick+0x6c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d023      	beq.n	80014f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_InitTick+0x70>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_InitTick+0x6c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f96d 	bl	80017a6 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10f      	bne.n	80014f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d809      	bhi.n	80014ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f937 	bl	8001752 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_InitTick+0x74>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e007      	b.n	80014fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e004      	b.n	80014fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e001      	b.n	80014fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000018 	.word	0x20000018
 800150c:	20000010 	.word	0x20000010
 8001510:	20000014 	.word	0x20000014

08001514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_IncTick+0x20>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x24>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_IncTick+0x24>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000018 	.word	0x20000018
 8001538:	200001fc 	.word	0x200001fc

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_GetTick+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200001fc 	.word	0x200001fc

08001554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff ffee 	bl	800153c <HAL_GetTick>
 8001560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156c:	d005      	beq.n	800157a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_Delay+0x44>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157a:	bf00      	nop
 800157c:	f7ff ffde 	bl	800153c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	429a      	cmp	r2, r3
 800158a:	d8f7      	bhi.n	800157c <HAL_Delay+0x28>
  {
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000018 	.word	0x20000018

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4907      	ldr	r1, [pc, #28]	; (8001638 <__NVIC_EnableIRQ+0x38>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f7ff ff8e 	bl	800163c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff29 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff3e 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff8e 	bl	8001690 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5d 	bl	800163c <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff31 	bl	8001600 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa2 	bl	80016f8 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d008      	beq.n	80017e8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2204      	movs	r2, #4
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e022      	b.n	800182e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 020e 	bic.w	r2, r2, #14
 80017f6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f003 021c 	and.w	r2, r3, #28
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	2101      	movs	r1, #1
 8001816:	fa01 f202 	lsl.w	r2, r1, r2
 800181a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d005      	beq.n	800185e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2204      	movs	r2, #4
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
 800185c:	e029      	b.n	80018b2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 020e 	bic.w	r2, r2, #14
 800186c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f003 021c 	and.w	r2, r3, #28
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
    }
  }
  return status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ca:	e148      	b.n	8001b5e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 813a 	beq.w	8001b58 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d005      	beq.n	80018fc <HAL_GPIO_Init+0x40>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d130      	bne.n	800195e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001932:	2201      	movs	r2, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 0201 	and.w	r2, r3, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b03      	cmp	r3, #3
 8001968:	d017      	beq.n	800199a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d123      	bne.n	80019ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	6939      	ldr	r1, [r7, #16]
 80019ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0203 	and.w	r2, r3, #3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8094 	beq.w	8001b58 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x2c0>)
 8001a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a34:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_GPIO_Init+0x2c0>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a3c:	4b4f      	ldr	r3, [pc, #316]	; (8001b7c <HAL_GPIO_Init+0x2c0>)
 8001a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a48:	4a4d      	ldr	r2, [pc, #308]	; (8001b80 <HAL_GPIO_Init+0x2c4>)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a72:	d00d      	beq.n	8001a90 <HAL_GPIO_Init+0x1d4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a43      	ldr	r2, [pc, #268]	; (8001b84 <HAL_GPIO_Init+0x2c8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d007      	beq.n	8001a8c <HAL_GPIO_Init+0x1d0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a42      	ldr	r2, [pc, #264]	; (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_GPIO_Init+0x1cc>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e004      	b.n	8001a92 <HAL_GPIO_Init+0x1d6>
 8001a88:	2307      	movs	r3, #7
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x1d6>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_GPIO_Init+0x1d6>
 8001a90:	2300      	movs	r3, #0
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	f002 0203 	and.w	r2, r2, #3
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	4093      	lsls	r3, r2
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aa2:	4937      	ldr	r1, [pc, #220]	; (8001b80 <HAL_GPIO_Init+0x2c4>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ab0:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad4:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001afe:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b28:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b52:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f47f aeaf 	bne.w	80018cc <HAL_GPIO_Init+0x10>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000
 8001b84:	48000400 	.word	0x48000400
 8001b88:	48000800 	.word	0x48000800
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4013      	ands	r3, r2
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43d9      	mvns	r1, r3
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	400b      	ands	r3, r1
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40007000 	.word	0x40007000

08001c40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c4e:	d130      	bne.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5c:	d038      	beq.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c66:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2232      	movs	r2, #50	; 0x32
 8001c74:	fb02 f303 	mul.w	r3, r2, r3
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0c9b      	lsrs	r3, r3, #18
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c84:	e002      	b.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c98:	d102      	bne.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f2      	bne.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cac:	d110      	bne.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e00f      	b.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbe:	d007      	beq.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	20000010 	.word	0x20000010
 8001ce8:	431bde83 	.word	0x431bde83

08001cec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f000 bc02 	b.w	8002504 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d00:	4b96      	ldr	r3, [pc, #600]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d0a:	4b94      	ldr	r3, [pc, #592]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80e4 	beq.w	8001eea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4c>
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	f040 808b 	bne.w	8001e46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	f040 8087 	bne.w	8001e46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d38:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x64>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e3d9      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1a      	ldr	r2, [r3, #32]
 8001d54:	4b81      	ldr	r3, [pc, #516]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <HAL_RCC_OscConfig+0x7e>
 8001d60:	4b7e      	ldr	r3, [pc, #504]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d68:	e005      	b.n	8001d76 <HAL_RCC_OscConfig+0x8a>
 8001d6a:	4b7c      	ldr	r3, [pc, #496]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d223      	bcs.n	8001dc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fd8c 	bl	800289c <RCC_SetFlashLatencyFromMSIRange>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e3ba      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8e:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a72      	ldr	r2, [pc, #456]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b70      	ldr	r3, [pc, #448]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	496d      	ldr	r1, [pc, #436]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dac:	4b6b      	ldr	r3, [pc, #428]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	4968      	ldr	r1, [pc, #416]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	e025      	b.n	8001e0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc2:	4b66      	ldr	r3, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a65      	ldr	r2, [pc, #404]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4960      	ldr	r1, [pc, #384]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	495b      	ldr	r1, [pc, #364]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fd4c 	bl	800289c <RCC_SetFlashLatencyFromMSIRange>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e37a      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e0e:	f000 fc81 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	4950      	ldr	r1, [pc, #320]	; (8001f60 <HAL_RCC_OscConfig+0x274>)
 8001e20:	5ccb      	ldrb	r3, [r1, r3]
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2a:	4a4e      	ldr	r2, [pc, #312]	; (8001f64 <HAL_RCC_OscConfig+0x278>)
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e2e:	4b4e      	ldr	r3, [pc, #312]	; (8001f68 <HAL_RCC_OscConfig+0x27c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fb32 	bl	800149c <HAL_InitTick>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d052      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	e35e      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d032      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e4e:	4b43      	ldr	r3, [pc, #268]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a42      	ldr	r2, [pc, #264]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fb6f 	bl	800153c <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e62:	f7ff fb6b 	bl	800153c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e347      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a35      	ldr	r2, [pc, #212]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e86:	f043 0308 	orr.w	r3, r3, #8
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4930      	ldr	r1, [pc, #192]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	492b      	ldr	r1, [pc, #172]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
 8001eb2:	e01a      	b.n	8001eea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a28      	ldr	r2, [pc, #160]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fb3c 	bl	800153c <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fb38 	bl	800153c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e314      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1dc>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d073      	beq.n	8001fde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_OscConfig+0x21c>
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d10e      	bne.n	8001f20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d10b      	bne.n	8001f20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d063      	beq.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d15f      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e2f1      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x24c>
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e025      	b.n	8001f84 <HAL_RCC_OscConfig+0x298>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f40:	d114      	bne.n	8001f6c <HAL_RCC_OscConfig+0x280>
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a02      	ldr	r2, [pc, #8]	; (8001f5c <HAL_RCC_OscConfig+0x270>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e013      	b.n	8001f84 <HAL_RCC_OscConfig+0x298>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08006448 	.word	0x08006448
 8001f64:	20000010 	.word	0x20000010
 8001f68:	20000014 	.word	0x20000014
 8001f6c:	4ba0      	ldr	r3, [pc, #640]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a9f      	ldr	r2, [pc, #636]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b9d      	ldr	r3, [pc, #628]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a9c      	ldr	r2, [pc, #624]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8001f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fad6 	bl	800153c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff fad2 	bl	800153c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e2ae      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa6:	4b92      	ldr	r3, [pc, #584]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2a8>
 8001fb2:	e014      	b.n	8001fde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fac2 	bl	800153c <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fabe 	bl	800153c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e29a      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fce:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x2d0>
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d060      	beq.n	80020ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_OscConfig+0x310>
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d119      	bne.n	800202a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d116      	bne.n	800202a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ffc:	4b7c      	ldr	r3, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_OscConfig+0x328>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e277      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	061b      	lsls	r3, r3, #24
 8002022:	4973      	ldr	r1, [pc, #460]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002028:	e040      	b.n	80020ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d023      	beq.n	800207a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002032:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a6e      	ldr	r2, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7ff fa7d 	bl	800153c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002046:	f7ff fa79 	bl	800153c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e255      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002058:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002064:	4b62      	ldr	r3, [pc, #392]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	061b      	lsls	r3, r3, #24
 8002072:	495f      	ldr	r1, [pc, #380]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
 8002078:	e018      	b.n	80020ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a5c      	ldr	r2, [pc, #368]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff fa59 	bl	800153c <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208e:	f7ff fa55 	bl	800153c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e231      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d03c      	beq.n	8002132 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01c      	beq.n	80020fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c0:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c6:	4a4a      	ldr	r2, [pc, #296]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7ff fa34 	bl	800153c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7ff fa30 	bl	800153c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e20c      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80020ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ef      	beq.n	80020d8 <HAL_RCC_OscConfig+0x3ec>
 80020f8:	e01b      	b.n	8002132 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80020fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002100:	4a3b      	ldr	r2, [pc, #236]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7ff fa17 	bl	800153c <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002112:	f7ff fa13 	bl	800153c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1ef      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002124:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ef      	bne.n	8002112 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80a6 	beq.w	800228c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002144:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10d      	bne.n	800216c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 8002156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215a:	6593      	str	r3, [r2, #88]	; 0x58
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002168:	2301      	movs	r3, #1
 800216a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216c:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <HAL_RCC_OscConfig+0x508>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d118      	bne.n	80021aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002178:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_RCC_OscConfig+0x508>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_RCC_OscConfig+0x508>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002182:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002184:	f7ff f9da 	bl	800153c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7ff f9d6 	bl	800153c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e1b2      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_RCC_OscConfig+0x508>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d108      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4d8>
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c2:	e029      	b.n	8002218 <HAL_RCC_OscConfig+0x52c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d115      	bne.n	80021f8 <HAL_RCC_OscConfig+0x50c>
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	4a03      	ldr	r2, [pc, #12]	; (80021f0 <HAL_RCC_OscConfig+0x504>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ec:	e014      	b.n	8002218 <HAL_RCC_OscConfig+0x52c>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40007000 	.word	0x40007000
 80021f8:	4b9a      	ldr	r3, [pc, #616]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	4a99      	ldr	r2, [pc, #612]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002208:	4b96      	ldr	r3, [pc, #600]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	4a95      	ldr	r2, [pc, #596]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d016      	beq.n	800224e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7ff f98c 	bl	800153c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002226:	e00a      	b.n	800223e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7ff f988 	bl	800153c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e162      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ed      	beq.n	8002228 <HAL_RCC_OscConfig+0x53c>
 800224c:	e015      	b.n	800227a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224e:	f7ff f975 	bl	800153c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002254:	e00a      	b.n	800226c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7ff f971 	bl	800153c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	; 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e14b      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800226c:	4b7d      	ldr	r3, [pc, #500]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ed      	bne.n	8002256 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227a:	7ffb      	ldrb	r3, [r7, #31]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002280:	4b78      	ldr	r3, [pc, #480]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	4a77      	ldr	r2, [pc, #476]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d03c      	beq.n	8002312 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01c      	beq.n	80022da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022a0:	4b70      	ldr	r3, [pc, #448]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 80022a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022a6:	4a6f      	ldr	r2, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff f944 	bl	800153c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022b8:	f7ff f940 	bl	800153c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e11c      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ca:	4b66      	ldr	r3, [pc, #408]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 80022cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0ef      	beq.n	80022b8 <HAL_RCC_OscConfig+0x5cc>
 80022d8:	e01b      	b.n	8002312 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022da:	4b62      	ldr	r3, [pc, #392]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 80022dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022e0:	4a60      	ldr	r2, [pc, #384]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7ff f927 	bl	800153c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022f2:	f7ff f923 	bl	800153c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0ff      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002304:	4b57      	ldr	r3, [pc, #348]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ef      	bne.n	80022f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80f3 	beq.w	8002502 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	2b02      	cmp	r3, #2
 8002322:	f040 80c9 	bne.w	80024b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002326:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0203 	and.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	429a      	cmp	r2, r3
 8002338:	d12c      	bne.n	8002394 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	3b01      	subs	r3, #1
 8002346:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d123      	bne.n	8002394 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d11b      	bne.n	8002394 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d113      	bne.n	8002394 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	3b01      	subs	r3, #1
 800237a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d109      	bne.n	8002394 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	3b01      	subs	r3, #1
 800238e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d06b      	beq.n	800246c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d062      	beq.n	8002460 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0ac      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 80023b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023b6:	f7ff f8c1 	bl	800153c <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7ff f8bd 	bl	800153c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e099      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_RCC_OscConfig+0x77c>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023ec:	3a01      	subs	r2, #1
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	4311      	orrs	r1, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023f6:	0212      	lsls	r2, r2, #8
 80023f8:	4311      	orrs	r1, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023fe:	0852      	lsrs	r2, r2, #1
 8002400:	3a01      	subs	r2, #1
 8002402:	0552      	lsls	r2, r2, #21
 8002404:	4311      	orrs	r1, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800240a:	0852      	lsrs	r2, r2, #1
 800240c:	3a01      	subs	r2, #1
 800240e:	0652      	lsls	r2, r2, #25
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002416:	06d2      	lsls	r2, r2, #27
 8002418:	430a      	orrs	r2, r1
 800241a:	4912      	ldr	r1, [pc, #72]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 800241c:	4313      	orrs	r3, r2
 800241e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002436:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002438:	f7ff f880 	bl	800153c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7ff f87c 	bl	800153c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e058      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_RCC_OscConfig+0x778>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800245e:	e050      	b.n	8002502 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e04f      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
 8002464:	40021000 	.word	0x40021000
 8002468:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x820>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d144      	bne.n	8002502 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCC_OscConfig+0x820>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a23      	ldr	r2, [pc, #140]	; (800250c <HAL_RCC_OscConfig+0x820>)
 800247e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002482:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002484:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_RCC_OscConfig+0x820>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a20      	ldr	r2, [pc, #128]	; (800250c <HAL_RCC_OscConfig+0x820>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002490:	f7ff f854 	bl	800153c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002498:	f7ff f850 	bl	800153c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e02c      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_RCC_OscConfig+0x820>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x7ac>
 80024b6:	e024      	b.n	8002502 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d01f      	beq.n	80024fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <HAL_RCC_OscConfig+0x820>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_RCC_OscConfig+0x820>)
 80024c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7ff f837 	bl	800153c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7ff f833 	bl	800153c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e00f      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_OscConfig+0x820>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_OscConfig+0x820>)
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	4905      	ldr	r1, [pc, #20]	; (800250c <HAL_RCC_OscConfig+0x820>)
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_OscConfig+0x824>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	60cb      	str	r3, [r1, #12]
 80024fc:	e001      	b.n	8002502 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	feeefffc 	.word	0xfeeefffc

08002514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0e7      	b.n	80026f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b75      	ldr	r3, [pc, #468]	; (8002700 <HAL_RCC_ClockConfig+0x1ec>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d910      	bls.n	8002558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b72      	ldr	r3, [pc, #456]	; (8002700 <HAL_RCC_ClockConfig+0x1ec>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	4970      	ldr	r1, [pc, #448]	; (8002700 <HAL_RCC_ClockConfig+0x1ec>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b6e      	ldr	r3, [pc, #440]	; (8002700 <HAL_RCC_ClockConfig+0x1ec>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0cf      	b.n	80026f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d010      	beq.n	8002586 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	4b66      	ldr	r3, [pc, #408]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002570:	429a      	cmp	r2, r3
 8002572:	d908      	bls.n	8002586 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4960      	ldr	r1, [pc, #384]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d04c      	beq.n	800262c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259a:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d121      	bne.n	80025ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0a6      	b.n	80026f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b2:	4b54      	ldr	r3, [pc, #336]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d115      	bne.n	80025ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e09a      	b.n	80026f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ca:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e08e      	b.n	80026f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025da:	4b4a      	ldr	r3, [pc, #296]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e086      	b.n	80026f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b46      	ldr	r3, [pc, #280]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4943      	ldr	r1, [pc, #268]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fc:	f7fe ff9e 	bl	800153c <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7fe ff9a 	bl	800153c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e06e      	b.n	80026f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d010      	beq.n	800265a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	4b31      	ldr	r3, [pc, #196]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002644:	429a      	cmp	r2, r3
 8002646:	d208      	bcs.n	800265a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002648:	4b2e      	ldr	r3, [pc, #184]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	492b      	ldr	r1, [pc, #172]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800265a:	4b29      	ldr	r3, [pc, #164]	; (8002700 <HAL_RCC_ClockConfig+0x1ec>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d210      	bcs.n	800268a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <HAL_RCC_ClockConfig+0x1ec>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 0207 	bic.w	r2, r3, #7
 8002670:	4923      	ldr	r1, [pc, #140]	; (8002700 <HAL_RCC_ClockConfig+0x1ec>)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_RCC_ClockConfig+0x1ec>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d001      	beq.n	800268a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e036      	b.n	80026f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4918      	ldr	r1, [pc, #96]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4910      	ldr	r1, [pc, #64]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026c8:	f000 f824 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	490b      	ldr	r1, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x1f4>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
 80026e4:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 80026e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1fc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fed5 	bl	800149c <HAL_InitTick>
 80026f2:	4603      	mov	r3, r0
 80026f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80026f6:	7afb      	ldrb	r3, [r7, #11]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40022000 	.word	0x40022000
 8002704:	40021000 	.word	0x40021000
 8002708:	08006448 	.word	0x08006448
 800270c:	20000010 	.word	0x20000010
 8002710:	20000014 	.word	0x20000014

08002714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <HAL_RCC_GetSysClockFreq+0x108>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800272c:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x34>
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d121      	bne.n	8002786 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d11e      	bne.n	8002786 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002748:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_RCC_GetSysClockFreq+0x108>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002754:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_GetSysClockFreq+0x108>)
 8002756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e005      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_RCC_GetSysClockFreq+0x108>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002770:	4a2b      	ldr	r2, [pc, #172]	; (8002820 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002778:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10d      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002784:	e00a      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d102      	bne.n	8002792 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_RCC_GetSysClockFreq+0x110>)
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	e004      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d101      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002798:	4b23      	ldr	r3, [pc, #140]	; (8002828 <HAL_RCC_GetSysClockFreq+0x114>)
 800279a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d134      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_RCC_GetSysClockFreq+0x108>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0xa6>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d003      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0xac>
 80027b8:	e005      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RCC_GetSysClockFreq+0x110>)
 80027bc:	617b      	str	r3, [r7, #20]
      break;
 80027be:	e005      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_RCC_GetSysClockFreq+0x114>)
 80027c2:	617b      	str	r3, [r7, #20]
      break;
 80027c4:	e002      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	617b      	str	r3, [r7, #20]
      break;
 80027ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_RCC_GetSysClockFreq+0x108>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	3301      	adds	r3, #1
 80027d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCC_GetSysClockFreq+0x108>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	fb03 f202 	mul.w	r2, r3, r2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCC_GetSysClockFreq+0x108>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	0e5b      	lsrs	r3, r3, #25
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	3301      	adds	r3, #1
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800280c:	69bb      	ldr	r3, [r7, #24]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	08006460 	.word	0x08006460
 8002824:	00f42400 	.word	0x00f42400
 8002828:	007a1200 	.word	0x007a1200

0800282c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCC_GetHCLKFreq+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000010 	.word	0x20000010

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002848:	f7ff fff0 	bl	800282c <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4904      	ldr	r1, [pc, #16]	; (800286c <HAL_RCC_GetPCLK1Freq+0x28>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	08006458 	.word	0x08006458

08002870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002874:	f7ff ffda 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0adb      	lsrs	r3, r3, #11
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4904      	ldr	r1, [pc, #16]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	08006458 	.word	0x08006458

0800289c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028a8:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028b4:	f7ff f9b6 	bl	8001c24 <HAL_PWREx_GetVoltageRange>
 80028b8:	6178      	str	r0, [r7, #20]
 80028ba:	e014      	b.n	80028e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	4a24      	ldr	r2, [pc, #144]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c6:	6593      	str	r3, [r2, #88]	; 0x58
 80028c8:	4b22      	ldr	r3, [pc, #136]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028d4:	f7ff f9a6 	bl	8001c24 <HAL_PWREx_GetVoltageRange>
 80028d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ec:	d10b      	bne.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b80      	cmp	r3, #128	; 0x80
 80028f2:	d919      	bls.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2ba0      	cmp	r3, #160	; 0xa0
 80028f8:	d902      	bls.n	8002900 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028fa:	2302      	movs	r3, #2
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	e013      	b.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002900:	2301      	movs	r3, #1
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e010      	b.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d902      	bls.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800290c:	2303      	movs	r3, #3
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	e00a      	b.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b80      	cmp	r3, #128	; 0x80
 8002916:	d102      	bne.n	800291e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002918:	2302      	movs	r3, #2
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	e004      	b.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b70      	cmp	r3, #112	; 0x70
 8002922:	d101      	bne.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002924:	2301      	movs	r3, #1
 8002926:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 0207 	bic.w	r2, r3, #7
 8002930:	4909      	ldr	r1, [pc, #36]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	429a      	cmp	r2, r3
 8002944:	d001      	beq.n	800294a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	40022000 	.word	0x40022000

0800295c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002964:	2300      	movs	r3, #0
 8002966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002968:	2300      	movs	r3, #0
 800296a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002974:	2b00      	cmp	r3, #0
 8002976:	d031      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002980:	d01a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002982:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002986:	d814      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d009      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800298c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002990:	d10f      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002992:	4b5d      	ldr	r3, [pc, #372]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	4a5c      	ldr	r2, [pc, #368]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800299e:	e00c      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f9ce 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b0:	e003      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	74fb      	strb	r3, [r7, #19]
      break;
 80029b6:	e000      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80029b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10b      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029c0:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	494e      	ldr	r1, [pc, #312]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029d6:	e001      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 809e 	beq.w	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ee:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00d      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a04:	4b40      	ldr	r3, [pc, #256]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	4a3f      	ldr	r2, [pc, #252]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a20:	4b3a      	ldr	r3, [pc, #232]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a39      	ldr	r2, [pc, #228]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a2c:	f7fe fd86 	bl	800153c <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a32:	e009      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fe fd82 	bl	800153c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	74fb      	strb	r3, [r7, #19]
        break;
 8002a46:	e005      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d15a      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01e      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d019      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a82:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aa2:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d016      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fd42 	bl	800153c <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fd3e 	bl	800153c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d902      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ad2:	e006      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ec      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae8:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af6:	4904      	ldr	r1, [pc, #16]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002afe:	e009      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
 8002b04:	e006      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b14:	7c7b      	ldrb	r3, [r7, #17]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d105      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b8a      	ldr	r3, [pc, #552]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	4a89      	ldr	r2, [pc, #548]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b32:	4b84      	ldr	r3, [pc, #528]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	f023 0203 	bic.w	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4980      	ldr	r1, [pc, #512]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b54:	4b7b      	ldr	r3, [pc, #492]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f023 020c 	bic.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	4978      	ldr	r1, [pc, #480]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b76:	4b73      	ldr	r3, [pc, #460]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	496f      	ldr	r1, [pc, #444]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b98:	4b6a      	ldr	r3, [pc, #424]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	4967      	ldr	r1, [pc, #412]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bba:	4b62      	ldr	r3, [pc, #392]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	495e      	ldr	r1, [pc, #376]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bdc:	4b59      	ldr	r3, [pc, #356]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	4956      	ldr	r1, [pc, #344]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bfe:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	494d      	ldr	r1, [pc, #308]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d028      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c20:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4945      	ldr	r1, [pc, #276]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c40:	4b40      	ldr	r3, [pc, #256]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a3f      	ldr	r2, [pc, #252]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c4a:	60d3      	str	r3, [r2, #12]
 8002c4c:	e011      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c56:	d10c      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f872 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d028      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	492d      	ldr	r1, [pc, #180]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c9c:	d106      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca8:	60d3      	str	r3, [r2, #12]
 8002caa:	e011      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f843 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01c      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cea:	4916      	ldr	r1, [pc, #88]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	2102      	movs	r1, #2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f820 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002d12:	7cfb      	ldrb	r3, [r7, #19]
 8002d14:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d30:	4904      	ldr	r1, [pc, #16]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d38:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000

08002d48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d56:	4b74      	ldr	r3, [pc, #464]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d018      	beq.n	8002d94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d62:	4b71      	ldr	r3, [pc, #452]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d10d      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
       ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d7a:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
       ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d047      	beq.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e044      	b.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d018      	beq.n	8002dce <RCCEx_PLLSAI1_Config+0x86>
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d825      	bhi.n	8002dec <RCCEx_PLLSAI1_Config+0xa4>
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d002      	beq.n	8002daa <RCCEx_PLLSAI1_Config+0x62>
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d009      	beq.n	8002dbc <RCCEx_PLLSAI1_Config+0x74>
 8002da8:	e020      	b.n	8002dec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002daa:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11d      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dba:	e01a      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dbc:	4b5a      	ldr	r3, [pc, #360]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d116      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dcc:	e013      	b.n	8002df6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dce:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dea:	e006      	b.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      break;
 8002df0:	e004      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df2:	bf00      	nop
 8002df4:	e002      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e02:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	430b      	orrs	r3, r1
 8002e18:	4943      	ldr	r1, [pc, #268]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d17c      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e30:	f7fe fb84 	bl	800153c <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e36:	e009      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e38:	f7fe fb80 	bl	800153c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
        break;
 8002e4a:	e005      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e4c:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ef      	bne.n	8002e38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d15f      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d110      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6892      	ldr	r2, [r2, #8]
 8002e74:	0211      	lsls	r1, r2, #8
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68d2      	ldr	r2, [r2, #12]
 8002e7a:	06d2      	lsls	r2, r2, #27
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	492a      	ldr	r1, [pc, #168]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	610b      	str	r3, [r1, #16]
 8002e84:	e027      	b.n	8002ed6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d112      	bne.n	8002eb2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6892      	ldr	r2, [r2, #8]
 8002e9c:	0211      	lsls	r1, r2, #8
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6912      	ldr	r2, [r2, #16]
 8002ea2:	0852      	lsrs	r2, r2, #1
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0552      	lsls	r2, r2, #21
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	491f      	ldr	r1, [pc, #124]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	610b      	str	r3, [r1, #16]
 8002eb0:	e011      	b.n	8002ed6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6892      	ldr	r2, [r2, #8]
 8002ec2:	0211      	lsls	r1, r2, #8
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6952      	ldr	r2, [r2, #20]
 8002ec8:	0852      	lsrs	r2, r2, #1
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	0652      	lsls	r2, r2, #25
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	4915      	ldr	r1, [pc, #84]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ed6:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002edc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ee0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fb2b 	bl	800153c <HAL_GetTick>
 8002ee6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ee8:	e009      	b.n	8002efe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eea:	f7fe fb27 	bl	800153c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d902      	bls.n	8002efe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	73fb      	strb	r3, [r7, #15]
          break;
 8002efc:	e005      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ef      	beq.n	8002eea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4903      	ldr	r1, [pc, #12]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e095      	b.n	800306a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d108      	bne.n	8002f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f4e:	d009      	beq.n	8002f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
 8002f56:	e005      	b.n	8002f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe f90c 	bl	800119c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fa4:	d902      	bls.n	8002fac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e002      	b.n	8002fb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fba:	d007      	beq.n	8002fcc <HAL_SPI_Init+0xa0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fc4:	d002      	beq.n	8002fcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	ea42 0103 	orr.w	r1, r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	f003 0204 	and.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003048:	ea42 0103 	orr.w	r1, r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_SPI_Transmit_IT+0x1e>
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003096:	e06d      	b.n	8003174 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d002      	beq.n	80030aa <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 80030a4:	2302      	movs	r3, #2
 80030a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030a8:	e064      	b.n	8003174 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_SPI_Transmit_IT+0x44>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e05e      	b.n	8003176 <HAL_SPI_Transmit_IT+0x102>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2203      	movs	r2, #3
 80030c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003104:	d903      	bls.n	800310e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <HAL_SPI_Transmit_IT+0x110>)
 800310a:	651a      	str	r2, [r3, #80]	; 0x50
 800310c:	e002      	b.n	8003114 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_SPI_Transmit_IT+0x114>)
 8003112:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800311c:	d10f      	bne.n	800313e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800313c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d007      	beq.n	800315c <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800315a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003172:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8003174:	7dfb      	ldrb	r3, [r7, #23]
}
 8003176:	4618      	mov	r0, r3
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	0800340d 	.word	0x0800340d
 8003188:	080033c7 	.word	0x080033c7

0800318c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10e      	bne.n	80031cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d009      	beq.n	80031cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
    return;
 80031ca:	e0ce      	b.n	800336a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_SPI_IRQHandler+0x5e>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d004      	beq.n	80031ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
    return;
 80031e8:	e0bf      	b.n	800336a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <HAL_SPI_IRQHandler+0x7e>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80b0 	beq.w	800336a <HAL_SPI_IRQHandler+0x1de>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80aa 	beq.w	800336a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d023      	beq.n	8003268 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b03      	cmp	r3, #3
 800322a:	d011      	beq.n	8003250 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	f043 0204 	orr.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	e00b      	b.n	8003268 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]
        return;
 8003266:	e080      	b.n	800336a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d014      	beq.n	800329c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	f043 0208 	orr.w	r2, r3, #8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d04f      	beq.n	8003368 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d104      	bne.n	80032f4 <HAL_SPI_IRQHandler+0x168>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d034      	beq.n	800335e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0203 	bic.w	r2, r2, #3
 8003302:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	2b00      	cmp	r3, #0
 800330a:	d011      	beq.n	8003330 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	4a17      	ldr	r2, [pc, #92]	; (8003370 <HAL_SPI_IRQHandler+0x1e4>)
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fa8e 	bl	800183a <HAL_DMA_Abort_IT>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003328:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <HAL_SPI_IRQHandler+0x1e4>)
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fa78 	bl	800183a <HAL_DMA_Abort_IT>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003354:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800335c:	e003      	b.n	8003366 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f812 	bl	8003388 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003364:	e000      	b.n	8003368 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003366:	bf00      	nop
    return;
 8003368:	bf00      	nop
  }
}
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	0800339d 	.word	0x0800339d

08003374 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f7ff ffe5 	bl	8003388 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f98a 	bl	8003718 <SPI_CloseTx_ISR>
  }
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	881a      	ldrh	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	1c9a      	adds	r2, r3, #2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d102      	bne.n	8003448 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f968 	bl	8003718 <SPI_CloseTx_ISR>
  }
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003460:	f7fe f86c 	bl	800153c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	4413      	add	r3, r2
 800346e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003470:	f7fe f864 	bl	800153c <HAL_GetTick>
 8003474:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	015b      	lsls	r3, r3, #5
 800347c:	0d1b      	lsrs	r3, r3, #20
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003486:	e054      	b.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d050      	beq.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003490:	f7fe f854 	bl	800153c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	429a      	cmp	r2, r3
 800349e:	d902      	bls.n	80034a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d13d      	bne.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034be:	d111      	bne.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c8:	d004      	beq.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d2:	d107      	bne.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ec:	d10f      	bne.n	800350e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800350c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e017      	b.n	8003552 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3b01      	subs	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	429a      	cmp	r2, r3
 800354e:	d19b      	bne.n	8003488 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000010 	.word	0x20000010

08003560 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003572:	f7fd ffe3 	bl	800153c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	4413      	add	r3, r2
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003582:	f7fd ffdb 	bl	800153c <HAL_GetTick>
 8003586:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003590:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00da      	lsls	r2, r3, #3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	0d1b      	lsrs	r3, r3, #20
 80035a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035a8:	e060      	b.n	800366c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035b0:	d107      	bne.n	80035c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d050      	beq.n	800366c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035ca:	f7fd ffb7 	bl	800153c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d902      	bls.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d13d      	bne.n	800365c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f8:	d111      	bne.n	800361e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	d004      	beq.n	800360e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360c:	d107      	bne.n	800361e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003626:	d10f      	bne.n	8003648 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003646:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e010      	b.n	800367e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	3b01      	subs	r3, #1
 800366a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4013      	ands	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	d196      	bne.n	80035aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000010 	.word	0x20000010

0800368c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2200      	movs	r2, #0
 80036a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff ff5b 	bl	8003560 <SPI_WaitFifoStateUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e027      	b.n	8003710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff fec0 	bl	8003450 <SPI_WaitFlagStateUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e014      	b.n	8003710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff ff34 	bl	8003560 <SPI_WaitFifoStateUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e000      	b.n	8003710 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003720:	f7fd ff0c 	bl	800153c <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003734:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	2164      	movs	r1, #100	; 0x64
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ffa6 	bl	800368c <SPI_EndRxTxTransaction>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff fe01 	bl	8003388 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003786:	e002      	b.n	800378e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fdf3 	bl	8003374 <HAL_SPI_TxCpltCallback>
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e049      	b.n	800383c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fd fd39 	bl	8001234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f000 f9e3 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d001      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e03b      	b.n	80038d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_TIM_Base_Start_IT+0x4e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d004      	beq.n	8003892 <HAL_TIM_Base_Start_IT+0x4e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d115      	bne.n	80038be <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800389a:	4013      	ands	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d015      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x8c>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038aa:	d011      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038bc:	e008      	b.n	80038d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e000      	b.n	80038d2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40014000 	.word	0x40014000
 80038e8:	00010007 	.word	0x00010007

080038ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6a1a      	ldr	r2, [r3, #32]
 800390a:	f241 1311 	movw	r3, #4369	; 0x1111
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10f      	bne.n	8003934 <HAL_TIM_Base_Stop_IT+0x48>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	f240 4344 	movw	r3, #1092	; 0x444
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_TIM_Base_Stop_IT+0x48>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d020      	beq.n	80039ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01b      	beq.n	80039ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0202 	mvn.w	r2, #2
 800397e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f8e4 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 800399a:	e005      	b.n	80039a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8d6 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8e7 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01b      	beq.n	80039fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f06f 0204 	mvn.w	r2, #4
 80039ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f8be 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 80039e6:	e005      	b.n	80039f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f8b0 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f8c1 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01b      	beq.n	8003a46 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f06f 0208 	mvn.w	r2, #8
 8003a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f898 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 8003a32:	e005      	b.n	8003a40 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f88a 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f89b 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01b      	beq.n	8003a92 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f06f 0210 	mvn.w	r2, #16
 8003a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2208      	movs	r2, #8
 8003a68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f872 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 8003a7e:	e005      	b.n	8003a8c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f864 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f875 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f06f 0201 	mvn.w	r2, #1
 8003aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fc ffb9 	bl	8000a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00c      	beq.n	8003ada <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f937 	bl	8003d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00c      	beq.n	8003afe <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f92f 	bl	8003d5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00c      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f834 	bl	8003b8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f06f 0220 	mvn.w	r2, #32
 8003b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8f7 	bl	8003d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a2a      	ldr	r2, [pc, #168]	; (8003c5c <TIM_Base_SetConfig+0xbc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_Base_SetConfig+0x20>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d108      	bne.n	8003bd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <TIM_Base_SetConfig+0xbc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <TIM_Base_SetConfig+0x52>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be0:	d007      	beq.n	8003bf2 <TIM_Base_SetConfig+0x52>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <TIM_Base_SetConfig+0xc0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_Base_SetConfig+0x52>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <TIM_Base_SetConfig+0xc4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d108      	bne.n	8003c04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a0c      	ldr	r2, [pc, #48]	; (8003c5c <TIM_Base_SetConfig+0xbc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_Base_SetConfig+0xa0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <TIM_Base_SetConfig+0xc0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_Base_SetConfig+0xa0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <TIM_Base_SetConfig+0xc4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d103      	bne.n	8003c48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	615a      	str	r2, [r3, #20]
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400

08003c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e04f      	b.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d108      	bne.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a10      	ldr	r2, [pc, #64]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d10c      	bne.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40014000 	.word	0x40014000

08003d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e040      	b.n	8003e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd fa74 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2224      	movs	r2, #36	; 0x24
 8003d9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fdaa 	bl	8004910 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fb7b 	bl	80044b8 <UART_SetConfig>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e01b      	b.n	8003e04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fe29 	bl	8004a54 <UART_CheckIdleState>
 8003e02:	4603      	mov	r3, r0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	; 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d137      	bne.n	8003e94 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_UART_Receive_IT+0x24>
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e030      	b.n	8003e96 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <HAL_UART_Receive_IT+0x94>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d01f      	beq.n	8003e84 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d018      	beq.n	8003e84 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	69f9      	ldr	r1, [r7, #28]
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e6      	bne.n	8003e52 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fef2 	bl	8004c74 <UART_Start_Receive_IT>
 8003e90:	4603      	mov	r3, r0
 8003e92:	e000      	b.n	8003e96 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3728      	adds	r7, #40	; 0x28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40008000 	.word	0x40008000

08003ea4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b0ba      	sub	sp, #232	; 0xe8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003eca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ece:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d115      	bne.n	8003f0c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00f      	beq.n	8003f0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 82ae 	beq.w	800445e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
      }
      return;
 8003f0a:	e2a8      	b.n	800445e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8117 	beq.w	8004144 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f26:	4b85      	ldr	r3, [pc, #532]	; (800413c <HAL_UART_IRQHandler+0x298>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 810a 	beq.w	8004144 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d011      	beq.n	8003f60 <HAL_UART_IRQHandler+0xbc>
 8003f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00b      	beq.n	8003f60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f56:	f043 0201 	orr.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d011      	beq.n	8003f90 <HAL_UART_IRQHandler+0xec>
 8003f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00b      	beq.n	8003f90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d011      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x11c>
 8003f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2204      	movs	r2, #4
 8003fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb6:	f043 0202 	orr.w	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d017      	beq.n	8003ffc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2208      	movs	r2, #8
 8003fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff2:	f043 0208 	orr.w	r2, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004004:	2b00      	cmp	r3, #0
 8004006:	d012      	beq.n	800402e <HAL_UART_IRQHandler+0x18a>
 8004008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00c      	beq.n	800402e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800401c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004024:	f043 0220 	orr.w	r2, r3, #32
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8214 	beq.w	8004462 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00d      	beq.n	8004062 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004068:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d005      	beq.n	8004086 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800407a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800407e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004082:	2b00      	cmp	r3, #0
 8004084:	d04f      	beq.n	8004126 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 feba 	bl	8004e00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d141      	bne.n	800411e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3308      	adds	r3, #8
 80040a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1d9      	bne.n	800409a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d013      	beq.n	8004116 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f2:	4a13      	ldr	r2, [pc, #76]	; (8004140 <HAL_UART_IRQHandler+0x29c>)
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fd fb9d 	bl	800183a <HAL_DMA_Abort_IT>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d017      	beq.n	8004136 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004110:	4610      	mov	r0, r2
 8004112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	e00f      	b.n	8004136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9b8 	bl	800448c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411c:	e00b      	b.n	8004136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f9b4 	bl	800448c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	e007      	b.n	8004136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f9b0 	bl	800448c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004134:	e195      	b.n	8004462 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004136:	bf00      	nop
    return;
 8004138:	e193      	b.n	8004462 <HAL_UART_IRQHandler+0x5be>
 800413a:	bf00      	nop
 800413c:	04000120 	.word	0x04000120
 8004140:	08004ec9 	.word	0x08004ec9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004148:	2b01      	cmp	r3, #1
 800414a:	f040 814e 	bne.w	80043ea <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800414e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8147 	beq.w	80043ea <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8140 	beq.w	80043ea <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2210      	movs	r2, #16
 8004170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	f040 80b8 	bne.w	80042f2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800418e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8167 	beq.w	8004466 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800419e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041a2:	429a      	cmp	r2, r3
 80041a4:	f080 815f 	bcs.w	8004466 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 8086 	bne.w	80042d0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1da      	bne.n	80041c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3308      	adds	r3, #8
 8004214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800421e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004236:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800423a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e1      	bne.n	800420e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3308      	adds	r3, #8
 8004250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800425a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800426e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800427c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e3      	bne.n	800424a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800429e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a0:	f023 0310 	bic.w	r3, r3, #16
 80042a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80042b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e4      	bne.n	8004290 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd fa77 	bl	80017be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f8d8 	bl	80044a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042f0:	e0b9      	b.n	8004466 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80ab 	beq.w	800446a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004314:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80a6 	beq.w	800446a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800432c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004332:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004340:	647b      	str	r3, [r7, #68]	; 0x44
 8004342:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800434e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e4      	bne.n	800431e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	623b      	str	r3, [r7, #32]
   return(result);
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004378:	633a      	str	r2, [r7, #48]	; 0x30
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800437e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e3      	bne.n	8004354 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f023 0310 	bic.w	r3, r3, #16
 80043b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	69b9      	ldr	r1, [r7, #24]
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	617b      	str	r3, [r7, #20]
   return(result);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e4      	bne.n	80043a0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f85c 	bl	80044a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043e8:	e03f      	b.n	800446a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00e      	beq.n	8004414 <HAL_UART_IRQHandler+0x570>
 80043f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800440a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 ff57 	bl	80052c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004412:	e02d      	b.n	8004470 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01c      	beq.n	800446e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
    }
    return;
 800443c:	e017      	b.n	800446e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d012      	beq.n	8004470 <HAL_UART_IRQHandler+0x5cc>
 800444a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00c      	beq.n	8004470 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fd4c 	bl	8004ef4 <UART_EndTransmit_IT>
    return;
 800445c:	e008      	b.n	8004470 <HAL_UART_IRQHandler+0x5cc>
      return;
 800445e:	bf00      	nop
 8004460:	e006      	b.n	8004470 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004462:	bf00      	nop
 8004464:	e004      	b.n	8004470 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004466:	bf00      	nop
 8004468:	e002      	b.n	8004470 <HAL_UART_IRQHandler+0x5cc>
      return;
 800446a:	bf00      	nop
 800446c:	e000      	b.n	8004470 <HAL_UART_IRQHandler+0x5cc>
    return;
 800446e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004470:	37e8      	adds	r7, #232	; 0xe8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop

08004478 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b08a      	sub	sp, #40	; 0x28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4313      	orrs	r3, r2
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4bb4      	ldr	r3, [pc, #720]	; (80047b8 <UART_SetConfig+0x300>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4aa9      	ldr	r2, [pc, #676]	; (80047bc <UART_SetConfig+0x304>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	4313      	orrs	r3, r2
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004534:	430a      	orrs	r2, r1
 8004536:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4aa0      	ldr	r2, [pc, #640]	; (80047c0 <UART_SetConfig+0x308>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d126      	bne.n	8004590 <UART_SetConfig+0xd8>
 8004542:	4ba0      	ldr	r3, [pc, #640]	; (80047c4 <UART_SetConfig+0x30c>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	2b03      	cmp	r3, #3
 800454e:	d81b      	bhi.n	8004588 <UART_SetConfig+0xd0>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0xa0>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	08004569 	.word	0x08004569
 800455c:	08004579 	.word	0x08004579
 8004560:	08004571 	.word	0x08004571
 8004564:	08004581 	.word	0x08004581
 8004568:	2301      	movs	r3, #1
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456e:	e080      	b.n	8004672 <UART_SetConfig+0x1ba>
 8004570:	2302      	movs	r3, #2
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e07c      	b.n	8004672 <UART_SetConfig+0x1ba>
 8004578:	2304      	movs	r3, #4
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457e:	e078      	b.n	8004672 <UART_SetConfig+0x1ba>
 8004580:	2308      	movs	r3, #8
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004586:	e074      	b.n	8004672 <UART_SetConfig+0x1ba>
 8004588:	2310      	movs	r3, #16
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458e:	e070      	b.n	8004672 <UART_SetConfig+0x1ba>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a8c      	ldr	r2, [pc, #560]	; (80047c8 <UART_SetConfig+0x310>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d138      	bne.n	800460c <UART_SetConfig+0x154>
 800459a:	4b8a      	ldr	r3, [pc, #552]	; (80047c4 <UART_SetConfig+0x30c>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d82d      	bhi.n	8004604 <UART_SetConfig+0x14c>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0xf8>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045e5 	.word	0x080045e5
 80045b4:	08004605 	.word	0x08004605
 80045b8:	08004605 	.word	0x08004605
 80045bc:	08004605 	.word	0x08004605
 80045c0:	080045f5 	.word	0x080045f5
 80045c4:	08004605 	.word	0x08004605
 80045c8:	08004605 	.word	0x08004605
 80045cc:	08004605 	.word	0x08004605
 80045d0:	080045ed 	.word	0x080045ed
 80045d4:	08004605 	.word	0x08004605
 80045d8:	08004605 	.word	0x08004605
 80045dc:	08004605 	.word	0x08004605
 80045e0:	080045fd 	.word	0x080045fd
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ea:	e042      	b.n	8004672 <UART_SetConfig+0x1ba>
 80045ec:	2302      	movs	r3, #2
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f2:	e03e      	b.n	8004672 <UART_SetConfig+0x1ba>
 80045f4:	2304      	movs	r3, #4
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fa:	e03a      	b.n	8004672 <UART_SetConfig+0x1ba>
 80045fc:	2308      	movs	r3, #8
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004602:	e036      	b.n	8004672 <UART_SetConfig+0x1ba>
 8004604:	2310      	movs	r3, #16
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460a:	e032      	b.n	8004672 <UART_SetConfig+0x1ba>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a6a      	ldr	r2, [pc, #424]	; (80047bc <UART_SetConfig+0x304>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d12a      	bne.n	800466c <UART_SetConfig+0x1b4>
 8004616:	4b6b      	ldr	r3, [pc, #428]	; (80047c4 <UART_SetConfig+0x30c>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004624:	d01a      	beq.n	800465c <UART_SetConfig+0x1a4>
 8004626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800462a:	d81b      	bhi.n	8004664 <UART_SetConfig+0x1ac>
 800462c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004630:	d00c      	beq.n	800464c <UART_SetConfig+0x194>
 8004632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004636:	d815      	bhi.n	8004664 <UART_SetConfig+0x1ac>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <UART_SetConfig+0x18c>
 800463c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004640:	d008      	beq.n	8004654 <UART_SetConfig+0x19c>
 8004642:	e00f      	b.n	8004664 <UART_SetConfig+0x1ac>
 8004644:	2300      	movs	r3, #0
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e012      	b.n	8004672 <UART_SetConfig+0x1ba>
 800464c:	2302      	movs	r3, #2
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e00e      	b.n	8004672 <UART_SetConfig+0x1ba>
 8004654:	2304      	movs	r3, #4
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e00a      	b.n	8004672 <UART_SetConfig+0x1ba>
 800465c:	2308      	movs	r3, #8
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e006      	b.n	8004672 <UART_SetConfig+0x1ba>
 8004664:	2310      	movs	r3, #16
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e002      	b.n	8004672 <UART_SetConfig+0x1ba>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a51      	ldr	r2, [pc, #324]	; (80047bc <UART_SetConfig+0x304>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d17a      	bne.n	8004772 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800467c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004680:	2b08      	cmp	r3, #8
 8004682:	d824      	bhi.n	80046ce <UART_SetConfig+0x216>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <UART_SetConfig+0x1d4>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	080046b1 	.word	0x080046b1
 8004690:	080046cf 	.word	0x080046cf
 8004694:	080046b9 	.word	0x080046b9
 8004698:	080046cf 	.word	0x080046cf
 800469c:	080046bf 	.word	0x080046bf
 80046a0:	080046cf 	.word	0x080046cf
 80046a4:	080046cf 	.word	0x080046cf
 80046a8:	080046cf 	.word	0x080046cf
 80046ac:	080046c7 	.word	0x080046c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b0:	f7fe f8c8 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 80046b4:	61f8      	str	r0, [r7, #28]
        break;
 80046b6:	e010      	b.n	80046da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b8:	4b44      	ldr	r3, [pc, #272]	; (80047cc <UART_SetConfig+0x314>)
 80046ba:	61fb      	str	r3, [r7, #28]
        break;
 80046bc:	e00d      	b.n	80046da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046be:	f7fe f829 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80046c2:	61f8      	str	r0, [r7, #28]
        break;
 80046c4:	e009      	b.n	80046da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ca:	61fb      	str	r3, [r7, #28]
        break;
 80046cc:	e005      	b.n	80046da <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8107 	beq.w	80048f0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4413      	add	r3, r2
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d305      	bcc.n	80046fe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d903      	bls.n	8004706 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004704:	e0f4      	b.n	80048f0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2200      	movs	r2, #0
 800470a:	461c      	mov	r4, r3
 800470c:	4615      	mov	r5, r2
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	022b      	lsls	r3, r5, #8
 8004718:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800471c:	0222      	lsls	r2, r4, #8
 800471e:	68f9      	ldr	r1, [r7, #12]
 8004720:	6849      	ldr	r1, [r1, #4]
 8004722:	0849      	lsrs	r1, r1, #1
 8004724:	2000      	movs	r0, #0
 8004726:	4688      	mov	r8, r1
 8004728:	4681      	mov	r9, r0
 800472a:	eb12 0a08 	adds.w	sl, r2, r8
 800472e:	eb43 0b09 	adc.w	fp, r3, r9
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004740:	4650      	mov	r0, sl
 8004742:	4659      	mov	r1, fp
 8004744:	f7fb fd42 	bl	80001cc <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4613      	mov	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004756:	d308      	bcc.n	800476a <UART_SetConfig+0x2b2>
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800475e:	d204      	bcs.n	800476a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	60da      	str	r2, [r3, #12]
 8004768:	e0c2      	b.n	80048f0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004770:	e0be      	b.n	80048f0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477a:	d16a      	bne.n	8004852 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800477c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004780:	2b08      	cmp	r3, #8
 8004782:	d834      	bhi.n	80047ee <UART_SetConfig+0x336>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <UART_SetConfig+0x2d4>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047d9 	.word	0x080047d9
 8004798:	080047ef 	.word	0x080047ef
 800479c:	080047df 	.word	0x080047df
 80047a0:	080047ef 	.word	0x080047ef
 80047a4:	080047ef 	.word	0x080047ef
 80047a8:	080047ef 	.word	0x080047ef
 80047ac:	080047e7 	.word	0x080047e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7fe f848 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 80047b4:	61f8      	str	r0, [r7, #28]
        break;
 80047b6:	e020      	b.n	80047fa <UART_SetConfig+0x342>
 80047b8:	efff69f3 	.word	0xefff69f3
 80047bc:	40008000 	.word	0x40008000
 80047c0:	40013800 	.word	0x40013800
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40004400 	.word	0x40004400
 80047cc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d0:	f7fe f84e 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 80047d4:	61f8      	str	r0, [r7, #28]
        break;
 80047d6:	e010      	b.n	80047fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d8:	4b4c      	ldr	r3, [pc, #304]	; (800490c <UART_SetConfig+0x454>)
 80047da:	61fb      	str	r3, [r7, #28]
        break;
 80047dc:	e00d      	b.n	80047fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047de:	f7fd ff99 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80047e2:	61f8      	str	r0, [r7, #28]
        break;
 80047e4:	e009      	b.n	80047fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ea:	61fb      	str	r3, [r7, #28]
        break;
 80047ec:	e005      	b.n	80047fa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d077      	beq.n	80048f0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	005a      	lsls	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	441a      	add	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b0f      	cmp	r3, #15
 800481a:	d916      	bls.n	800484a <UART_SetConfig+0x392>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004822:	d212      	bcs.n	800484a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f023 030f 	bic.w	r3, r3, #15
 800482c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	b29b      	uxth	r3, r3
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	b29a      	uxth	r2, r3
 800483a:	8afb      	ldrh	r3, [r7, #22]
 800483c:	4313      	orrs	r3, r2
 800483e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	8afa      	ldrh	r2, [r7, #22]
 8004846:	60da      	str	r2, [r3, #12]
 8004848:	e052      	b.n	80048f0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004850:	e04e      	b.n	80048f0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004856:	2b08      	cmp	r3, #8
 8004858:	d827      	bhi.n	80048aa <UART_SetConfig+0x3f2>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x3a8>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	080048ab 	.word	0x080048ab
 8004870:	0800489b 	.word	0x0800489b
 8004874:	080048ab 	.word	0x080048ab
 8004878:	080048ab 	.word	0x080048ab
 800487c:	080048ab 	.word	0x080048ab
 8004880:	080048a3 	.word	0x080048a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7fd ffde 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8004888:	61f8      	str	r0, [r7, #28]
        break;
 800488a:	e014      	b.n	80048b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800488c:	f7fd fff0 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8004890:	61f8      	str	r0, [r7, #28]
        break;
 8004892:	e010      	b.n	80048b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004894:	4b1d      	ldr	r3, [pc, #116]	; (800490c <UART_SetConfig+0x454>)
 8004896:	61fb      	str	r3, [r7, #28]
        break;
 8004898:	e00d      	b.n	80048b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7fd ff3b 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 800489e:	61f8      	str	r0, [r7, #28]
        break;
 80048a0:	e009      	b.n	80048b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a6:	61fb      	str	r3, [r7, #28]
        break;
 80048a8:	e005      	b.n	80048b6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048b4:	bf00      	nop
    }

    if (pclk != 0U)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d019      	beq.n	80048f0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	085a      	lsrs	r2, r3, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	441a      	add	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	d909      	bls.n	80048ea <UART_SetConfig+0x432>
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048dc:	d205      	bcs.n	80048ea <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60da      	str	r2, [r3, #12]
 80048e8:	e002      	b.n	80048f0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004900:	4618      	mov	r0, r3
 8004902:	3728      	adds	r7, #40	; 0x28
 8004904:	46bd      	mov	sp, r7
 8004906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490a:	bf00      	nop
 800490c:	00f42400 	.word	0x00f42400

08004910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01a      	beq.n	8004a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0e:	d10a      	bne.n	8004a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b098      	sub	sp, #96	; 0x60
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a64:	f7fc fd6a 	bl	800153c <HAL_GetTick>
 8004a68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d12e      	bne.n	8004ad6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a80:	2200      	movs	r2, #0
 8004a82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f88c 	bl	8004ba4 <UART_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d021      	beq.n	8004ad6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e6      	bne.n	8004a92 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e062      	b.n	8004b9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d149      	bne.n	8004b78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aec:	2200      	movs	r2, #0
 8004aee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f856 	bl	8004ba4 <UART_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d03c      	beq.n	8004b78 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e6      	bne.n	8004afe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b50:	61fa      	str	r2, [r7, #28]
 8004b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	69b9      	ldr	r1, [r7, #24]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e5      	bne.n	8004b30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e011      	b.n	8004b9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3758      	adds	r7, #88	; 0x58
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb4:	e049      	b.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d045      	beq.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fc fcbd 	bl	800153c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e048      	b.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d031      	beq.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d110      	bne.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f8ff 	bl	8004e00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2208      	movs	r2, #8
 8004c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e029      	b.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c24:	d111      	bne.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f8e5 	bl	8004e00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e00f      	b.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d0a6      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b097      	sub	sp, #92	; 0x5c
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	d10e      	bne.n	8004cc6 <UART_Start_Receive_IT+0x52>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d105      	bne.n	8004cbc <UART_Start_Receive_IT+0x48>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004cb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cba:	e02d      	b.n	8004d18 <UART_Start_Receive_IT+0xa4>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	22ff      	movs	r2, #255	; 0xff
 8004cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cc4:	e028      	b.n	8004d18 <UART_Start_Receive_IT+0xa4>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10d      	bne.n	8004cea <UART_Start_Receive_IT+0x76>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <UART_Start_Receive_IT+0x6c>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	22ff      	movs	r2, #255	; 0xff
 8004cda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cde:	e01b      	b.n	8004d18 <UART_Start_Receive_IT+0xa4>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	227f      	movs	r2, #127	; 0x7f
 8004ce4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ce8:	e016      	b.n	8004d18 <UART_Start_Receive_IT+0xa4>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf2:	d10d      	bne.n	8004d10 <UART_Start_Receive_IT+0x9c>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d104      	bne.n	8004d06 <UART_Start_Receive_IT+0x92>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	227f      	movs	r2, #127	; 0x7f
 8004d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d04:	e008      	b.n	8004d18 <UART_Start_Receive_IT+0xa4>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	223f      	movs	r2, #63	; 0x3f
 8004d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d0e:	e003      	b.n	8004d18 <UART_Start_Receive_IT+0xa4>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2222      	movs	r2, #34	; 0x22
 8004d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d32:	e853 3f00 	ldrex	r3, [r3]
 8004d36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d48:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e5      	bne.n	8004d28 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d64:	d107      	bne.n	8004d76 <UART_Start_Receive_IT+0x102>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a21      	ldr	r2, [pc, #132]	; (8004df8 <UART_Start_Receive_IT+0x184>)
 8004d72:	669a      	str	r2, [r3, #104]	; 0x68
 8004d74:	e002      	b.n	8004d7c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <UART_Start_Receive_IT+0x188>)
 8004d7a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d019      	beq.n	8004db8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
 8004da4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e6      	bne.n	8004d84 <UART_Start_Receive_IT+0x110>
 8004db6:	e018      	b.n	8004dea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f043 0320 	orr.w	r3, r3, #32
 8004dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd6:	623b      	str	r3, [r7, #32]
 8004dd8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	69f9      	ldr	r1, [r7, #28]
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e6      	bne.n	8004db8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	375c      	adds	r7, #92	; 0x5c
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	08005105 	.word	0x08005105
 8004dfc:	08004f49 	.word	0x08004f49

08004e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b095      	sub	sp, #84	; 0x54
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e26:	643b      	str	r3, [r7, #64]	; 0x40
 8004e28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e6      	bne.n	8004e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e5      	bne.n	8004e3a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d118      	bne.n	8004ea8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f023 0310 	bic.w	r3, r3, #16
 8004e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6979      	ldr	r1, [r7, #20]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e6      	bne.n	8004e76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ebc:	bf00      	nop
 8004ebe:	3754      	adds	r7, #84	; 0x54
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff fad0 	bl	800448c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6979      	ldr	r1, [r7, #20]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	613b      	str	r3, [r7, #16]
   return(result);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e6      	bne.n	8004efc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff fa9c 	bl	8004478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f40:	bf00      	nop
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b09c      	sub	sp, #112	; 0x70
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f56:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f60:	2b22      	cmp	r3, #34	; 0x22
 8004f62:	f040 80be 	bne.w	80050e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004f74:	b2d9      	uxtb	r1, r3
 8004f76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	400a      	ands	r2, r1
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f040 80a3 	bne.w	80050f6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fce:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fd0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e6      	bne.n	8004fb0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3308      	adds	r3, #8
 8005000:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005002:	647a      	str	r2, [r7, #68]	; 0x44
 8005004:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e5      	bne.n	8004fe2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a34      	ldr	r2, [pc, #208]	; (8005100 <UART_RxISR_8BIT+0x1b8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d01f      	beq.n	8005074 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d018      	beq.n	8005074 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	623b      	str	r3, [r7, #32]
   return(result);
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005056:	663b      	str	r3, [r7, #96]	; 0x60
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
 8005062:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e6      	bne.n	8005042 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005078:	2b01      	cmp	r3, #1
 800507a:	d12e      	bne.n	80050da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0310 	bic.w	r3, r3, #16
 8005096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	69b9      	ldr	r1, [r7, #24]
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	617b      	str	r3, [r7, #20]
   return(result);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e6      	bne.n	8005082 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d103      	bne.n	80050ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2210      	movs	r2, #16
 80050c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff f9e4 	bl	80044a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050d8:	e00d      	b.n	80050f6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb fc68 	bl	80009b0 <HAL_UART_RxCpltCallback>
}
 80050e0:	e009      	b.n	80050f6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	8b1b      	ldrh	r3, [r3, #24]
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0208 	orr.w	r2, r2, #8
 80050f2:	b292      	uxth	r2, r2
 80050f4:	831a      	strh	r2, [r3, #24]
}
 80050f6:	bf00      	nop
 80050f8:	3770      	adds	r7, #112	; 0x70
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40008000 	.word	0x40008000

08005104 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b09c      	sub	sp, #112	; 0x70
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005112:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511c:	2b22      	cmp	r3, #34	; 0x22
 800511e:	f040 80be 	bne.w	800529e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005128:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005132:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005136:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800513a:	4013      	ands	r3, r2
 800513c:	b29a      	uxth	r2, r3
 800513e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005140:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	1c9a      	adds	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	f040 80a3 	bne.w	80052b2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800517a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005180:	667b      	str	r3, [r7, #100]	; 0x64
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800518a:	657b      	str	r3, [r7, #84]	; 0x54
 800518c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005190:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e6      	bne.n	800516c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3308      	adds	r3, #8
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	f023 0301 	bic.w	r3, r3, #1
 80051b4:	663b      	str	r3, [r7, #96]	; 0x60
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051be:	643a      	str	r2, [r7, #64]	; 0x40
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e5      	bne.n	800519e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a34      	ldr	r2, [pc, #208]	; (80052bc <UART_RxISR_16BIT+0x1b8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d01f      	beq.n	8005230 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d018      	beq.n	8005230 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	61fb      	str	r3, [r7, #28]
   return(result);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e6      	bne.n	80051fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	2b01      	cmp	r3, #1
 8005236:	d12e      	bne.n	8005296 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	60bb      	str	r3, [r7, #8]
   return(result);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f023 0310 	bic.w	r3, r3, #16
 8005252:	65bb      	str	r3, [r7, #88]	; 0x58
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6979      	ldr	r1, [r7, #20]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	613b      	str	r3, [r7, #16]
   return(result);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e6      	bne.n	800523e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b10      	cmp	r3, #16
 800527c:	d103      	bne.n	8005286 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2210      	movs	r2, #16
 8005284:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff f906 	bl	80044a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005294:	e00d      	b.n	80052b2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fb fb8a 	bl	80009b0 <HAL_UART_RxCpltCallback>
}
 800529c:	e009      	b.n	80052b2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	8b1b      	ldrh	r3, [r3, #24]
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0208 	orr.w	r2, r2, #8
 80052ae:	b292      	uxth	r2, r2
 80052b0:	831a      	strh	r2, [r3, #24]
}
 80052b2:	bf00      	nop
 80052b4:	3770      	adds	r7, #112	; 0x70
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40008000 	.word	0x40008000

080052c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <_strtol_l.constprop.0>:
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052da:	d001      	beq.n	80052e0 <_strtol_l.constprop.0+0xc>
 80052dc:	2b24      	cmp	r3, #36	; 0x24
 80052de:	d906      	bls.n	80052ee <_strtol_l.constprop.0+0x1a>
 80052e0:	f000 f88c 	bl	80053fc <__errno>
 80052e4:	2316      	movs	r3, #22
 80052e6:	6003      	str	r3, [r0, #0]
 80052e8:	2000      	movs	r0, #0
 80052ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80053d4 <_strtol_l.constprop.0+0x100>
 80052f2:	460d      	mov	r5, r1
 80052f4:	462e      	mov	r6, r5
 80052f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052fa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80052fe:	f017 0708 	ands.w	r7, r7, #8
 8005302:	d1f7      	bne.n	80052f4 <_strtol_l.constprop.0+0x20>
 8005304:	2c2d      	cmp	r4, #45	; 0x2d
 8005306:	d132      	bne.n	800536e <_strtol_l.constprop.0+0x9a>
 8005308:	782c      	ldrb	r4, [r5, #0]
 800530a:	2701      	movs	r7, #1
 800530c:	1cb5      	adds	r5, r6, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d05b      	beq.n	80053ca <_strtol_l.constprop.0+0xf6>
 8005312:	2b10      	cmp	r3, #16
 8005314:	d109      	bne.n	800532a <_strtol_l.constprop.0+0x56>
 8005316:	2c30      	cmp	r4, #48	; 0x30
 8005318:	d107      	bne.n	800532a <_strtol_l.constprop.0+0x56>
 800531a:	782c      	ldrb	r4, [r5, #0]
 800531c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005320:	2c58      	cmp	r4, #88	; 0x58
 8005322:	d14d      	bne.n	80053c0 <_strtol_l.constprop.0+0xec>
 8005324:	786c      	ldrb	r4, [r5, #1]
 8005326:	2310      	movs	r3, #16
 8005328:	3502      	adds	r5, #2
 800532a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800532e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005332:	f04f 0e00 	mov.w	lr, #0
 8005336:	fbb8 f9f3 	udiv	r9, r8, r3
 800533a:	4676      	mov	r6, lr
 800533c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005340:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005344:	f1bc 0f09 	cmp.w	ip, #9
 8005348:	d816      	bhi.n	8005378 <_strtol_l.constprop.0+0xa4>
 800534a:	4664      	mov	r4, ip
 800534c:	42a3      	cmp	r3, r4
 800534e:	dd24      	ble.n	800539a <_strtol_l.constprop.0+0xc6>
 8005350:	f1be 3fff 	cmp.w	lr, #4294967295
 8005354:	d008      	beq.n	8005368 <_strtol_l.constprop.0+0x94>
 8005356:	45b1      	cmp	r9, r6
 8005358:	d31c      	bcc.n	8005394 <_strtol_l.constprop.0+0xc0>
 800535a:	d101      	bne.n	8005360 <_strtol_l.constprop.0+0x8c>
 800535c:	45a2      	cmp	sl, r4
 800535e:	db19      	blt.n	8005394 <_strtol_l.constprop.0+0xc0>
 8005360:	fb06 4603 	mla	r6, r6, r3, r4
 8005364:	f04f 0e01 	mov.w	lr, #1
 8005368:	f815 4b01 	ldrb.w	r4, [r5], #1
 800536c:	e7e8      	b.n	8005340 <_strtol_l.constprop.0+0x6c>
 800536e:	2c2b      	cmp	r4, #43	; 0x2b
 8005370:	bf04      	itt	eq
 8005372:	782c      	ldrbeq	r4, [r5, #0]
 8005374:	1cb5      	addeq	r5, r6, #2
 8005376:	e7ca      	b.n	800530e <_strtol_l.constprop.0+0x3a>
 8005378:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800537c:	f1bc 0f19 	cmp.w	ip, #25
 8005380:	d801      	bhi.n	8005386 <_strtol_l.constprop.0+0xb2>
 8005382:	3c37      	subs	r4, #55	; 0x37
 8005384:	e7e2      	b.n	800534c <_strtol_l.constprop.0+0x78>
 8005386:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800538a:	f1bc 0f19 	cmp.w	ip, #25
 800538e:	d804      	bhi.n	800539a <_strtol_l.constprop.0+0xc6>
 8005390:	3c57      	subs	r4, #87	; 0x57
 8005392:	e7db      	b.n	800534c <_strtol_l.constprop.0+0x78>
 8005394:	f04f 3eff 	mov.w	lr, #4294967295
 8005398:	e7e6      	b.n	8005368 <_strtol_l.constprop.0+0x94>
 800539a:	f1be 3fff 	cmp.w	lr, #4294967295
 800539e:	d105      	bne.n	80053ac <_strtol_l.constprop.0+0xd8>
 80053a0:	2322      	movs	r3, #34	; 0x22
 80053a2:	6003      	str	r3, [r0, #0]
 80053a4:	4646      	mov	r6, r8
 80053a6:	b942      	cbnz	r2, 80053ba <_strtol_l.constprop.0+0xe6>
 80053a8:	4630      	mov	r0, r6
 80053aa:	e79e      	b.n	80052ea <_strtol_l.constprop.0+0x16>
 80053ac:	b107      	cbz	r7, 80053b0 <_strtol_l.constprop.0+0xdc>
 80053ae:	4276      	negs	r6, r6
 80053b0:	2a00      	cmp	r2, #0
 80053b2:	d0f9      	beq.n	80053a8 <_strtol_l.constprop.0+0xd4>
 80053b4:	f1be 0f00 	cmp.w	lr, #0
 80053b8:	d000      	beq.n	80053bc <_strtol_l.constprop.0+0xe8>
 80053ba:	1e69      	subs	r1, r5, #1
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	e7f3      	b.n	80053a8 <_strtol_l.constprop.0+0xd4>
 80053c0:	2430      	movs	r4, #48	; 0x30
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1b1      	bne.n	800532a <_strtol_l.constprop.0+0x56>
 80053c6:	2308      	movs	r3, #8
 80053c8:	e7af      	b.n	800532a <_strtol_l.constprop.0+0x56>
 80053ca:	2c30      	cmp	r4, #48	; 0x30
 80053cc:	d0a5      	beq.n	800531a <_strtol_l.constprop.0+0x46>
 80053ce:	230a      	movs	r3, #10
 80053d0:	e7ab      	b.n	800532a <_strtol_l.constprop.0+0x56>
 80053d2:	bf00      	nop
 80053d4:	08006491 	.word	0x08006491

080053d8 <strtol>:
 80053d8:	4613      	mov	r3, r2
 80053da:	460a      	mov	r2, r1
 80053dc:	4601      	mov	r1, r0
 80053de:	4802      	ldr	r0, [pc, #8]	; (80053e8 <strtol+0x10>)
 80053e0:	6800      	ldr	r0, [r0, #0]
 80053e2:	f7ff bf77 	b.w	80052d4 <_strtol_l.constprop.0>
 80053e6:	bf00      	nop
 80053e8:	20000068 	.word	0x20000068

080053ec <memset>:
 80053ec:	4402      	add	r2, r0
 80053ee:	4603      	mov	r3, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	f803 1b01 	strb.w	r1, [r3], #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <__errno>:
 80053fc:	4b01      	ldr	r3, [pc, #4]	; (8005404 <__errno+0x8>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000068 	.word	0x20000068

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	4d0d      	ldr	r5, [pc, #52]	; (8005440 <__libc_init_array+0x38>)
 800540c:	4c0d      	ldr	r4, [pc, #52]	; (8005444 <__libc_init_array+0x3c>)
 800540e:	1b64      	subs	r4, r4, r5
 8005410:	10a4      	asrs	r4, r4, #2
 8005412:	2600      	movs	r6, #0
 8005414:	42a6      	cmp	r6, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	4d0b      	ldr	r5, [pc, #44]	; (8005448 <__libc_init_array+0x40>)
 800541a:	4c0c      	ldr	r4, [pc, #48]	; (800544c <__libc_init_array+0x44>)
 800541c:	f000 f818 	bl	8005450 <_init>
 8005420:	1b64      	subs	r4, r4, r5
 8005422:	10a4      	asrs	r4, r4, #2
 8005424:	2600      	movs	r6, #0
 8005426:	42a6      	cmp	r6, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005430:	4798      	blx	r3
 8005432:	3601      	adds	r6, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f855 3b04 	ldr.w	r3, [r5], #4
 800543a:	4798      	blx	r3
 800543c:	3601      	adds	r6, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	0800659c 	.word	0x0800659c
 8005444:	0800659c 	.word	0x0800659c
 8005448:	0800659c 	.word	0x0800659c
 800544c:	080065a0 	.word	0x080065a0

08005450 <_init>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr

0800545c <_fini>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	bf00      	nop
 8005460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005462:	bc08      	pop	{r3}
 8005464:	469e      	mov	lr, r3
 8005466:	4770      	bx	lr
